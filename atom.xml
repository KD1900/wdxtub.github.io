<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小土刀</title>
  <subtitle>Agony is my triumph</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wdxtub.com/"/>
  <updated>2016-09-12T14:11:00.000Z</updated>
  <id>http://wdxtub.com/</id>
  
  <author>
    <name>wdxtub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac CLI 指南</title>
    <link href="http://wdxtub.com/2016/09/12/mac-cli-guide/"/>
    <id>http://wdxtub.com/2016/09/12/mac-cli-guide/</id>
    <published>2016-09-12T13:22:47.000Z</published>
    <updated>2016-09-12T14:11:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于，Mac 上有了一款能用命令行自由操作各种软件获取各种系统信息的工具 —— Mac CLI，废话不多说，赶紧来看看它的强大威力（但是并不推荐）。</p>
<a id="more"></a>
<hr>
<h2 id="安装与删除"><a href="#安装与删除" class="headerlink" title="安装与删除"></a>安装与删除</h2><p>安装方式非常简单，一行即可 <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/guarinogabriel/mac-cli/master/mac-cli/tools/install)&quot;</code>。安装完成之后需要各种配置一下，可以根据个人需要进行选择，我主要挑选了常用的工具类插件，诸如 MySQL 之类的都没有装（因为不需要）</p>
<p>删除的话也是一句 <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/guarinogabriel/mac-cli/master/mac-cli/tools/uninstall)&quot;</code></p>
<p>不过之前安装的各种小插件如果有强迫症可能也需要删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip uninstall glances</div><div class="line">npm uninstall --global fast-cli</div><div class="line">brew uninstall pv</div></pre></td></tr></table></figure>
<p>其他就看心情随意啦</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>这类工具的使用都是非常简单的（但是功能多了反而有些繁琐），输入 <code>mac list</code> 就可以查看各种命令，非常长，给大家感受一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dawang @ wdxtub in ~/Documents/Blog [16-09-12 21:29:11]</span></div><div class="line">$ mac list</div><div class="line"></div><div class="line"> mac CLI – OS X <span class="built_in">command</span> line tools <span class="keyword">for</span> developers</div><div class="line">====================================================</div><div class="line"></div><div class="line">General Utilities:</div><div class="line">mac update: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages</div><div class="line">mac lock: Lock</div><div class="line">mac restart: Restart OS X</div><div class="line">mac sleep: Sleep mode</div><div class="line">mac shutdown: Shutdown</div><div class="line">mac time: Show clock at top right position <span class="keyword">in</span> Terminal/iTerm</div><div class="line">mac uptime: Get the time since last restart</div><div class="line">mac volume: Get the volume from the terminal</div><div class="line">mac volume X: Set the volume from the terminal - X = Level (0-100)</div><div class="line">mac volume:mute: Mute volume</div><div class="line">mac volume:unmute: Unmute volume</div><div class="line">mac volume:ismute: Check <span class="keyword">if</span> the volume is muted or not</div><div class="line">mac screensaver: Start screensaver</div><div class="line">mac folders:list: List folders <span class="keyword">in</span> current directory with their current size</div><div class="line">mac folder:size: Calculate current folder size</div><div class="line">mac folders:remove-empty: Remove empty subdirectories</div><div class="line">mac apps:close-all: Close all opened apps</div><div class="line">mac apps:app-store: Get list of installed apps from App Store</div><div class="line">mac eject-all: Eject all mounted volumes and disks</div><div class="line">mac battery: Get battery information</div><div class="line">mac info: Get OS X version information</div><div class="line">mac find:text X: Find exact phrase recursively inside directory - X = Text string</div><div class="line">mac find:biggest-files : Find biggest files inside directory</div><div class="line">mac find:biggest-directories : Find biggest directories inside directory</div><div class="line">mac zip:extract X: Extract Zip file to current folder - X = Zip file to extract</div><div class="line">mac gzip:compress X: Compress current file using Gzip - X = File to compress</div><div class="line">mac gzip:extract X: Extract Gzip file to current folder - X = Gzip file to extract</div><div class="line">mac tar:compress X: Compress X file/directory using tar with progress indicator - X = File or directory</div><div class="line">mac tar:extract X: Extract tar file to current folder - X = Tar file to extract</div><div class="line"></div><div class="line"></div><div class="line">Search Utilities:</div><div class="line">mac find:recent X: Find files modified <span class="keyword">in</span> the last N minutes - X = number of minutes</div><div class="line">mac search:replace X: Search and replace string <span class="keyword">in</span> file - X = File to perform the search and replace operation</div><div class="line"></div><div class="line"></div><div class="line">Network Utilities:</div><div class="line">mac speedtest: Internet connection speed <span class="built_in">test</span></div><div class="line">mac speedtest:infinite: Run internet speed <span class="built_in">test</span> each 5 minutes</div><div class="line">mac ports: List of used ports</div><div class="line">mac ip:<span class="built_in">local</span>: Get <span class="built_in">local</span> IP address</div><div class="line">mac ip:public: Get public IP address</div><div class="line">mac dhcp:renew: Renew DHCP Lease</div><div class="line">mac dns:clear: Clear DNS Cache</div><div class="line"></div><div class="line"><span class="comment"># 省略</span></div><div class="line">LAMP Utilities:</div><div class="line"></div><div class="line">SSH Utilities:</div><div class="line">mac ssh:download-file X: Download file from remote server through SSH - X = Path of the remote file to download</div><div class="line">mac ssh:download-folder X: Download entire folder from remote server through SSH - X = Path of the remote folder to download</div><div class="line">mac ssh:download-database X: Download database from remote server through SSH - X = Name of the database to download</div><div class="line">mac ssh:sync:<span class="built_in">local</span> X: Sync <span class="built_in">local</span> folder with remote folder using rsync through SSH (download remote folder to <span class="built_in">local</span> folder)</div><div class="line">mac ssh:sync:remote X: Path of the remote folder to sync from <span class="built_in">local</span> folder (upload <span class="built_in">local</span> folder to remote folder)</div><div class="line">mac ssh:upload X: Upload file to remote server through SSH - X = Path of the file to upload to the remote server</div><div class="line">mac ssh:public-key X: Get public SSH key <span class="keyword">for</span> <span class="built_in">local</span> machine</div><div class="line"></div><div class="line"></div><div class="line">Web Development Utilities:</div><div class="line">mac dev:monitor X: Monitor file changes (<span class="keyword">for</span> example: <span class="built_in">log</span> file) - X = File to monitor</div><div class="line">mac dev:optimize-images: Optimize all images <span class="keyword">in</span> current directory and subdirectories</div><div class="line">mac dev:css:convert-to-scss: Convert CSS file to SCSS</div><div class="line"></div><div class="line"></div><div class="line">Performance and maintenance Utilities:</div><div class="line">mac system: Show system information to review mac performance</div><div class="line">mac temp: Show temperature, fan and battery statistics</div><div class="line">mac memory: See memory usage sorted by memory consumption</div><div class="line">mac trash:empty: Empty trash</div><div class="line">mac trash:size: Calculate trash size</div><div class="line">mac desktop:cleanup: Remove all files and directories from the Desktop directory</div><div class="line">mac downloads:cleanup: Remove all files and directories from the Downloads directory</div><div class="line"></div><div class="line"></div><div class="line">iTerm / Terminal Utilities:</div><div class="line">mac iterm:tab-title: Set title to current iTerm tab</div><div class="line"></div><div class="line"></div><div class="line">Git Utilities:</div><div class="line">mac git:config: Display <span class="built_in">local</span> Git configuration</div><div class="line">mac git:open: Open current repository on Github</div><div class="line">mac git:create:branch: Create branch based on current branch</div><div class="line">mac git:branches:date: Get last update date <span class="keyword">for</span> all branches <span class="keyword">in</span> current project</div><div class="line">mac git:undo-commit: Undo latest commit</div><div class="line">mac git:<span class="built_in">log</span>: See latest commits IDs and titles <span class="keyword">for</span> current branch</div><div class="line">mac git:branch: See all branches</div><div class="line">mac git:branch:rename: Rename Git branch</div><div class="line">mac git:branch:remove-local: Remove <span class="built_in">local</span> Git branch</div><div class="line">mac git:branch:remove-remote: Remove <span class="built_in">local</span> and remote Git branch</div><div class="line">mac git:removeecho mac git:branch: See all branches : Remove Git from current project</div><div class="line">mac git:config: Check Git settings</div><div class="line">mac git:add-removed: Add removed files to staged files</div><div class="line">mac git:size: Get size <span class="keyword">for</span> current Git repository</div><div class="line"></div><div class="line"></div><div class="line">Web Utilities:</div><div class="line">mac web:download-images: Download all images from website to current directory</div><div class="line"></div><div class="line"></div><div class="line">Homebrew Utilities:</div><div class="line">mac brew:update: Upgrade Homebrew, installed Homebrew packages, and cleanup</div><div class="line"></div><div class="line"></div><div class="line">Xcode Utilities:</div><div class="line">mac xcode:cleanup: Cleanup XCode files to free up hard disk space</div><div class="line"></div><div class="line"></div><div class="line">Image Utilities:</div><div class="line">mac image:generate:mobile-app-icons X Y: Generate mobile app icons - X = Path of the original image file, Y= Path of the output file path</div><div class="line"></div><div class="line"><span class="comment"># 省略</span></div><div class="line">Magento Utilities:</div></pre></td></tr></table></figure>
<p>有这么多命令，而且现在还支持插件，完全可以根据自己的需要来自定义了，不懂的话直接 <code>mac help</code> 即可，非常方便。不过考虑到我的内存有限，还是挑一些我个人觉得比较常用的分享给大家，其他比较鸡肋的就不介绍了（比方说显示个时间什么的，就有点蛋疼了）</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>mac update</code> 更新各类软件，包括 ruby gems, homebrew, npm 和对应的包，不过基本需要翻墙</li>
<li><code>mac lock</code> 锁屏，有动画效果</li>
<li><code>mac restart</code> 重启</li>
<li><code>mac sleep</code> 睡眠</li>
<li><code>mac shutdown</code> 关机</li>
<li><code>mac hidden:show</code> 显示隐藏文件</li>
<li><code>mac hidden:hide</code> 关闭显示隐藏文件</li>
<li><code>mac zip:extract filename</code> zip 解压</li>
<li><code>mac gzip:compress [file|folder]</code> gzip 压缩文件/文件夹</li>
<li><code>mac gzip:extract filename</code> gzip 解压</li>
<li><code>mac tar:compress [file|folder]</code> tar 压缩文件/文件夹</li>
<li><code>mac tar:extract filename</code> tar 解压</li>
<li><code>mac speedtest</code> 测试网速</li>
<li><code>mac ports</code> 显示被占用的端口（其实就是 <code>sudo lsof -iTCP -sTCP:LISTEN -P</code>）</li>
<li><code>mac ip:local</code> 显示内网 ip（其实就是 <code>ipconfig getifaddr en0</code>）</li>
<li><code>mac ip:public</code> 显示外网 ip（其实就是 <code>wget http://ipinfo.io/ip -qO -</code>）</li>
</ul>
<p>总体来说，基本可以认为是把各个常用的命令封装了一次，用统一的接口暴露出来，但是因为我的需求没这么多，其实直接用 zsh 的 alias 就足够了（所以最终我还是删掉了它）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过短暂的使用，感觉这个工具和我的风格不太符合，比方说明明我用 <code>date</code> 命令就可以获取到当前的时间，为什么还要用 <code>mac time</code> 来呢？明明可以直接 <code>ls -lh</code> 来查看文件大小，为什么要用 <code>mac folders:list</code> 呢？明明可以直接 <code>du -h -d 1</code> 来查看当前文件夹里所有内容的大小，为什么要用 <code>mac folder:size</code> 呢？总有种脱裤子放屁的感觉。</p>
<p>还是更喜欢或许是『莫须有』的对自己电脑的『掌控力』，那么如果觉得这些命令太长太难记，完全可以自己实现一套嘛。我还是喜欢简单一点的语法，命令里有冒号简直是『大逆不道』。</p>
<p>当然，如果是新手，但是又想通过一系列风格统一的命令来（自动化）管理电脑的话，这个还是还可以考虑的。不过相信懂得越多，就越不需要这类看起来很有用的『工具』了吧。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/guarinogabriel/mac-cli/" target="_blank" rel="external">guarinogabriel/Mac-CLI</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于，Mac 上有了一款能用命令行自由操作各种软件获取各种系统信息的工具 —— Mac CLI，废话不多说，赶紧来看看它的强大威力（但是并不推荐）。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Mac" scheme="http://wdxtub.com/tags/Mac/"/>
    
      <category term="工具" scheme="http://wdxtub.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>祝我生日快乐 - 2016</title>
    <link href="http://wdxtub.com/2016/09/11/new-born-2016/"/>
    <id>http://wdxtub.com/2016/09/11/new-born-2016/</id>
    <published>2016-09-10T23:20:45.000Z</published>
    <updated>2016-09-11T01:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>我走过山的时候山不说话，我路过海的时候海不说话。</p>
<a id="more"></a>
<hr>
<p>生日，是在给自己一个机会向过去告别的同时，以一种颇有仪式感的方式开启一段新的旅程。错过了 25 次这样的机会之后，我终于在 2016 年生日当天的清晨，以文字为马，启程了。从校园到社会的转变，也在今天正式完成。于我，每天都是新生，只是今天也许是不一样的新。</p>
<p>特别感谢爸爸妈妈给我走出国门的机会，让我得以跳脱出去，看看自己在这个国家的位置，看看国家在世界的位置。我意识到了对个人对国家的责任，感觉到了轰轰烈烈的变化，酝酿出了去超越的欲望。</p>
<p>脚下这片大地，切切实实让我感受到了规模的力量。面对尚未固化的市场，我们甚至有机会去定制规则，去让技术超越科技本身，成为文化的一部分。需求是巨大的，资源是有限的，新的车库精神和浪潮在酝酿，从最初的模仿，到目前的改进，相信在不久的将来，我们会成为引领时代的弄潮儿。</p>
<p>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。回头望，才发现历史的脚步从未停止。『探索发现』频道的纪录片『运行中国(How China Works)』中有两个片段给我留下了特别深刻的印象。</p>
<p>一是上海的三座摩天大厦。首先是金茂大厦，分层的金字塔式收束象征着传统；其次是上海环球金融中心，开瓶器式造型暗含着打开国门向外学习；最后是上海中心大厦，我们用内外结合的分层层叠的垂直都市花园完成了设计的超越，在传统与现代，钢铁与自然间找到了某种平衡。</p>
<p>二是平塘在建的世界最大球面射电望远镜，科研团队花了十年时间，从三百个地方选中了平塘。建成之后，我们有机会真正把目光投入到没有人见过的地方，甚至是宇宙的边界。全球各地优秀的科学家会因为这只『眼睛』，更多以中国为中心来开展合作和研究，我们在逐渐找回属于自己的地位。</p>
<p>国家如此，个人亦是如此。有各种各样的不足，但一口吃不成个胖子，需要循序渐进改正；有各种各样的成绩，但像投篮一样，差一点就是差百分之百，没有松懈的理由。</p>
<p>希望自己在新的一岁中：从零开始，带着侠客的精神，用更加成熟和冷静的方式回归初心，用最真诚的方式扛起责任赢得信任，用少年般勇敢且浪漫的方式面对危机接受使命。遇到困境和挫折，主动从自己身上找原因，不推托，不懈怠。更加专注，培养自己对信息的敏锐度和钻研精神，发展自己的见解和主张，坚持自己的兴趣，做出有价值的产品。</p>
<p>希望自己在新的一岁中：更加关注人与人之间的连接，努力进入更大的圈子，用个人的努力把文化和艺术的概念带给大家，开始属于我们的文艺复兴时代。坚持开源和分享精神。接触不同的人群，了解不同领域的信息，去探索那些不知道自己不知道的区域，不要把所有的事情都功利化。</p>
<p>希望自己在新的一岁中：完成自己的第一本书，在计算机基础教育领域进行真正的尝试，用责任心和事业心把工作做好。并以此为切入点锻炼自己去适应社会理解社会，低调踏实，在实战中强化自己解决问题的能力。学会倾听他人的意见不说没有依据的话，节约大家的时间，真正以平等的心态做事。避免处在一个我们表现得越愚蠢，它就提供越多回报的变态激励系统之中。</p>
<p>希望自己在新的一岁中：保持乐观和好奇的心态，世间不公之事甚多，面对不公之事，去想这件事应不应该，有没有改进的空间。避免陷入嫉妒、怨憎、仇恨和自怜的思想状态中。仇恨和自怜都是灾难性的思想状态。过度自怜可以让人近乎偏执，偏执是最难逆转的东西之一。生活中的每一次不幸，无论多么倒霉，都是一个锻炼的机会。不应该在自怜中沉沦，而是应该利用每次打击来提高自我。</p>
<p>希望自己在新的一岁中：找到情投意合的另一半，共同为将来努力。无论如何要照顾好自己，规律作息，节制饮食，坚持运动，花更多时间在重要的人身上。</p>
<p>愿望许完了，祝自己生日快乐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我走过山的时候山不说话，我路过海的时候海不说话。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wdxtub.com/categories/Life/"/>
    
    
      <category term="生日" scheme="http://wdxtub.com/tags/%E7%94%9F%E6%97%A5/"/>
    
      <category term="新生" scheme="http://wdxtub.com/tags/%E6%96%B0%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>第十三周 - 上海三月</title>
    <link href="http://wdxtub.com/2016/09/10/march-in-shanghai/"/>
    <id>http://wdxtub.com/2016/09/10/march-in-shanghai/</id>
    <published>2016-09-09T16:15:35.000Z</published>
    <updated>2016-09-09T17:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>甜甜莓茶醉，悠悠春雨喂，问寻难走心中一片白；风飞进，灯光残，忘却茶香独生叹，唯有时光难消亡。</p>
<a id="more"></a>
<hr>
<p>这周工作特别忙，三个项目并行，虽然只有其中一个我是负责人，但是另外俩需要开会沟通协调催促，不得不占据我许多时间，实话说，还不如写代码来得轻松愉快。不过借此机会认识了不少不同部门的同事，找机会还是可以多去请教下各方面的知识，也是挺不错的。</p>
<p>事情一多，原来习惯的依赖记忆和感觉来做事儿的方法已经不堪重负。虽然也还没有溢出，但是我依然不喜欢这种无头苍蝇哪个急做哪个的做事方式，所以也开始用任务管理软件了。就这两天的体验来说，非常不错，至少各个项目的需求能够一一理清并且完成了（实在完成不了的就往后排期嘛）。</p>
<p>因为写代码的时间非常宝贵，所以我会在设计上花更多的时间，争取每一行代码都发挥真正的价值，而不是拍脑袋设计最终导致成倍时间的浪费。不过在公司里写代码，有的时候直接给出没什么 bug 线上可以一直稳定运行的程序反而会让不明真相的人觉得你的工作没什么技术含量，因为一切都显得理所当然。奇怪的是，那些线上整天出问题，大家忙忙叨叨不过是为了把本应该一次做好的工作做好，在不懂的人看来竟是『上心』和『努力』的象征，这就有点搞笑了。</p>
<p>所以说一个好的技术人员不但应该技术做得好，更应该让别人知道之所以线上服务能够快速上线并且不出问题不是因为问题简单，而是因为经验积累和全面思考得到的解决方案靠谱，更不是天天低效加班做那些『看起来很努力』的事情能够比得上的。如果不扭转这种外行看内行的心态，恐怕只会劣币驱逐良币，最终大家事不关己高高挂起，毕竟人往高处走嘛。</p>
<p>最近两周，在我负责的项目上，平时对接的美国团队基本撒手不管了。这™就很尴尬了，从需求到构思设计，从开发到部署测试，一人分饰多角。不过这样也好，沟通成本基本为零了，我也很注意文档和注释的编写，一个人扛就一个人扛呗，唯一影响的可能就是项目进度，毕竟在质量上我还是对自己有要求的。</p>
<p>周中原来的 CMU 同学从美国回来办事儿，一起在公司附近吃了一顿饭，有朋自远方来，不亦乐乎。毕业之后老同学再想见面真的很需要缘分，只是希望能聚的时候，不要因为懒或者天气而轻易放弃。这段时间在公司里也交到了不少新朋友，情投意合且都有强迫症洁癖的同事合作起来非常轻松愉快，能够感受到的技术积累和深入思考，三人行必有我师，要以老司机为榜样，努力提升自己。</p>
<p>说到这个，这周起也开始了自己在代码上比较系统的技术积累（之前以写博客居多），也参考各种技能树大概制定了自己技术发展的路径。这种又有新挑战开启的感觉，既刺激又紧张还能收获很多，想想还有点小激动呢。希望能在一年之内取得让自己满意的成绩。</p>
<p>制定目标 -&gt; 努力训练 -&gt; 坚持不懈 -&gt; 最终突破，这其实是非常靠谱的成长方式，这周我的跑步目标终于初步达成，配速终于在四分三十秒之内了，比大学和研究生的时候每公里都快了一分多钟。看到自己成绩的时候，真的有些不可思议，原本以为要到今年年底才能达到的速度，居然提前三个多月完成了，我算了一下，只要每三步比原来的自己快一秒，每公里所花费的时间就可以少一分钟。不要想着目标有多大有多难，专注每一次呼吸和每一次步伐，一直向前就好了。</p>
<p>鞋脏了又如何，袜子湿了又如何，刮风下雨又如何？大国重器，真正的成绩，真正的改变，就是要经得起各种考验。</p>
<p>下周就要转正了，很高兴能在这个关头完成新的改变，我也做好了所有的准备，等待真正成长起来的那一天。</p>
<p>是雨潺潺，不问窗外寒；孤衾影，长夜莫过知己难，往事已故此景谁还在；世事漫随流水，算来一梦浮生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;甜甜莓茶醉，悠悠春雨喂，问寻难走心中一片白；风飞进，灯光残，忘却茶香独生叹，唯有时光难消亡。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="朋友" scheme="http://wdxtub.com/tags/%E6%9C%8B%E5%8F%8B/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>个人技能发展指南</title>
    <link href="http://wdxtub.com/2016/09/09/wdx-skill-set/"/>
    <id>http://wdxtub.com/2016/09/09/wdx-skill-set/</id>
    <published>2016-09-08T22:28:58.000Z</published>
    <updated>2016-09-09T15:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作也有一段时间了，基本上也参与到了公司除硬件外的各条业务与研发线，在具体的学习和开发过程中也逐渐有了对未来的认知。这里以技能树的方式来给自己定简单的规划。</p>
<a id="more"></a>
<hr>
<p>本文的主要技能点来自 StuQ 的云计算工程师/研发工程师/大数据工程师必备技能这三种，按照我个人的喜欢和判断进行了糅合。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul>
<li>命令行工具: tmux(screen), vim, zsh(oh-my-zsh), git</li>
<li>操作系统: Ubuntu, macOS</li>
<li>语言: Go, Java(maven, gradle), Python(pip, ipython), Javascript(node.js), Ruby(gem)</li>
<li>文档: markdown</li>
<li>编辑器: Visual Studio Code</li>
<li>流程: Scrum, Crystal, FDD</li>
<li>持续集成: Jenkins</li>
<li>协作: Teambition, Slack, Trello</li>
</ul>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>数据结构: JSON, cPickle, protobuf</li>
<li>网络: TCP/IP, VLANs, DNS, CDN, HTTP/HTTPS 协议</li>
<li>调度<ul>
<li>crontab 最原生的定时调度</li>
<li>基于 redis 实现的分布式调度</li>
<li>基于 rpyc 实现的分布式调度</li>
<li>celery/gearman 等调度</li>
</ul>
</li>
<li>并发<ul>
<li>协程 gevent</li>
<li>线程池</li>
<li>多进程 os.fork, idea multiprocessing</li>
</ul>
</li>
<li>调试<ul>
<li>pdb, logging, Sentry, lsof, strace, trace</li>
<li>top, htop, free, iostat, vmstat, ifconfig, iftop</li>
</ul>
</li>
<li>算法<ul>
<li>一致性: Paxos, Raft, Gossip</li>
<li>数据结构: 栈、队列、链表, 散列表, 二叉树、红黑树、B 树, 图</li>
<li>常用算法: 插入排序, 桶排序, 堆排序, 快速排序, 最大子数组, 最长公共子序列, 最小生成树, 最短路径, 矩阵的存储和运算</li>
</ul>
</li>
</ul>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li>云计算: SaaS/PaaS/Iaas, Openstack, Docker</li>
<li>大数据通用处理平台: Spark, Hadoop, ELK</li>
<li>资源调度: Yarn, Mesos</li>
<li>SQL: MySQL, Sqlite, AWS RDS, PostgreSQL </li>
<li>NoSQL: MongoDB, Cassandra, DynamoDB, MongoDB, HBase</li>
<li>缓存: Memcached, Redis, AWS ElastiCache</li>
<li>检索: Solr, ElasticSearch, AWS ElasticSearch </li>
<li>数据分析: Pig, Hive, Spark SQL, Spark DataFrame, Impala, Phoenix,  ELK</li>
<li>消息队列: Kafka, RocketMQ, ZeroMQ, ActiveMQ, RabbitMQ</li>
<li>流式计算: Storm/JStorm, Spark Streaming, AWS Kinesis</li>
<li>日志收集: ELK, Scribe, Flume, Fluentd, AWS CloudTrail</li>
<li>机器学习: Mahout, Spark Mlib, TensorFlow(Google), Amazon Machine Learning, DMTK(MS), scikit learn</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li>计算<ul>
<li>自动扩展: AWS Autoscaling, OpenStack/Hoo!</li>
<li>负载均衡: AWS ELB, HAProxy, Nginx</li>
<li>虚拟化: Hypervisor, Xen, KVM, Hyper-V</li>
<li>容器: Docker, CoreOS, UnixLXC</li>
</ul>
</li>
<li>分布式消息<ul>
<li>消息队列: ZeroMQ, ActiveMQ, RabbitMQ, AWS SQS</li>
<li>事件/消息驱动: AWS SWS, AWS Lambda, AKKA</li>
<li>RPC: Thrift, Protobuf</li>
</ul>
</li>
<li>存储<ul>
<li>网络存储: AWS EBS, NFS v4, Ceph, Apache CloudStack</li>
<li>对象存储: AWS S3, OpenStack Swift</li>
<li>块存储: SAN, AWS EBS, RAID 概念</li>
<li>灾难恢复</li>
<li>文件系统: ext4, XFS</li>
</ul>
</li>
<li>安全: Firewall, DDoS, iptables, WAF, IDS/IPS, VPN</li>
<li>身份认证: SAML, OpenID, Microsoft AD, AWS IAM</li>
<li>监控: ZABBIX, OBSERVIUM, INICGA, AWS CloudWatch<ul>
<li>系统, 日志, 流量, 接口, 数据库</li>
</ul>
</li>
<li>理论: Microservices, RESTful, CAP</li>
<li>设计: 扩展性, 可用性, 可靠性, 一致性, 负载均衡, 过载保护</li>
<li>协议: 二进制协议, 文本协议</li>
<li>接入层: DNS 轮训, 动静态分离, 静态化, 反向代理, LVS, F5, CDN<ul>
<li>nginx, apache, lighttpd, tomcat</li>
</ul>
</li>
<li>逻辑层: 连接池, 串行化, 批量写入, 配置中心, 去中心化</li>
<li>数据层: 缓存优化, DAO, ORM, 双主架构, 主从同步, 读写分离</li>
<li>同步通讯: RPC, RMI</li>
<li>异步通讯: MQ, Cron</li>
<li>性能优化<ul>
<li>代码层: 关联代码优化, cache 对齐, 分之预测, Copy on Write, 内联优化</li>
<li>工具: OProfile, Gprof, JDK 工具</li>
<li>系统优化: 缓存, 延迟计算, 数据预读, 异步, 轮询与通知, 内存池, 模块化</li>
</ul>
</li>
<li>测试: 单元测试, 接口测试, 性能测试, 集成测试</li>
</ul>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul>
<li>核心: Docker, LXC, RunC, Rkt, Systemd-nspawn, Hyper, VMWare Photon, Jetpack, Kurma, Bosh</li>
<li>监控: Sysdig, Guardrail, cAdvisor</li>
<li>管理: DockerUI, Kitematic, Decking.io, Shipyard, StackEngine, Panamx, Fabric8, Triton</li>
<li>基础设施集成: Nova-docker, Magnum, Clocker, Machine, MaestroNG, CloudFoundry Containers Service Broker, Mesos, Fit2Cloud, Boot2Docker</li>
<li>编排调度: Crane, Compose, Swarm, Yarn, Kubernets, Fleet, Marathon, OpenShift, GearD, Rancher</li>
<li>平台: Alauda, DaoCloud, TenxCloud, CSphere, AWS Container Service, Google Container Engine, StackDock, Orchard, Quay.io, Baremetal.io, Tutum, Giant Swarm</li>
<li>服务发现: Consul, Etcd, Zookeeper, SkyDNS, Skydock</li>
<li>日志收集: Splunk, Elasticsearch, Logstach, Kibana, Heka, Fluent, Flume</li>
<li>相关发行版: CoreOS, Project Atomic, RancherOS, ClearLinux</li>
<li>容器 PaaS: Dokku, Deis, Voxoz, Flynn, Octohost</li>
<li>容器网络: Pipework, Flannel, Calico, Weave, Socketplane.io, Pertino, Nuage</li>
<li>容器安全: Notary, SELinux on docker</li>
<li>数据持久化: Flocker, Ceph</li>
<li>开发流程工具: Drone.io, Shippable, Runnable, NodeChecker, Jenkins Docker plugin, Wercker, Totem, Packet, Docker Repository, Packer</li>
</ul>
<h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul>
<li>DevOps: SSH 证书, Fabric, SaltStack, puppet, pssh/dsh, 运维进阶</li>
<li>部署: 蓝绿部署, 灰度发布, 金丝雀发布, Canary 部署, PHOENIX 部署, AWS CloudFormation</li>
<li>基础服务: LAMP/LNMP, FTP, DNS, SAMBA, EMAIL, NTP, DHCP</li>
<li>配置: Chef, Puppet, Ansible, AWS OpsWorks, Nagios, Zabbix, Cacti, SaltStack, pssh/dsh, Fabric</li>
<li>安全: iptables, ipset</li>
<li>网络: TCP/IP, tcpdump</li>
</ul>
<p><img src="/images/14734336749159.jpg" alt=""></p>
<p>引用自 <a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Brendan Gregg <linux performance="" analysis="" and="" tools=""></linux></a></p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li>语言: JavaScript/Node.js, TypeScript</li>
<li>编辑器: Vim, Visual Studio Code</li>
<li>调试工具: Chrome Dev Tools</li>
<li>框架: Vue.js, React, jQuery, Botostrap</li>
<li>规范: HTTP/1.1 RFCs 7230-7235, HTTP/2, ECMAScript 5/6/7, DOM/BOM/XHTML/XML/JSON/JSONP, CommonJS Modules, MicroData/RDFa</li>
<li>文档: JSDoc, Dox/Doxmate/Grunt-Doxmate</li>
<li>构建工具: make/ant, GYP, Grunt, Gulp, Yeoman, FIS, Mod, Webpack</li>
<li>安全: CSRF/XSS, CSP, Same-origin policy, ADsafe/Caja/Sandbox</li>
<li>移动: HTML5/CSS3, 响应式网页设计, Zeptojs/iScroll, React Native/Week</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/TeamStuQ/skill-map" target="_blank" rel="external">StuQ 程序员技能图谱</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作也有一段时间了，基本上也参与到了公司除硬件外的各条业务与研发线，在具体的学习和开发过程中也逐渐有了对未来的认知。这里以技能树的方式来给自己定简单的规划。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="云计算" scheme="http://wdxtub.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="技能树" scheme="http://wdxtub.com/tags/%E6%8A%80%E8%83%BD%E6%A0%91/"/>
    
      <category term="研发" scheme="http://wdxtub.com/tags/%E7%A0%94%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 指南</title>
    <link href="http://wdxtub.com/2016/09/08/nginx-guide/"/>
    <id>http://wdxtub.com/2016/09/08/nginx-guide/</id>
    <published>2016-09-08T12:54:54.000Z</published>
    <updated>2016-09-08T12:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要把负责的项目部署到云端，采用了现在业界流行的 Nginx 反向代理方案，这样后端的 Go 程序只需要专注于业务逻辑和功能。本文记录具体的部署方案。</p>
<a id="more"></a>
<hr>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>虽然云端环境是 Ubuntu 14.04，不过为了后面维护的方便，决定不采用 <code>apt-get</code> 而是手动进行安装。整个过程我已经配置成为了一个脚本，接下来通过讲解脚本来介绍具体安装的过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 运行之前需要切换到 root 用户</span></div><div class="line">serviceDir=/data/home/username</div><div class="line"></div><div class="line"><span class="comment"># 安装配置依赖，这里直接用 apt-get</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing make g++"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">apt-get install make</div><div class="line">apt-get install g++</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(1/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 openssl，其中 openssl-1.0.2 是长期支持版本，所以我采用这个版本</span></div><div class="line"><span class="comment"># 更多信息请访问 https://www.openssl.org/source/</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing openssl"</span> </div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2h.tar.gz</div><div class="line">tar -xzvf openssl-1.0.2h.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/openssl-1.0.2h</div><div class="line">./config</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(2/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 Pcre，为了保证兼容我们这里使用较老的版本</span></div><div class="line"><span class="comment"># 源用的是 stanford 的（因为 pcre.org 我这里打不开）</span></div><div class="line"><span class="comment"># 源：http://ftp.cs.stanford.edu/pub/exim/pcre/</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing pcre"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget http://ftp.cs.stanford.edu/pub/exim/pcre/pcre-8.37.tar.gz</div><div class="line">tar -xzvf pcre-8.37.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/pcre-8.37</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(3/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 zlib，用的就是最新的 1.2.8</span></div><div class="line"><span class="comment"># 源 http://zlib.net/zlib-1.2.8.tar.gz</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing zlib"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class="line">tar -xzvf zlib-1.2.8.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/zlib-1.2.8</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(4/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 Nginx</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing Nginx"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget https://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">tar -xzvf nginx-1.10.1.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/nginx-1.10.1</div><div class="line">./configure --prefix=<span class="variable">$serviceDir</span>/nginx-server --with-openssl=<span class="variable">$serviceDir</span>/openssl-1.0.2h --with-http_ssl_module --with-http_stub_status_module --with-stream</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/nginx-server/conf</div><div class="line">rm -rf nginx.conf</div><div class="line"><span class="comment"># 这里用的是已经配置好的配置文件</span></div><div class="line">wget http://xssz.oss-cn-shenzhen.aliyuncs.com/server_software/nginx.conf</div><div class="line">ln <span class="_">-s</span> <span class="variable">$serviceDir</span>/nginx-server/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</div><div class="line">mkdir <span class="variable">$serviceDir</span>/nginx-server/run</div><div class="line">mkdir <span class="variable">$serviceDir</span>/nginx-config</div><div class="line">ln <span class="_">-s</span> <span class="variable">$serviceDir</span>/nginx-server/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</div><div class="line">nginx -c <span class="variable">$serviceDir</span>/nginx-server/conf/nginx.conf</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(5/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装守护</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Config daemon"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$serviceDir</span><span class="string">'/nginx-server/sbin/nginx -c '</span><span class="variable">$serviceDir</span><span class="string">'/nginx-server/conf/nginx.conf'</span> &gt; /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">'exit 0'</span> &gt;&gt; /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(6/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 清理工作，把所有的安装包保存到 software 文件夹中</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Clean up all the mess"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">mkdir <span class="variable">$serviceDir</span>/software</div><div class="line">mv *.gz <span class="variable">$serviceDir</span>/software</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(7/7)"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"All Done. You can now continue your work."</span></div></pre></td></tr></table></figure>
<p>注释应该已经写得比较清楚了，这里就不再赘述</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置的部分，基本上根据默认的指引就可以完成基本的配置。这里介绍一下我从老司机那里学来的方法，把公共部分和自定义部分分离，看起来更加清晰。</p>
<p>首先，因为是手动安装的 nginx 的，默认的 nginx 配置在 <code>~/nginx-server/conf/nginx.conf</code> 中，我们来看看里面的条目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes 1;</div><div class="line">worker_rlimit_nofile 262140;</div><div class="line">worker_cpu_affinity 1;</div><div class="line">error_log logs/error.log;</div><div class="line">pid run/nginx.pid;</div><div class="line"></div><div class="line">events</div><div class="line">&#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections 65535;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http</div><div class="line">&#123;</div><div class="line">    include mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line">    </div><div class="line">    sendfile on;</div><div class="line">    #aio on;</div><div class="line">    directio 512;</div><div class="line">    output_buffers 1 128k;</div><div class="line">    log_not_found off;</div><div class="line">    keepalive_timeout 65;</div><div class="line">    server_tokens off;</div><div class="line">    </div><div class="line">    gzip on;</div><div class="line">    gzip_comp_level 6;</div><div class="line">    gzip_min_length 1k;</div><div class="line">    gzip_buffers 4 8k;</div><div class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json;</div><div class="line">    </div><div class="line">    log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$request_time&quot; &quot;$upstream_response_time&quot;&apos;;</div><div class="line">    access_log logs/$&#123;server_name&#125;.access.log main;</div><div class="line">    fastcgi_intercept_errors on;</div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">    </div><div class="line">    server_names_hash_max_size 4096;</div><div class="line">    </div><div class="line">    server</div><div class="line">    &#123;</div><div class="line">        listen 80 default;</div><div class="line">        server_name _;</div><div class="line">        access_log off;</div><div class="line">        </div><div class="line">        location /</div><div class="line">        &#123;</div><div class="line">            return 403;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    include /data/home/user/nginx-config/*.http;</div><div class="line">&#125;</div><div class="line"></div><div class="line">stream&#123;</div><div class="line">    include /data/home/user/nginx-config/*.tcp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面的都不重要，重要的是最后两句 <code>include</code> 语句，这里我们就把需要自己配置的部分抽取了出来，放到了文件夹 <code>nginx-config</code> 中。</p>
<p>接着，只要我们在 <code>nginx-config</code> 文件夹中，针对不同的域名和应用进行配置即可，比方说我的 Go 应用跑在本机的 12345 端口上，那么可以这么配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">upstream http_pool&#123;</div><div class="line">    server 127.0.0.1:12345 weight=1 max_fails=3 fail_timeout=30s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server&#123;</div><div class="line">    server_name test.xxx.com;</div><div class="line">    listen 80;</div><div class="line">    ssl off;</div><div class="line">    </div><div class="line">    gzip on;</div><div class="line">    gzip_min_length 1k;</div><div class="line">    gzip_buffers 16 64k;</div><div class="line">    gzip_comp_level 9;</div><div class="line">    gzip_types text/plain text/css application/json application/x-javascript application/xml application/xml+rss text/javascript application/atom+xml;</div><div class="line">    gzip_vary on;</div><div class="line">    </div><div class="line">    location /</div><div class="line">    &#123;</div><div class="line">        proxy_next_upstream http_404 http_502 http_504 http_500 error timeout invalid_header;</div><div class="line">        proxy_pass http://http_pool;</div><div class="line">        proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        client_max_body_size 5000k;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就完成了从 test.xxx.com 到 127.0.0.1:12345 的代理了。注意，上面的配置文件有很多地方需要优化，这里只是一个简单的示例。关于具体怎么优化还有很多需要做的，会在之后慢慢更新。</p>
<p>关于 Nginx 的进阶配置，参考链接中的三篇系列文章写得非常好，这里我就简单带过，需要的同学可以前往继续研究。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Nginx 的使用我比较常用的其实在 <code>nginx -h</code> 中已经有介绍，一般来说我就用一个命令 <code>nginx -s [stop|quit|reopen|reload]</code>，其实也就是 <code>sudo nginx -s reload</code></p>
<p>另外有一个需要注意的地方就是，在 nginx 中配置的 80(http) 和 8080(tcp) 端口不能被占用，不然会一直冲突。另外需要注意配置路径的时候不要弄错了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nginx 是我一直以来不太熟悉的，借着这次机会能从安装到部署实战一下，还有老司机指导，感觉还是很不错的。相比于 Apache 这种重量级选手，Nginx 的灵活轻便让我非常钟意，就像 Go 一样。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a></li>
<li><a href="http://ftp.cs.stanford.edu/pub/exim/pcre/" target="_blank" rel="external">PCRE 源</a></li>
<li><a href="http://www.zlib.net/" target="_blank" rel="external">Zlib</a></li>
<li><a href="https://nginx.org/en/download.html" target="_blank" rel="external">Nginx</a></li>
<li><a href="https://www.zybuluo.com/phper/note/89391" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（1）</a></li>
<li><a href="https://www.zybuluo.com/phper/note/90310" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（2）</a></li>
<li><a href="https://www.zybuluo.com/phper/note/133244" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（3）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要把负责的项目部署到云端，采用了现在业界流行的 Nginx 反向代理方案，这样后端的 Go 程序只需要专注于业务逻辑和功能。本文记录具体的部署方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="服务器" scheme="http://wdxtub.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="反向代理" scheme="http://wdxtub.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="Nginx" scheme="http://wdxtub.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>GeoHash 指南</title>
    <link href="http://wdxtub.com/2016/09/07/geohash-guide/"/>
    <id>http://wdxtub.com/2016/09/07/geohash-guide/</id>
    <published>2016-09-07T12:17:34.000Z</published>
    <updated>2016-09-07T12:19:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>做任何跟地理位置相关的服务，位置如何表示及存储是绝对绕不开的问题之一。位置的表示倒是可以用经纬度，但是索引和检索的时候，经纬度这种二维表示法就比较麻烦了，这时我们就可以利用 GeoHash 进行『降维攻击』来解决这个问题了。</p>
<a id="more"></a>
<hr>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>前几年 LBS 的特性像一股龙卷风一样席卷了整个 App 圈，任何应用都迫不及待地加入了基于地理位置的相关特性。这之中一个非常火的功能就是——查看附近的人/地点/事情，比方说查看附近的餐馆、景点、朋友等等。那么问题就来了，怎么判断是不是附近呢？怎么样定义这个『附近』呢？</p>
<p>就用『附近的人』这个功能来举例，假如我要找自己身边的人，最简单粗暴的办法就是把我跟所有人的距离算一次，然后选一个阈值，在这个阈值范围内的，认为是『附近』。但是问题来了，如果我们的数据库中有一亿人，那不是每次都要计算一亿次？我们得想个办法减少计算量。</p>
<p>因为知道自己的经纬度，所以可以知道自己在哪里，比方说深圳市南山区，那么我只需要计算同在南山区的人即可，考虑到我可能在边界上，那么多加周边的几个区进行计算即可。这样一来就可以过滤掉大部分的无用计算了。</p>
<p>这种方式有一个问题，就是需要很多额外的信息，比方说我得知道南山区，不同国家不同地区各种区域划分，而且有时候区域还会变化（比方说萝岗和南沙并入广州），这样就引入了许多不必要的复杂度。不过即使如此，这种利用特定区域划分来减少计算范围的方法，非常有借鉴意义，类似于搜素剪枝，也就是索引。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>因为要使用索引的思想，那么就需要确定拿来建立索引的字段，可是经纬度这种二维的数据很难通过一维索引来高效检索，于是我们可以利用 GeoHash 来进行转换。</p>
<p>不过在此之前，我们先来看看另一个概念 —— <a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="external">字典树 Trie</a>。</p>
<blockquote>
<p>在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p>
</blockquote>
<p>这里我们需要在意的就是一点，相同父节点数目越多的子节点，从词的角度上相似度越高。接下来的 GeoHash 算法就部分满足这种特性。</p>
<p>在介绍具体的算法之前，我们先从较高层级来理解 GeoHash:</p>
<ul>
<li>GeoHash 可以把经纬度转换成一个字符串，把二维变成一维</li>
<li>每个 GeoHash 出来的字符串表示的是一个矩形区域，虽然不够精确，但是一定程度上反而能够保护隐私。Hash 值越长，表示的区域越小</li>
<li>越往左的编码表示的范围越大，可以利用这个特性来缩小或扩大检索范围</li>
</ul>
<p>比方说，北京城区的 GeoHash 大概是这样的（本文部分图片来源<a href="http://www.cnblogs.com/LBSer" target="_blank" rel="external">这里</a>，感谢作者制图）：</p>
<p><img src="/images/14732507518837.jpg" alt=""></p>
<p>可以看到，每个格子都有一个编号，具体编号的顺序也有具体的算法，比较常用的是 Peano 曲线、Hilbert 曲线和 Z-order 曲线。</p>
<p><img src="/images/14732507430572.jpg" alt=""></p>
<p>至于选择哪种算法，在地理位置相关的应用中，主要考虑的是实现的难度和区域的突变特性。这里以 Peano 填充曲线来做例子，具体的编码方式是从左下角开始的，然后逐步进行递归细化。</p>
<p><img src="/images/14732507303613.jpg" alt=""></p>
<p>Peano 曲线的主要问题是突变性，比方说从 0111 到 1000，虽然数值只变了 1，但是具体的区域就是一上一下两个极端（观察上面图片 Hilbert 曲线的变化幅度就小很多）。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>了解了基本概念，现在我们可以来看看到底怎么把经纬度转换成 GeoHash 字符串了。主要分三个步骤：</p>
<ol>
<li>分别计算经纬度，转换成二进制字符串</li>
<li>合并字符串并分组</li>
<li>根据编码表转换为 Base32 字符串</li>
</ol>
<p>这里就以广州的坐标为例（北纬 23.1291，东经 113.2644），看看如何转换为 GeoHash 字符串。这里多说一句，纬度的范围是 [-90, 90]，经度的范围是 [-180, 180]，其中负数代表南纬和西经。</p>
<p>先来处理纬度 23.1291，下面的表格中左值和右值分别代表区间的范围，中值用作二分法，这里如果落在左值和中值之间，则对应位为 0，反之为 1：</p>
<table>
<thead>
<tr>
<th style="text-align:center">左值</th>
<th style="text-align:center">中值</th>
<th style="text-align:center">右值</th>
<th style="text-align:center">位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-90</td>
<td style="text-align:center">0</td>
<td style="text-align:center">90</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">45</td>
<td style="text-align:center">90</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">22.5</td>
<td style="text-align:center">45</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">33.75</td>
<td style="text-align:center">45</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">28.125</td>
<td style="text-align:center">33.75</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">25.3125</td>
<td style="text-align:center">28.125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">23.90625</td>
<td style="text-align:center">25.3125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">23.90625</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">22.8515625</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">22.8515625</td>
<td style="text-align:center">23.02734375</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>然后再来算经度 113.2644，同样的道理：</p>
<table>
<thead>
<tr>
<th style="text-align:center">左值</th>
<th style="text-align:center">中值</th>
<th style="text-align:center">右值</th>
<th style="text-align:center">位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-180</td>
<td style="text-align:center">0</td>
<td style="text-align:center">180</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">90</td>
<td style="text-align:center">180</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">135</td>
<td style="text-align:center">180</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">112.5</td>
<td style="text-align:center">135</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">123.75</td>
<td style="text-align:center">135</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">118.125</td>
<td style="text-align:center">123.75</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">115.3125</td>
<td style="text-align:center">118.125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">115.3125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">113.203125</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">113.203125</td>
<td style="text-align:center">113.5546875</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>组合一下，纬度的编码是 <code>10100 00011</code>，经度的编码是 <code>11010 00010</code>。我们需要把这两个字符串组合起来，<strong>奇数位放经度，偶数位放纬度</strong>（这里要注意，网上很多文章这里没有写对），组合起来就是 <code>11100 11000 00000 01101</code>，也就是 <code>28 24 0 13</code>，对照 Base32 编码</p>
<table>
<thead>
<tr>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">b</td>
<td style="text-align:center">11</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">d</td>
<td style="text-align:center">13</td>
<td style="text-align:center">e</td>
<td style="text-align:center">14</td>
<td style="text-align:center">f</td>
<td style="text-align:center">15</td>
<td style="text-align:center">g</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">h</td>
<td style="text-align:center">17</td>
<td style="text-align:center">j</td>
<td style="text-align:center">18</td>
<td style="text-align:center">k</td>
<td style="text-align:center">19</td>
<td style="text-align:center">m</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">n</td>
<td style="text-align:center">21</td>
<td style="text-align:center">p</td>
<td style="text-align:center">22</td>
<td style="text-align:center">q</td>
<td style="text-align:center">23</td>
<td style="text-align:center">r</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">s</td>
<td style="text-align:center">25</td>
<td style="text-align:center">t</td>
<td style="text-align:center">26</td>
<td style="text-align:center">u</td>
<td style="text-align:center">27</td>
<td style="text-align:center">v</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">w</td>
<td style="text-align:center">29</td>
<td style="text-align:center">x</td>
<td style="text-align:center">30</td>
<td style="text-align:center">y</td>
<td style="text-align:center">31</td>
<td style="text-align:center">z</td>
</tr>
</tbody>
</table>
<p>可以得到广州的坐标（北纬 23.1291，东经 113.2644）经过 GeoHash 之后的前四位是 <code>ws0e</code>，我们在 GeoHash 的<a href="http://geohash.org/ws0e96s8g" target="_blank" rel="external">官方网站</a> 检验一下：</p>
<p><img src="/images/14732507181227.jpg" alt=""></p>
<p>可以看到前四位确实是 <code>ws0e</code>，我们手算的结果是正确的！不过因为计算精度的问题，这里只算了前四位，实际上是可以根据我们的需要来进行更多位数的计算的，网页中的编码长度是 9 位，精度基本达到 2 米的数量级（8 位的话则是 19 米，7 位是 76 米，6 位是 610 米）。如果是要做『附近』功能的话，至少要到 6 位的精度。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>了解了具体的 GeoHash 算法之后，我们可以来看看具体在实际应用中可能遇到的各种问题：</p>
<ul>
<li>GeoHash 编码对应的是矩形区域，在边界处需要处理临近区域，但是具体区域的编码并不完全跟 hash 之后的字符串一致（参考前面 0111 和 1000的例子）。为此，我们需要使用周围八个区域的 GeoHash 编码，通过有限扩大搜索范围的方法来解决这个问题</li>
<li>如果是用传统关系型数据库，可以直接利用 GeoHash 的前缀进行检索，比方说 <code>select * from locations where geohash like &#39;ws03%&#39;</code></li>
<li>如果需要兼顾速度与精确度，那么同时保存经纬度和 GeoHash 即可，利用 GeoHash 来缩小范围，再利用经纬度进行精确计算</li>
<li>计算周围 8 个矩形区域，利用原始的 GeoHash 字符串显然是不行的（考虑分别处于赤道两边且很相近的两个点）对于经度一个维度来说，无论切分几次，它的左邻和右邻都只会和它相差1。画一下就知道它是一棵有序的01满二叉树。根据当前矩形的经度串，很容易就获得了它的两个东西邻接经度串。同理，可以根据其纬度串获取南北邻接纬度串。连同当前矩形的经度串和纬度串，就能组合得到周边的8个矩形的二进制串了。Base32 编码后的到 geohash 值，即是所需要的8个索引了（此段<a href="http://evthoriz.com/2015/07/02/Geohash%20%E7%AE%97%E6%B3%95%E7%9A%84%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/" target="_blank" rel="external">来源</a>）</li>
<li>Base32 是一种简单的加密算法，详情请参考后文链接</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文我们见到了解了 GeoHash 的相关概念和应用，具体的使用过程中还需要根据具体需求来进行调整（比方说不同的曲线填充算法），但是要保证具体实现的一致性。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Geohash" target="_blank" rel="external">Geohash - From Wikipedia, the free encyclopedia</a></li>
<li><a href="http://geohash.org/ws0e96s8g" target="_blank" rel="external">geohash.org</a></li>
<li><a href="http://charlee.li/geohash-intro.html" target="_blank" rel="external">geohash：用字符串实现附近地点搜索</a></li>
<li><a href="http://www.cnblogs.com/LBSer/p/3310455.html" target="_blank" rel="external">GeoHash核心原理解析</a></li>
<li><a href="https://github.com/mmcloughlin/geohash" target="_blank" rel="external">mmcloughlin/geohash(包含其他几个实现，可以对比下速度)</a></li>
<li><a href="https://github.com/wdxtub/geohash" target="_blank" rel="external">wdxtub/geohash(我自己在项目中使用的)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Base32" target="_blank" rel="external">Base32 - From Wikipedia, the free encyclopedia</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做任何跟地理位置相关的服务，位置如何表示及存储是绝对绕不开的问题之一。位置的表示倒是可以用经纬度，但是索引和检索的时候，经纬度这种二维表示法就比较麻烦了，这时我们就可以利用 GeoHash 进行『降维攻击』来解决这个问题了。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="索引" scheme="http://wdxtub.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="位置" scheme="http://wdxtub.com/tags/%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Destiny 游戏分析</title>
    <link href="http://wdxtub.com/2016/09/07/destiny-game/"/>
    <id>http://wdxtub.com/2016/09/07/destiny-game/</id>
    <published>2016-09-06T23:04:08.000Z</published>
    <updated>2016-09-06T23:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Destiny 是我在留学时候最常玩的主机游戏之一，虽然随着游戏自然热度下降很多时候成了鬼服，但是有着 Bungie 在后面撑着，游戏的设计还是颇精妙的，下面是我当时玩的时候的一些笔记。</p>
<a id="more"></a>
<hr>
<h2 id="社区建设"><a href="#社区建设" class="headerlink" title="社区建设"></a>社区建设</h2><ul>
<li>Facebook, Twitch 的无缝链接<ul>
<li>可以在游戏启动前查看截图/视频(观众较多，被赞较多)</li>
</ul>
</li>
<li>有哪些朋友在玩</li>
<li>可以查看路人的信息，加好友等</li>
<li>方便的组队系统</li>
</ul>
<h2 id="武器系统"><a href="#武器系统" class="headerlink" title="武器系统"></a>武器系统</h2><ul>
<li>主武器<ul>
<li>Auto Rifle</li>
<li>Canon</li>
<li>Scout Rifle</li>
<li>Pulse Rifle</li>
</ul>
</li>
<li>特殊武器<ul>
<li>Sniper Rifle</li>
<li>Shotgun</li>
<li>Fusion Rifle</li>
</ul>
</li>
<li>重武器<ul>
<li>Machine Gun</li>
<li>Rocket Launcher</li>
</ul>
</li>
</ul>
<h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><p>地球因为战争而毁灭，只剩最后一个城市，幸存的人类成为守护者来保护最后的希望。</p>
<h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><ul>
<li>非常清晰的任务指示<ul>
<li>进度，奖励，追踪，设置一目了然</li>
</ul>
</li>
<li>任务基本都可以重复挑战，但只有第一次有经验加成<ul>
<li>剧情任务：用于推进剧情，有等级限制</li>
<li>无尽任务：等级限制较低，但敌人等级会根据参加当前任务的玩家等级进行调整。<ul>
<li>地图上有随机出现的任务领取点，可以一直领任务</li>
<li>杀死特定敌人收集资源</li>
<li>清除某个区域所有敌人</li>
<li>探索某些地点</li>
</ul>
</li>
<li>随机任务：在剧情和无尽任务中可能会碰到的突发任务，可以自由选择是否参加</li>
</ul>
</li>
<li>Tower，Earht 最后一个城市<ul>
<li>也就是主城，物品鉴定/任务领取/副本支线/各种 NPC</li>
</ul>
</li>
<li>Old Russia, Earth<ul>
<li>一开始的战场，相当于一幅地图</li>
<li>有十多个子任务</li>
</ul>
</li>
<li>Ocean of Storms, Moon<ul>
<li>第二个开放地图</li>
<li>有十多个子任务</li>
</ul>
</li>
<li>The Crucible<ul>
<li>竞技场，类似于普通的枪战游戏</li>
</ul>
</li>
<li>Venus<ul>
<li>十级开启</li>
</ul>
</li>
<li>画面属于次世代中规中矩，没有丢光环的脸</li>
<li>人物动作扎实，剧情有 Ghost 指引</li>
<li>每个人都有一个 Ghost，可以保存最后的记忆</li>
<li>有很多中文元素，例如标语和路牌</li>
<li>游戏音效很有未来感</li>
<li>有一些任务需要 PlayStation Plus 才可以玩</li>
</ul>
<h2 id="装备设定"><a href="#装备设定" class="headerlink" title="装备设定"></a>装备设定</h2><ul>
<li>在提供多样性的前提下尽可能减少了复杂度，没有太多繁杂的属性</li>
</ul>
<h2 id="经济系统"><a href="#经济系统" class="headerlink" title="经济系统"></a>经济系统</h2><ul>
<li>游戏通用货币：GLIMMER</li>
<li>用钱买的货币：SILVER<ul>
<li>500 = $4.99</li>
<li>1000(+100) = $9.99</li>
<li>2000(+300) = $19.99</li>
</ul>
</li>
</ul>
<h2 id="人物设定"><a href="#人物设定" class="headerlink" title="人物设定"></a>人物设定</h2><ul>
<li>三种职业，每种职业有三种子职业（战士，远程，法师）</li>
<li>满级 40 级</li>
<li>装备分为不同等级：普通（白），特别（绿），罕见（蓝）</li>
<li>非普通装备需要鉴定后才可以使用（也就是不可以在战场上捡到就用）</li>
<li>武器<ul>
<li>主武器：Rifle，Patrol</li>
<li>特殊武器：狙击枪，霰弹枪</li>
<li>重武器：重机枪，火箭筒</li>
<li>武器在到达一定熟练度可以升级</li>
</ul>
</li>
<li>防具<ul>
<li>头盔</li>
<li>护臂</li>
<li>胸甲</li>
<li>足甲</li>
<li>披风</li>
<li>装饰品（40级开放）</li>
</ul>
</li>
<li>Ghost Shell<ul>
<li>任务指示，剧情推进</li>
</ul>
</li>
</ul>
<h2 id="移动客户端"><a href="#移动客户端" class="headerlink" title="移动客户端"></a>移动客户端</h2><ul>
<li>新闻频道</li>
<li>查看朋友状态</li>
<li>游戏中通知</li>
<li>与朋友的聊天</li>
<li>个人信息<ul>
<li>职业</li>
<li>上一次任务</li>
<li>游戏数据<ul>
<li>非常详尽的数据统计</li>
</ul>
</li>
<li>装备</li>
<li>物品</li>
<li>仓库</li>
</ul>
</li>
<li>任务栏<ul>
<li>任务</li>
<li>成就</li>
<li>目标</li>
<li>Bonus</li>
<li>声望</li>
</ul>
</li>
<li>NPC 相关</li>
<li>搜索：用户、玩家、小组、论坛、新闻、帮助</li>
<li>周边商店</li>
</ul>
<p>几乎游戏内的所有东西都可以在移动客户端找到</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Destiny 是我在留学时候最常玩的主机游戏之一，虽然随着游戏自然热度下降很多时候成了鬼服，但是有着 Bungie 在后面撑着，游戏的设计还是颇精妙的，下面是我当时玩的时候的一些笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Game" scheme="http://wdxtub.com/categories/Game/"/>
    
    
      <category term="Destiny" scheme="http://wdxtub.com/tags/Destiny/"/>
    
      <category term="射击" scheme="http://wdxtub.com/tags/%E5%B0%84%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>经济机器是怎样运行的 - 文字稿</title>
    <link href="http://wdxtub.com/2016/09/07/how-economic-works/"/>
    <id>http://wdxtub.com/2016/09/07/how-economic-works/</id>
    <published>2016-09-06T22:57:11.000Z</published>
    <updated>2016-09-06T23:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是视频<a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo" target="_blank" rel="external">『经济机器是怎样运行的』</a>的自制文字稿，当初花了差不多三个小时才完成。这个视频用简单清晰的方式把经济这个大事儿说清楚了，我感觉还是非常不错的。正好在整理笔记，就分享给大家。</p>
<a id="more"></a>
<hr>
<p>经济虽然看起来复杂，其实是以简单和机械的方式运行的。经济有几个简单的零部件和无数次重复的简单交易组成。这些交易首先是由人的天性驱动的，因而形成三股主要的经济动力：</p>
<ol>
<li>生产率的提高</li>
<li>短期债务周期</li>
<li>长期债务周期</li>
</ol>
<p>我们来看看这三个动力是如何相互作用的。</p>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>交易可以看做是无数交易的总和，而交易是一件非常简单的事情，交易时刻都在发生，每次买东西都是进行一笔交易。在每次交易中，买方使用货币或信用，向卖方交换商品、服务或金融资产。货币加上信用等于支出总额。</p>
<p>支出总额是经济的驱动力。</p>
<p>如果用支出总额除以产销总量，就得出价格。交易是经济最基本零件，所有的经济周期都是交易造成的。所以理解了交易，就理解了整个经济。</p>
<p>一个市场，由买卖所有商品的所有买方和卖方构成。经济就是由所有市场内的全部交易构成。把全部市场的总支出和销量加在一起，就得到了了解经济运行状况的所有信息。</p>
<p>个人、企业、银行和政府都在以上述方式从事交易，用货币和信用，交换商品、服务和金融资产。政府是最大的买方和卖方，而政府有两个组成部分，即收税和花钱的中央政府和中央银行。央行控制着经济中的货币和信贷数量，因此不同于其他买方和卖方。央行通过利率和发行更多货币来实现这种控制。因此，央行在信贷流通中发挥着重要作用。</p>
<h2 id="信贷"><a href="#信贷" class="headerlink" title="信贷"></a>信贷</h2><p>信贷是经济中最重要的组成部分，但也许是人们最不了解的部分。它之所以重要，是因为它是经济中最大也最变幻莫测的部分。贷款人和借款人，与市场交易中的买方和卖方没有两样。通常，贷款人希望自己的钱生出更多的钱，而借款人是想购买当前无法承担的东西。借贷可以同时满足贷款人和借款人的需要。</p>
<p>借款人保证偿还借款，称为本金，并支付额外的款额，称为利息。利率高时借贷就会减少，因为利息昂贵，反过来，利率低时借贷就会增加，因为利息便宜。如果借款人保证偿还债务，而贷款人相信这一承诺，信贷就产生了。任何两个人都可以通过协定，凭空创造出信贷。</p>
<p>信贷看似简单，实则复杂。信贷一旦产生，立即成为债务。债务是贷款人的资产，是借款人的负债。等到借款人之后偿还了贷款，并支付了利息，这些资产和负债将会消失，交易得以完成。</p>
<p>借款人一旦获得了信贷，便可以增加自己的支出，而支出是经济的驱动力，因为一个人的支出是另一个人的收入。如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱交给他。</p>
<p>信用良好的借款人具备两个条件：</p>
<ol>
<li>偿还能力</li>
<li>不能还债时的抵押物</li>
</ol>
<p>收入与债务的比率高，借款人就具有良好的偿还能力。如果不能偿还，借款人还可以用有价值可以出售的资产作为抵押物。这样贷款人可以放心地把钱借给他们。</p>
<p>所以收入增加，借贷也增加，从而能够增加支出，由于一个人的支出是另一个人的收入，这将导致借贷进一步增加，并不断循环。这一自我驱动的模式导致经济增长，也正是因为如此，才产生了经济周期。</p>
<h2 id="周期"><a href="#周期" class="headerlink" title="周期"></a>周期</h2><p>在一项交易中，为了获得某样东西，你必须付出另一样东西。长期来看，你得到多少取决于你生产了多少。我们的知识虽时间而逐渐增多，知识的积累会提高我们的生活水平，我们将此称为生产率的提高。</p>
<p>一个善于创新和勤奋的人，会比那些自满且懒惰的人更快提高生产率和生活水平，但在短期内不一定体现出来。</p>
<p>生产率在长期内最关键。信贷在短期内最重要。这是因为生产率的提高不会剧烈波动，因此不是经济起伏的重要动力。但是债务是这样定义的，借贷时消费超过产出，还债是消费低于产出。</p>
<p>债务量的波动有两大周期，其中一个周期持续大约 5-8 年，另一个大约持续 75-100 年。虽然每个人都在波动中，因为距离太近，往往意识不到。</p>
<p>如上所示，经济波动不是取决于创新，而是跟信贷更有关系。我们先想象一个没有信贷的经济运行。在这样的环境里，增加支出的唯一方式是增加收入，因此需要提高生产率和工作量，提高生产率是经济增长的唯一途径。由于我的支出是另一个人的收入，当我或另一个人提高生产率的时候，经济就会增长，而且是一个稳步增长。</p>
<p>但是由于我们借债，于是产生了周期，原因并不是任何法规，而是人的天性和信贷的运作方式。借债不过是提前消费，为了购买现在买不起的东西，你的支出必然超过收入，因此你需要借钱，实际上是像未来的自己借钱，这样马上就形成了一个周期。通常，一旦你借钱，就制造了一个周期。对个人是这样，对整个经济运行也是这样。这就是为什么需要理解信贷，因为信贷创造了一系列机械的和可以预料的将在未来发生的事件。这就是信贷不同于货币的地方。</p>
<p>完成交易需要使用货币，交易立即完成。利用信用开始交易，买卖双方创造了信贷，只有当偿还债务之后，交易才算完成。</p>
<p>现实生活中，大部分所谓的钱，其实都是信贷。美国国内的信贷总额大约为 50 万亿美元，而货币总额只有大约 3 万亿美元。在有信贷的经济运行中，不仅可以通过提高生产率提高支出，还可以通过借贷来提高支出。因此信贷可以使收入增长在短期内超过生产率的增长，但在长期内并非如此。</p>
<p>信贷并不是坏事，只是会导致周期性变化。</p>
<p>信贷如果造成超过偿还能力的过度消费，就是不良信贷。但是，如果信贷高效率地分配资源产生收入并偿还债务，就是良性信贷。在有信贷的经济运行中，我们可以观察各种交易，了解信贷如何带来经济增长，是一个链式增长的过程，但借债形成周期。</p>
<h2 id="短期经济周期"><a href="#短期经济周期" class="headerlink" title="短期经济周期"></a>短期经济周期</h2><p>随着经济活动的增加，出现了扩张，这是短期债务周期的第一阶段，支出继续增加，价格开始上涨。原因是，导致支出增加的是信贷，而信贷可以立刻凭空产生。如果支出和收入的增长速度超过所出售的商品的生产速度，价格就会上涨，我们把价格的上涨称为通货膨胀。</p>
<p>央行不希望通货膨胀过高，因为这会导致许多问题。央行在看到价格上涨时就会提高利率，随着利率的上升，有能力借钱的人就会减少，同时，现有的债务成本也会上升，每个月信用卡的还款额会增加。由于人们减少借债，并且还款额度增长，所以剩下来用于支出的资金将会减少，因此支出速度放慢，而由于一个人的支出是另一个人的收入，环环相扣，人们的收入将下降。由于支出减少，价格就会下跌，我们称之为通货紧缩，经济活动减少，经济便陷入衰退。如果衰退过于严重，而通货膨胀不再成为问题，央行将降低利率，使经济活动重新加速。随着利率降低，偿债成本下降，借债和支出增加，出现另一次经济扩张。</p>
<p>在短期债务周期中，限制支出的唯一因素，是贷款人和借款人的贷款意愿。如果信贷易于获得，经济就会扩张，如果信贷不易获得，经济就会衰退。请注意，这个周期主要由央行控制。</p>
<p>短期债务周期通常持续 5-8 年，在几十年里不断重复。但是请注意在每个周期的低谷和高峰后，经济增长和债务都超过前一个周期。为什么会这样，这是人促成的。人具有借更多钱和花更多钱的倾向而不喜欢偿还债务，这是人的天性，因此在长期内，债务增加的速度超过收入，从而形成长期债务周期。</p>
<h2 id="长期债务周期"><a href="#长期债务周期" class="headerlink" title="长期债务周期"></a>长期债务周期</h2><p>尽管人们的债务增加，但贷款人会提供更宽松的借贷条件，这是为什么？这是因为大家都以为形势一片大好，因为仅注意最近出现的情况。最近出现的情况是什么呢？收入一直在增加，资产价值不断上升，股票市场欣欣向荣，现在是繁荣时期，用借来的钱购买各类资产，很划算。当人们过度借贷消费时，泡沫便产生了。</p>
<p>因此，尽管债务一直增加，但是收入也已相近的速度增加，从而抵消了债务。我们把债务与收入比例称为债务负担，只要收入继续上升，债务负担就可以承受。于此同时资产价格迅猛上升，人们大量借钱来购买资产，因为投资促使资产价格日益升高，人们感觉自己很富有，因此即使积累了大量债务，收入和资产价值的上升帮助借款人在长期内保持良好的信用。但是这种情况显然无法永久持续下去。</p>
<p>几十年来，债务负担不断增加使偿贷成本越来越高，到了一定的时候，偿贷成本的增加速度超过收入，迫使人们削减支出，由于一个人的支出是另一个人的收入，收入开始减少，而偿贷成本继续增加，导致支出继续减少，周期开始逆转。</p>
<p>这时到达了长期债务的顶峰，债务负担变得过重。美国和欧洲在 2008 年就发生了这一情况。日本在 1989 年和美国在 1929 年因同样原因发生了这一情况。现在经济进入了去杠杆化时代。</p>
<h2 id="去杠杆化"><a href="#去杠杆化" class="headerlink" title="去杠杆化"></a>去杠杆化</h2><p>在去杠杆化过程中，人们削减支出，收入下降，信贷消失，资产价格下跌，银行发生挤兑，股票市场暴跌，社会紧张加剧，整个过程开始下滑并形成恶性循环，随着收入下降和偿债成本增加，借款人倍感拮据，随着信用消失，信贷枯竭，借款人再也无法借到足够的钱来偿还债务，借款人竭力填补这个窟窿，不得不出售资产，在支出下降的同时，出售热潮使市场充满待售资产。这时股票市场暴跌，不动产市场一蹶不振，银行陷入困境，随着资产价格下跌，借款人的抵押物价值也在降低，进一步降低了借款人的信用，人们觉得自己很穷，信贷迅速消失，支出减少，收入减少，财富减少，信贷减少，借债减少，这是一个恶性循环。看起来和衰退相似，但是无法通过降低利率来改变局面。</p>
<p>在衰退中，可以通过降低利率来刺激借贷。但是在去杠杆化过程中，由于利率已经很低，低至零，从而丧失刺激功能，因此降低利率不起作用。</p>
<p>美国国内的利率在 1930 年代的去杠杆化期间下降到零，在 2008 年也是如此。</p>
<p>衰退与去杠杆化的区别在于，在去杠杆化过程中，借款人的债务负担变得过重，无法通过降低利率来减轻。贷款人意识到债务过于庞大，根本无法足额偿还。借款人失去了偿带能力，其抵押物失去价值，他们觉得受到了债务的极大伤害，不想再介入更多债务。贷款人停止放贷，借款人停止借贷。整个经济体与个人一样都失去了信用度。</p>
<p>那么应该怎样应对去杠杆化？问题在于债务负担太重，必须减轻，为此可以采用四种办法：</p>
<ol>
<li>削减支出（紧缩）</li>
<li>减少债务（债务违约和重组）</li>
<li>财务再分配</li>
<li>发行货币</li>
</ol>
<p>历史上每一个去杠杆化阶段都是如此：</p>
<ul>
<li>美国（1930年代）</li>
<li>英国（1950年代）</li>
<li>日本（1990年代）</li>
<li>西班牙和意大利（2010年代）</li>
</ul>
<p>削减支出会导致收入下降，收入下降速度超过还债的速度，因此债务负担实际上更为沉重。削减支出的办法引起通货紧缩。企业不得不削减成本，这意味着工作机会减少，失业率上升。这导致下一个步骤，即必须减少债务。</p>
<p>借款人不还钱，存款人会担心银行没钱，于是纷纷取出存款，银行受到挤兑，个人、企业、银行出现债务违约，这种严重的经济收缩，就是萧条。萧条的一个主要特征是人们发现原来属于自己的财富中很大一部分其实并不存在。</p>
<p>很多贷款人不希望自己的资产消失，同意债务重组。债务重组意味着贷款人得到的还款减少，或偿还期延长，或利率低于当初商定的水平，无论如何，合约被破坏，结果是债务减少，贷款人希望多少收回一些贷款，这强过血本无归。债务重组让债务消失，但是由于它导致收入和资产价值以更快的速度消失，债务负担继续日趋沉重。削减债务和削减支出一样令人痛苦，并且导致通货紧缩，所有这些都对中央政府产生影响，因为收入降低和就业减少，意味着政府的税收减少，于此同时，由于失业率上升，中央政府需要增加支出，很多失业者储蓄不足，需要政府的财务资助。此外政府制定刺激计划和增加支以弥补经济活动的减少。</p>
<p>在去杠杆化过程中，政府的预算赤字飙升，原因是政府的支出超过税收。政府必须加税或者举债以填补赤字。但是要从哪里拿钱？</p>
<p>从富人手中，通过征税把财富从富人那里转到穷人手中。这样会产生阶级矛盾，如果萧条继续下去，就会爆发社会动荡，不仅国家内部的紧张加剧，而且国家之间也会这样，债务国和债权国之间尤其如此，这种局势会导致政治变革，尤其是极端的变革。</p>
<p>1930 年代，这种情况导致希特勒掌权，欧洲爆发战争，和美国的大萧条。</p>
<p>因为支出的很大一部分是信贷，但是萧条时期信贷消失，所以人们钱不够花，那么怎么办，央行发行更多货币，但这个会引起通货膨胀和刺激经济。</p>
<p>央行通过用这些货币购买金融资产，帮助推升了资产价格，从而提高了人们的信用，但是这仅仅有助于那些拥有金融资产的人。</p>
<p>因此，为了刺激经济，央行和政府必须合作。央行通过购买政府债券，其实是把钱借给政府，使其可以通过刺激计划和失业救济金，来增加购买商品和服务的支出，这增加了人们的收入，也增加了政府的债务，但是这个办法将降低经济中的总债务负担。</p>
<p>这是一个风险很大的时刻，决策者需要平衡考虑降低债务负担的四种办法，必须平衡兼顾通货紧缩和通货膨胀以便保持稳定，如果取成适当的平衡，就可以带来<strong>和谐的去杠杆化</strong>。</p>
<p>所以说去杠杆化可以是痛苦的，也可以是和谐的。怎样才能实现和谐的去杠杆化？需要结合使用这四种办法。</p>
<p>那么发行的货币是否会增加通货膨胀呢，如果增发的货币抵消了信贷的降幅就不会引发通货膨胀，因为影响价格的因素是支出，而支出包括货币和信贷。</p>
<p>央行为了扭转局面，不仅需要推动收入的增长，而且需要让收入的增长率，超过所积累债务的利率。也就是收入一定要比债务增长得快。但发行过多货币会导致恶性通货膨胀。</p>
<p>实际上去杠杆化是一个把高债务水平变化到低债务水平的过程。为了使经济再次恢复正常，这个通货再膨胀的阶段大约要持续 7-10 年，因此有失去的 10 年这个说法。</p>
<h2 id="三条经验法则"><a href="#三条经验法则" class="headerlink" title="三条经验法则"></a>三条经验法则</h2><ol>
<li>不要让债务的增长速度超过收入</li>
<li>不要让收入的增长速度超过生产率</li>
<li>尽一切可能提高生产率</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是视频&lt;a href=&quot;https://www.youtube.com/watch?v=rFV7wdEX-Mo&quot;&gt;『经济机器是怎样运行的』&lt;/a&gt;的自制文字稿，当初花了差不多三个小时才完成。这个视频用简单清晰的方式把经济这个大事儿说清楚了，我感觉还是非常不错的。正好在整理笔记，就分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://wdxtub.com/categories/Reading/"/>
    
    
      <category term="经济" scheme="http://wdxtub.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="机制" scheme="http://wdxtub.com/tags/%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>汇报后的小思考 - 博弈</title>
    <link href="http://wdxtub.com/2016/09/05/report-little-thought-2/"/>
    <id>http://wdxtub.com/2016/09/05/report-little-thought-2/</id>
    <published>2016-09-05T14:27:13.000Z</published>
    <updated>2016-09-05T16:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前觉得『横看成岭侧成峰』，看到不同的东西，不过是因为角度不同罢了。今天才意识到，想要『一览众山小』，非『凌绝顶』不可。所谓大局观，是掌握更多信息，从更高的层次观察和思考问题。</p>
<a id="more"></a>
<hr>
<p>今天参加了两场『不太一样』的会议，一是跟市场部讨论商业智能相关的数据需求，二是和知识产权部一起向公关的老大汇报。</p>
<p>作为数据平台唯二的开发，面对市场部的各类需求，我的内心一方面是拒绝的，另一方面也深知个中的重要性。技术其实和猫一样，无论黑猫白猫，能抓到老鼠就是好猫。现阶段，我们更需要能创造出价值的技术，而不是摆在博物馆悉心呵护的技术。即使如此，问题依然也很多，比方说时间和人力都远远不够，我和另一个开发人员身上各自背着几个不同项目的设计/开发/维护任务，人力几乎是零冗余的。但是这些其实都不是理由，如果天时地利人和都准备有了，还怎么体现我们的价值呢？</p>
<p>在各项资源都吃紧的条件下，我们的策略一是和市场部相关同事梳理具体的需求逻辑，力求在现有系统的基础上做简单调整即可满足需求，同时也给出临时的权宜之计用作过渡；二是结合数据使用者的相关习惯有针对进行较通用的开发，业务的归业务，架构的归架构。</p>
<p>不可忽视的是不同背景不同专业不同角色思考问题角度的不同，开发人员一定要尽可能设身处地去为用户思考，而不是去过度追求设计及实现的优美，当然这并不意味着可以瞎写代码，而是根据实际需要而不是假想的需求来进行开发。</p>
<p>因为数据平台涉及公司各个业务线，需要对接的系统和数据源非常多，如何能够高效进行沟通协调，如何保证讨论时大家的理念概念模型一致，都是值得探索和研究的问题。我现在的策略很简单，就是以『新参者』的姿态，尽可能快得去学习如何把事情做好。</p>
<p>真正看到用户是如何使用自己做的系统的时候，才更能意识到哪里做好了，哪里没做好。但是这之中出现 bug 确实非常尴尬，虽然是因为经验不足了解不深所犯的错，不过错误的数据会导致错误的判断，我的内心是不安的。这次的尴尬经历也更让我意识到把工作做完和把工作做好之间的巨大差距，还是要以更高的标准来要求自己。</p>
<p>中午睡觉起来没多久就接到电话，五点要开会，会上跟公关老大汇报，虽然汇报内容我已经熟稔于心，但还是花了一个多小时重新准备了一次。和考试前复习的大多不会考一样，准备的内容大概只有百分之十有用，剩下的讨论都在我从来没有想过的层次上进行，有点方，但是也很高兴，因为看到自己的差距就有了目标，有了目标，好好努力就是了。</p>
<p>第一次和知识产权部门与公关部门打交道，让我意识到开发只是做好事情的一环，甚至是最基础的一环，眼界放开，每一环都很重要。在诸如占坑定标准的事儿上，技术能力不是最重要的，敏锐的嗅觉和超前的筹划才是。</p>
<p>班门弄斧不是我的爱好，汇报完我了解的内容，基本就在努力观察和学习前辈们思考和表达的方法，也算有幸一撇更高层次的博弈到底是怎么回事儿。程序员间的博弈其实蛮简单，无非是接口如何设计、工作如何划分、脏活累活哪个团队来接。但是到商业博弈的范畴，那可是真刀真枪，招式不多，但是每一次出击都得切入要害，看似风平浪静其实暗涌澎湃。</p>
<p>从老大的字里行间，能够感受到他对信息广度及获取渠道的在意，只有掌握各方的动向，知己知彼，才能结合不同地区社会运转的规律和组织架构的要点，从更高的层级来判断一件事情的价值。另一个很重要的判断依据，则是历史，前事不忘后事之师绝不只是要吸取教训这么简单，而是努力去利用各方面的经验。这么说来，还真应该再去好好看看历史和兵法，都是财富。</p>
<p>『上将伐谋，其次伐交，再次伐兵，其下攻城』，真正参与到项目中来，才意识到各种公司和组织在标准制定这件事情上的白热化竞争。这之中知识产权相关的工作，就是保护自己的壁垒，没有稳固的根基，哪能广积粮缓称王闷声发大财呢？</p>
<p>有的时候出了事故才是真正体现系统价值的时候，在没有出错的时候，总是会有人不相信到底能多错，不相信系统的能力。所以还是应了那句老话，塞翁失马焉知非福。</p>
<p>至于我为什么参与到这件事儿里来了，其实起因也非常简单，说白了就是一封邮件。可能因为一直以来的写作习惯，会注意上下文的逻辑及读者的感受。因此知识产权部门的同事对我的印象还蛮好的，事情才以我完全没有想到的方式在发展着。回过头来想想，即使我当时知道会因此参与到这个项目中来，能做到的程度也就和当初没啥差别。我不是为了别的什么，只是想把事情做好，只是想让大家知道，从我手中交出去的东西，是靠谱的。</p>
<p>大家身上都有很多值得我学习的地方，以后更要踏踏实实以『新参者』的心态向各行各业的老司机学习，再努力争取机会去实践。</p>
<p>最初了解『新参者』这个词，是在东野圭吾的侦探小说中，新参者就是『新来的人』的意思，主角名叫加贺，他的一句话让我印象特别深刻：</p>
<blockquote>
<p>我工作时经常想，残忍的凶杀案发生后，我们不仅要将凶手抓获，还有必要彻查案件发生的原因，否则同样的事情可能还会发生。真相中有很多值得我们学习的东西。</p>
</blockquote>
<p>为了写博客又晚睡了，但是用双手辅助完成整个思考的过程，才是一天最佳的结束方式吧。前些天才知道原来匹兹堡也举办过 G20，再加上正在杭州举办的这次，总让我感觉冥冥之中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前觉得『横看成岭侧成峰』，看到不同的东西，不过是因为角度不同罢了。今天才意识到，想要『一览众山小』，非『凌绝顶』不可。所谓大局观，是掌握更多信息，从更高的层次观察和思考问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="思考" scheme="http://wdxtub.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="汇报" scheme="http://wdxtub.com/tags/%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title>【聊聊无人机】柒 碰撞规避</title>
    <link href="http://wdxtub.com/2016/09/03/drone-thought-collision-avoidance/"/>
    <id>http://wdxtub.com/2016/09/03/drone-thought-collision-avoidance/</id>
    <published>2016-09-02T23:29:07.000Z</published>
    <updated>2016-09-03T03:51:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于消费级无人机来说，安全比性能更重要。撞机是小事，砸伤划伤人可就是大事了。本文就来说说，无人机规避碰撞的一些研究思路，以及个人的一个超有诚意的小想法。</p>
<a id="more"></a>
<hr>
<p>前面的系列文章主要介绍了美国对于无人机及其空域的划分及管控。因为各方面原因，没有办法在博客中介绍中国的管理思路（感兴趣可以自行搜索已公开的资料），不过可以提一下的是，欧洲的思路和中国的比较类似，与美国的方法有比较大的不同。不过这并不是本文的重点，今天还是来聊聊无人机规避碰撞的问题。</p>
<h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>为了保证无人机的安全，各大厂商可谓是煞费苦心，从地理围栏、主动避障到各种自动化操作，层出不穷的各种方法主要是通过限制、辅助和自动化来降低无人机发生安全事故的风险。这种风险主要是两方面，一是无人机与物体（飞行器、行人、环境）相撞，二是无人机因为各种复杂状况超出处理能力而导致的坠落。</p>
<p>先说说第二个方面，无人机坠落俗称『炸机』，这里用来代称各种因为无人机硬件条件限制所导致的事故，包括但不限于：</p>
<ul>
<li>飞行中遇到大风失去平衡且在已有的动力条件下无法恢复所导致的坠落</li>
<li>电量不足以返航所以不知道在哪里就掉下来了</li>
<li>突然下雨，电机进水失去动力，于是掉下来</li>
</ul>
<p>为了解决以上这些问题，基本思路就是在飞行控制芯片中集成更加先进的算法，在硬件中塞更多的传感器以增加无人机的环境感知能力。那么问题来了，在电池技术没有什么突破的今天，更强大的算法意味着更多的计算，是要智能还是要续航，这种两难的问题就很尴尬了。</p>
<p>前段时间跟我司相机和飞控部门的同事聊过，因为计算能力限制，很多时候连基本的傅立叶变换都没有办法快速完成，也就意味着市面上大部分高大上的论文是没办法集成到无人机的智能系统中的。</p>
<p>回过头来说第一方面，要避免无人机意外撞机，首先需要解决的是让无人机知道周围有什么东西。不过开始之前，先来参考一下有人驾驶飞机的空中管制系统。从最原始的无线电通信，到之后 ATC（空中交通管制系统）的普及使得各类飞行基本得以『井水不犯河水』，能不能考虑把有人驾驶飞机的这一套用在无人机上呢？</p>
<p>很可惜，答案是否定的。与传统的有人驾驶飞机相比，无人机可以被认为是一个全封闭的自治系统（如果数据链路断了，飞手便无法控制），很难根据不同情况做出合适的反应；另外无人机的飞行路线也比较随意，不像有人驾驶飞机基本按照固定的航线飞行；更重要的，无人机的范围很大，无论是大小还是性能都有巨大差异，很难上一套统一的标准来满足所有类型无人机的需求。</p>
<p>抛开军用和商用无人机不说，民用消费级无人机正处于群雄并起的春秋战国时代，大家都想把自己的技术上升成标准。这个时候首发优势就很重要了，谁能先拿出一整套完整的方案，谁的市场占有率高，大约就可以强势促成标准。</p>
<p>以前我还不明白为什么各行各业都有自己的一套标准，直到自己参与其中才意识到，标准就是规矩，规矩背后就是协商好的『分赃』方法，不仅可以拦住搅局者，还能稳固自己的一亩三分地，这样回过头来看布雷顿森林体系，就觉得『哎呀真特么都是套路』。</p>
<p>好了不扯远了，接下来我们来看看现在比较常用的规避碰撞的技术。</p>
<h2 id="现有技术"><a href="#现有技术" class="headerlink" title="现有技术"></a>现有技术</h2><p>各大厂商的相关研发基本围绕着两个思路以达到『感知与躲避』的目的：</p>
<ol>
<li>依赖于多传感器的环境感知</li>
<li>依赖于智能算法的自主规避机制</li>
</ol>
<p>这里我分别来简单说一下。</p>
<p>依赖传感器的解决方案基本可以被认为是『非合作型』方法，之所以叫『非合作型』，主要是因为整个过程不需要与其他物体进行任何形式的通讯（或者是不具有通讯能力的，比方说鸟类）。基本的方法简单粗暴，五个字就可以概括——『声光电磁气』。从雷达到红外线到摄像头到气压计到指南针，基本可以认为是数字信号处理的过程，虽然可以把大部分计算用硬件实现，不过还是前面的问题，暂且不考虑具体的准确性，电量本身就是跨不过去的门槛。</p>
<p>依赖智能算法的解决方案其实也需要硬件配合，不过更多的是通讯的硬件，比方说 TCAS 和 ADS-B。有通讯基本意味着是『合作型』，通过数据链路共享信息，以达到智能规避碰撞的目的。</p>
<p>TCAS 的介绍可以参考下面摘录自《世界民航杂志120期》的内容：</p>
<blockquote>
<p>TCAS 全称是 Traffic Collision Avoidance System，主要由询问器、应答机、收发机和计算机组成。监视范围一般为前方30海里，上、下方为3000米，在侧面和后方的监视距离较小。（为了减少无线电干扰，管理条例对TCAS的功率有所限制。它把TCAS的前向作用距离限定在45英里左右，侧向和后向作用距离则更小。）</p>
<p>TCAS 的询问器发出脉冲信号，这种无线电信号称为询问信号，与地面发射的空中雷达交通管制信号类似。当其他飞机的应答器接收到询问信号时，会发射应答信号。TCAS 的计算机根据发射信号和应答信号间的时间间隔来计算距离。同时根据方向天线确定方位，为驾驶员提供信息和警告，这些信息显示在驾驶员的导航信息显示器上。</p>
<p>TCAS 可以提供语言建议警告，计算机可以计算出监视区内30架以内飞机的动向和可能的危险接近，使驾驶员有25－40秒的时间采取措施。（TCAS 可跟踪45架飞机，根据选定目标的优先级，最多显示30架飞机。）</p>
</blockquote>
<p>看起来很符合要求嘛！不过这样一套系统要 20 万人民币以上，估计短时间内很难降价到能够装载到民用消费级无人机身上。但是 TCAS 的整体思路是值得借鉴的，在下一节会详细介绍。</p>
<p>另一个比较新但是比较有潜力的技术是 ADS-B，全称是 Automatic Dependent Surveillance - Broadcast，会自动从相关机载设备获取参数向其他飞机或地面站广播飞机的位置、高度、速度、航向、识别号等信息。用百科中的一段原理介绍：</p>
<blockquote>
<p>ADS-B 系统是一个集通信与监视于一体的信息系统，由信息源、信息传输通道和信息处理与显示三部分组成。ADS-B的主要信息是飞机的 4 维位置信息(经度、纬度、高度和时间)和其它可能附加信息(冲突告警信息，飞行员输入信息，航迹角，航线拐点等信息)以及飞机的识别信息和类别信息。此外，还可能包括一些别的附加信息，如航向、空速、风速、风向和飞机外界温度等。这些信息可以由以下航空电子设备得到：1)全球卫星导航系统(GNSS);2)惯性导航系统(INS);3)惯性参考系统(IRS);4)飞行管理器；5)其它机载传感器。ADS-B 的信息传输通道以 ADS-B 报文形式，通过空-空、空-地数据链广播式传播。ADS-B 的信息处理与显示主要包括位置信息和其它附加信息的提取、处理及有效算法，并且形成清晰、直观的背景地图和航迹、交通态势分布、参数窗口以及报文窗口等，最后以伪雷达画面实时地提供给用户。</p>
</blockquote>
<p>ADS-B 其实早在十年前就开始了相关的研究和测试，不过目前还没有搭载 ADS-B 的民用消费级无人机（虽然比 TCAS 便宜，但是也要 1 万人民币以上），这种涉及行业和政府之间的沟通协调，往往需要比较长的时间。另外 NASA/Google/Amazon 也都在开发类似的自动化系统，一个技术最终是否能够落地，就要看哪家拿出来的方案更加靠谱了。不过我个人的观察是，因为空中环境的复杂性，可能会基于不同场景使用不同的方案，具体还需要大量的实地测试。</p>
<p>简单总结一下，目前无人机在安全性相关技术的探索，面临着以下问题</p>
<ul>
<li>计算量：硬件条件不允许高负荷计算</li>
<li>传感器：目前还没有集成多种感知能力且足够便宜的传感器能满足设计和冗余的需求</li>
<li>信息源：不同厂商目前并没有信息共享</li>
<li>政策标准：需要较长时间才能达成标准和政策</li>
<li>成本：基于硬件的解决方案在成本上比较有压力</li>
</ul>
<p>实话说，即使是特别昂贵的 TCAS，其实在设计上也有许多妥协，也因此有很多限制条件。目前不存在一种技术，能够一劳永逸解决无人机的安全性问题，如果有，恐怕就是『不起飞』。</p>
<p>之所以这么说，是因为接下来我的想法仅仅在一定条件下适用，而且基于软件的解决方案在现实的移动设备上稳定性存疑，可以作为某种意义上『感知与躲避』功能的补充和辅助，并不能取代硬件解决方案（虽然这部分我是无能为力的）。</p>
<h2 id="我的想法"><a href="#我的想法" class="headerlink" title="我的想法"></a>我的想法</h2><p>再强调一次，接下来的想法只针对特定的条件和场景，是『感知与躲避』功能的补充和辅助。目前能在我司的支持下做相关的研究探索我很开心，希望这个项目不要因为各种各样奇怪原因被迫中止/终止。如果不幸发生了最坏的情况，虽然目前的研究成果没办法带走（毕竟属于公司），如果有相关公司愿意支持这个项目，我还是很愿意从头再设计开发一次的，因为这对于无人机安全性提高还是有一定帮助的。</p>
<p>这里不会说得特别详细（不然就太没有职业道德了），主要说说思路。</p>
<h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>针对前面说的『计算量/传感器/信息源/政策标准/成本』几大问题，以 Cortana/Siri 的方式，通过数据连接转移复杂的计算，利用云的力量为无人机提供计算能力和智能调度能力的支持。</p>
<p>回想一下用 Siri 的方式，我们唯一需要做的就是用正常方式说话，然后通过网络传送到服务器，服务器进行处理之后再把结果返回给我们。这样一来，计算量/信息源/成本 这三个问题在用比较好网络连接的条件下就能够一定程度解决。</p>
<p>举个实际的例子：我在飞一台没有搭在 ADS-B 的无人机，但是无人机会把飞行信息发送到手机，手机会把这些信息上传到服务器上，服务器会据此计算/获取：</p>
<ul>
<li>无人机附近的天气状况（大风、降雨等恶劣天气的概率）</li>
<li>无人机附近的其他飞行器的飞行状况，并根据具体特征进行碰撞预警（比方说有另一架无人机在 200 米外，且相向飞行，那么双方都会在手机上接收到碰撞语境提示）</li>
<li>无人机附近的航线及其他计划飞行信息</li>
</ul>
<p>这样用户就可以在手机上获知周围的环境状况，并据此手动/自动进行对应操作。</p>
<h3 id="适用条件"><a href="#适用条件" class="headerlink" title="适用条件"></a>适用条件</h3><p>从前面的描述中，我们可以知道网络是这个系统中非常重要的一环，于是，适用条件/主要服务的飞行器是：</p>
<ul>
<li>没有搭载诸如 ADS-B 或 TCAS 雷达的飞行设备</li>
<li>较好的网络连接条件</li>
<li>遥控器与飞行器间能够维持比较稳定的通信链路</li>
</ul>
<p>实话说，都满足并不简单。尤其是后两个依赖通信的条件，需要找机会实地测试才能给出比较科学的结论。</p>
<h3 id="技术标准"><a href="#技术标准" class="headerlink" title="技术标准"></a>技术标准</h3><p>这部分涉及的问题很多，最近读了一些航空方面的综述，总结下来，需要回答的问题是：</p>
<ul>
<li>怎么样的空域条件可以认为是安全的</li>
<li>每台无人机所需要的安全空域的范围有多大</li>
<li>预警的级别及条件</li>
<li>数据传输的格式及安全性</li>
<li>针对不同性能和类型的飞行器的最低标准</li>
<li>紧急情况的预警机制</li>
</ul>
<p>这部分其实用现有的技术基本可以实现，就是具体的标准需要大量测试。</p>
<h3 id="算法探索"><a href="#算法探索" class="headerlink" title="算法探索"></a>算法探索</h3><p>目前我正在开发的是一套飞行器模拟器，能够模拟无人机的飞行及相关数据上报，这样在测试各类算法的时候能够有更多的数据依据（真实源数据由公司提供）。模拟器的思路很简单，就是基于用户的真实飞行数据进行仿真数据的生成，然后作为算法的输入，来测试算法的表现。</p>
<p>具体的测试标准也需要进行量化，不然就无从评估不同算法的有效程度。这部分需要更多和美国同事沟通，以及多多了解相关的研究（如果有认识的人在做这个请向我引荐一下谢谢！）</p>
<p>目前我的思路大约是机器学习 + 随机过程优化。这部分可以做得简单粗暴，不过要想更加智能，就得多花点时间研究了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了一下碰撞规避的相关技术，并结合自己的工作提出了一点微小的设想，欢迎对无人机飞行感兴趣的同学来交流探讨，争取在 NASA/Google/Amazon 之前撸出一套靠谱可用的系统。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于消费级无人机来说，安全比性能更重要。撞机是小事，砸伤划伤人可就是大事了。本文就来说说，无人机规避碰撞的一些研究思路，以及个人的一个超有诚意的小想法。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="无人机" scheme="http://wdxtub.com/tags/%E6%97%A0%E4%BA%BA%E6%9C%BA/"/>
    
      <category term="碰撞" scheme="http://wdxtub.com/tags/%E7%A2%B0%E6%92%9E/"/>
    
      <category term="感知" scheme="http://wdxtub.com/tags/%E6%84%9F%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>第十二周 - 湫兮如风</title>
    <link href="http://wdxtub.com/2016/09/02/qiu-xi-ru-feng/"/>
    <id>http://wdxtub.com/2016/09/02/qiu-xi-ru-feng/</id>
    <published>2016-09-02T14:48:23.000Z</published>
    <updated>2016-09-02T16:28:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>日月星辰悄悄，升了又落，我却不知白天黑夜的存在。</p>
<a id="more"></a>
<hr>
<p>白驹过隙，转瞬间，工作就满三个月了。有时候，觉得自己变了，变得现实，学着妥协，试着在各种压力中找到平衡；有时候，又觉得自己没变，一如既往地举着理想主义的旗帜，虽然做了最坏的打算，但还是用最积极的方式在做事。</p>
<p>在父母眼中我永远是长不大的孩子，不说千里，儿行百里母担忧。在发小眼中我永远是那个能吃的小胖墩，打打闹闹没个正形。长大一些，在同学眼中，可能是考试最稳定又最不稳定的，趁着早读吃早餐踩着铃声上课的『捣蛋』分子。工作之后，在同事眼中我又是怎么样呢？</p>
<p>管它是啥，自己开心最重要。</p>
<p>周末一直在聚会，周五晚上凑齐了四个『小学生』，虽然喝得走路歪歪扭扭，心里却感动得稀里哗啦，二十年的羁绊，真的已经比亲兄弟还要亲了。周六带着几个要好的同事在广州溜了一大圈，疯疯癫癫在优衣库试衣间拍奇葩照片，钻到小巷子里只为癞蛤蟆和天鹅肉。周日和高中同学聚了聚，在大洋彼岸漂泊，难免有各种酸甜苦辣，不过难过的时候想着有这么一帮好朋友，或多或少是些慰藉。</p>
<p>周六路过沙面的时候，不由得想起当年和老爸一起沿着江边一路从猎德骑到沙面白天鹅的日子。真的特别庆幸拥有这么多单车上的回忆，我和老爸大约骑遍了广州的东南西北，路过各种各样的风景，但最美的风景其实就在身边。现在想想，哪怕是骑着车去买馒头和烤鸭，都是特别美好的记忆。等工作稍微稳定一些，一定要再去创造些回忆。</p>
<p>周一五点多起床赶着首班动车回深圳上班。周中买了个折叠床和智能手环，解决了『睡』和『跑』的难题。工作中涉及的四五个项目我需要扮演不同的角色，如何合理安排时间平衡沟通和设计，开发和测试就成了一大难题，尤其是产品经理和开发这两个角色，很容易顾此失彼，具体的方法还在慢慢摸索中，反正之前看的书并没有能够解决我的疑惑。</p>
<p>忙忙碌碌之中，还是灵机一动找到了一个突破点，既有学术价值，也有应用价值，我很感兴趣，也非常值得研究。简单来说是智能防撞系统，详细的会在『聊聊无人机』系列中更新。人的自信就是靠把一件一件事情做好建立起来的，能够在刚工作的时候就独立扛起一个项目，开发一个完整的系统，并且在这个过程中学着跟各个部门打交道，我觉得是特别幸运的事情（其实也正是我选择回国的原因），虽然压力不小，不过我就是要 no zuo no die try one try。</p>
<p>这周新日志没写，而是结合工作的内容把之前的坑给补上了，通过一个假想的项目，把设计上的思考和具体实践中需要注意的地方写下来，是一个很好的学习和积累。不过第一次尝试，还是有些准备不足，以后要继续改进。另外因为字体源访问速度较慢的缘故，有两天博客的访问体验非常糟糕，没办法，折腾到一两点，死扣一点点的优化，用耐心去面对网络的复杂。</p>
<p>当然也有好消息！博客的访问量超过十万了！要不要搞个小活动感谢一下大家的支持呢？写书这周因为事务繁杂进展不多，不过最艰难的部分整理基本完成，之后可以按部就班一点点优化了。</p>
<p>有了主攻方向，感觉整个人都斗志昂扬了起来，是时候多快好省搞一波大新闻了！</p>
<p>每次日落日升，今夕何夕，请跟我乘风而去。有一天，想成为，你们的骄傲。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;日月星辰悄悄，升了又落，我却不知白天黑夜的存在。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="里程碑" scheme="http://wdxtub.com/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>第十一周 - 大鱼</title>
    <link href="http://wdxtub.com/2016/08/26/big-fish/"/>
    <id>http://wdxtub.com/2016/08/26/big-fish/</id>
    <published>2016-08-26T10:46:17.000Z</published>
    <updated>2016-08-26T11:46:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>海浪无声将夜幕深深淹没，漫过填空尽头的角落。看海天一色，听风起风落；大鱼的翅膀，已经太辽阔。</p>
<a id="more"></a>
<hr>
<p>伴随着稀里哗啦的大雨，我在从深圳平移到广州的路上写下了这篇周记。不过这周却是晴朗的，之前担心的事情一一顺遂。我不禁好奇，为什么我每周都有走上正轨的感觉，是轨道变太快还是我之前走太歪？</p>
<p>姑且叫做『与时俱进』好了。</p>
<p>上周日一个人在房间里看女排哭成一股泥石流，从决赛看到半决赛再到四分之一决赛，倒着看就能明显感觉到姑娘们的心劲儿上来了，尤其是郎平定海神针般杵在场边，颇有千军万马过，我自巍然不动的感觉。而世界级主攻朱婷就更是没话说了，每次她跳起来我就感觉稳了。最后一局 22 比 22 的那次『爆头』式大力杀球，让我甚至有点心疼对手了。这个故事告诉我们，老大当如郎平，上将当如朱婷（押韵的）。</p>
<p>虽然奥运会已经闭幕，但是奥运精神估计还有几个月的半衰期，经过两周比较系统的俯卧撑及跑步练习，上下肢力量，尤其是稳定性有了极大的提高，具体表现出来就是耐力更持久投篮更准确。这个故事告诉我们，要想把事情做好，不能三天打鱼两天晒网，系统训练虽然枯燥和辛苦，却是提高的唯一途径。</p>
<p>周末终于来了一次团队建设，不过随着开学的临近，不少好朋友要暂时离开了。每次要送别，我都会想到古龙的一句话，大意是走的时候我不送你，但倘若再来，无论大风大雨，我都要去接。我特别记得在北京三元桥地铁站的那次回头，瞬间涌上来的伤感淹没了记忆。好在现在我回来了，距离也不再是问题了。</p>
<p>聊聊工作，当救火队员完成支援工作之后（虽然主要是老司机扛着），我终于能够把大部分精力投入到自己负责的项目中去了。写写客户端写写服务端再当当 PM，日子就在设计接口、对接项目、隔空开会以及看论文写文档中度过了。虽然任务很多，不过这也逼着自己提高效率，也更能学到不同岗位不同角色所需要的能力，最重要的，心劲儿要满，心气儿不能高，这样才能沉下心做事，把方方面面的细节都考虑到。</p>
<p>虽然客户端和服务端都是我来写，不过对于 API 的设计、计算的优化、业务场景的理解以及基于用户体验出发的构思，都需要更多向身边有丰富经验的老司机们求教。从写教材这事儿我学到的一点就是，一旦意识到自己交付的是不太可能改变的东西，就更要仔细，代码和白纸黑字一样，第一次没做好，有弥补的机会是非常幸运的，要抱着一次就做好的心态，做到自己的最好。生活也是这样，每一分每一秒过去之后便无法改变，虽然人人都知道，但并不是每个人都能真正理解个中含义。自己擅长的要做好，自己不擅长的，要么找擅长的人，要么努力让自己成为擅长的人。</p>
<p>和同事一起看了谍影重重5，也买了一张大鱼海棠的原声带，生活与工作的平衡很难找到，但是也要尽力去试试。现在想想大鱼海棠的主题，其实任何选择都无可厚非，无论爱或者是被爱，都可以是幸福的，多一点真诚，少一些套路。和伯恩一样，我们都在不断的冲突和挣扎中拨开迷雾寻找自我，即使真相不一定是自己想要的，但也许真实的残酷要比海市蜃楼的美好要让人踏实。</p>
<p>大鱼在梦境的缝隙里游过，我松开时间的绳索，执子手吹散苍茫茫烟波。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;海浪无声将夜幕深深淹没，漫过填空尽头的角落。看海天一色，听风起风落；大鱼的翅膀，已经太辽阔。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="生活" scheme="http://wdxtub.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【Go 之旅】V 项目实战：一起看飞机 - 客户端</title>
    <link href="http://wdxtub.com/2016/08/25/go-plane-3/"/>
    <id>http://wdxtub.com/2016/08/25/go-plane-3/</id>
    <published>2016-08-25T13:40:20.000Z</published>
    <updated>2016-08-31T14:18:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面我们搭建好了后台（虽然实际开发中我是客户端后台一起写的），这次来看看如何做一个配套的客户端（虽然从各种角度看都非常『简约』），小归小，还是有一点意思的。</p>
<a id="more"></a>
<hr>
<p>还记得系列第一篇中的设计稿吗？我把它捣鼓出来了：</p>
<p><img src="/images/14721336651764.jpg" alt=""><br>（感谢上镜的各位名人名言）</p>
<h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>因为早早确定了接口，其实 iOS 部分的实现比后端还要简单粗暴，即使如此，具体开发过程中的坑有很多，比如（大家看一下源代码应该就知道了）</p>
<ul>
<li>时隔太久我忘了 Objective-C 要咋写，花了十分钟才摆脱了 C++ 写法</li>
<li>iOS9 新增的强制 Https 需要改一下描述文件才能走 Http（毕竟只是一个测试）</li>
<li>为了调试方便所有的网络都走的是同步请求（理论上都得用异步来着）</li>
<li>为了测试方便，所有的信息会统一输出到中间的文本框中，我干脆直接叫它 <code>consoleTextView</code></li>
<li>为了测试方便，采用类似终端输出，快速对接接口</li>
<li>为了每次生成不一样的数据，随机生成用户 id，并利用手机本身的定位来获取位置</li>
<li>没有做缓存（服务器端也没有），所以速度还是比较慢。上线不到 1ms，但是涉及数据库操作的『位置』和『附近』功能，基本就需要 200ms 了，这部分还有很大的优化空间</li>
<li>天气部分使用 Yahoo 的 API，弄清楚格式即可</li>
<li>航线部分没找到免费的，暂时先不考虑（也没时间自己写爬虫嘛）</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本来想着把这个项目撸完整一点的，不过因为工作压力和个人事务缠身，不得不仓促结尾。在可以预见的将来应该也不会继续填坑了，只有开源的代码可能能给大家一点帮助（至少服务端是可以的，客户端用了很多过分省事儿的方法，不太好）。</p>
<p>但是，但是。</p>
<p>这里预告一下，之后会用 Go 把我之前的毕业设计重新开发一次，并以开源服务的形式共享给大家。相信对于喜欢做笔记的同学来说，是一个非常好用的工具。<a href="https://github.com/wdxtub/wkk/wiki" target="_blank" rel="external">这里</a>是项目简介。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/wdxtub/watch-plane-together-ios" target="_blank" rel="external">项目代码</a></li>
<li><a href="https://github.com/wdxtub/wkk/wiki" target="_blank" rel="external">下一个要开发的项目 Wdxtub’s Knowledge Kit</a></li>
<li><a href="http://blog.csdn.net/mylizh/article/details/44838065" target="_blank" rel="external">iOS定位服务系列之一：获取当前位置信息</a></li>
<li><a href="http://www.sollyu.com/objective-c-synchronization-requests-requests-for-asynchronous-requests-get-and-post-requests/" target="_blank" rel="external">Objective-C 之同步请求、异步请求、GET请求、POST请求</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面我们搭建好了后台（虽然实际开发中我是客户端后台一起写的），这次来看看如何做一个配套的客户端（虽然从各种角度看都非常『简约』），小归小，还是有一点意思的。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Go" scheme="http://wdxtub.com/tags/Go/"/>
    
      <category term="项目" scheme="http://wdxtub.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="飞机" scheme="http://wdxtub.com/tags/%E9%A3%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【Go 之旅】IV 项目实战：一起看飞机 - 后台</title>
    <link href="http://wdxtub.com/2016/08/24/go-plane-2/"/>
    <id>http://wdxtub.com/2016/08/24/go-plane-2/</id>
    <published>2016-08-24T14:57:38.000Z</published>
    <updated>2016-08-31T14:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面已经了解了『一起看飞机』的基本需求，这次我们来搭建一个完整的基于 beego 框架的后台。同时也会涉及调试测试部署等一系列配套工作，我觉得这些反而是工作中很重要的能力，但不知道为啥大部分书都略过了。</p>
<a id="more"></a>
<hr>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>按照 <a href="http://beego.me/docs/install" target="_blank" rel="external">beego 的安装</a> 和 <a href="http://beego.me/docs/install/bee.md" target="_blank" rel="external">bee 工具简介</a> 中的介绍把 <code>beego</code> 和 <code>bee</code> 都安装好，然后在 <code>$GOPATH</code> 中我们能看到 <code>bin</code>, <code>pkg</code>, <code>src</code> 三个文件夹，进入 <code>src</code> 文件夹，之后的项目代码都会在这里。接着用以下命令来创建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dawang @ dawang in ~/Documents/GO/src [16-08-24 14:36:44] C:2</span></div><div class="line">$ bee new watch-plane-together</div><div class="line">[INFO] Creating application...</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/conf/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/controllers/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/models/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/routers/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/tests/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/static/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/static/js/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/static/css/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/static/img/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/views/</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/conf/app.conf</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/controllers/default.go</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/views/index.tpl</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/routers/router.go</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/tests/default_test.go</div><div class="line">/Users/dawang/Documents/GO/src/watch-plane-together/main.go</div><div class="line">2016/08/24 14:36:51 [SUCC] New application successfully created!</div></pre></td></tr></table></figure>
<p>进入 <code>watch-plane-together</code> 文件夹，然后先跑起来试试看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dawang @ dawang in ~/Documents/GO/src/watch-plane-together on git:master x [16-08-24 15:56:09] C:130</span></div><div class="line">$ bee run</div><div class="line">bee   :1.4.1</div><div class="line">beego :1.6.1</div><div class="line">Go    :go version go1.7 darwin/amd64</div><div class="line"></div><div class="line">2016/08/24 15:56:11 [INFO] Uses <span class="string">'watch-plane-together'</span> as <span class="string">'appname'</span></div><div class="line">2016/08/24 15:56:11 [INFO] Initializing watcher...</div><div class="line">2016/08/24 15:56:11 [TRAC] Directory(/Users/dawang/Documents/GO/src/watch-plane-together/controllers)</div><div class="line">2016/08/24 15:56:11 [TRAC] Directory(/Users/dawang/Documents/GO/src/watch-plane-together)</div><div class="line">2016/08/24 15:56:11 [TRAC] Directory(/Users/dawang/Documents/GO/src/watch-plane-together/routers)</div><div class="line">2016/08/24 15:56:11 [TRAC] Directory(/Users/dawang/Documents/GO/src/watch-plane-together/tests)</div><div class="line">2016/08/24 15:56:11 [INFO] Start building...</div><div class="line">2016/08/24 15:56:13 [SUCC] Build was successful</div><div class="line">2016/08/24 15:56:13 [INFO] Restarting watch-plane-together ...</div><div class="line">2016/08/24 15:56:13 [INFO] ./watch-plane-together is running...</div><div class="line">2016/08/24 15:56:13 [asm_amd64.s:2086][I] http server Running on :8080</div></pre></td></tr></table></figure>
<p>一切正常的话，访问 <code>localhost:8080</code> 就可以见到：</p>
<p><img src="/images/14720513974639.jpg" alt=""></p>
<p>到底发生了什么？结合具体的目录结构，我们来看看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dawang @ dawang in ~/Documents/GO/src/watch-plane-together on git:master x [16-08-24 16:02:16]</span></div><div class="line">$ tree ./</div><div class="line">./</div><div class="line">├── README.md</div><div class="line">├── conf</div><div class="line">│   └── app.conf</div><div class="line">├── controllers</div><div class="line">│   └── default.go</div><div class="line">├── main.go</div><div class="line">├── models</div><div class="line">├── routers</div><div class="line">│   └── router.go</div><div class="line">├── static</div><div class="line">│   ├── css</div><div class="line">│   ├── favicon.ico</div><div class="line">│   ├── img</div><div class="line">│   └── js</div><div class="line">├── tests</div><div class="line">│   └── default_test.go</div><div class="line">├── views</div><div class="line">│   └── index.tpl</div><div class="line">└── watch-plane-together</div><div class="line"></div><div class="line">10 directories, 9 files</div></pre></td></tr></table></figure>
<p>我们运行 <code>bee run</code> 之后，程序从 <code>main.go</code> 中开始执行，具体做的工作是把 <code>routers</code> 文件夹中的对应路由规则与具体的控制器进行绑定，比方说 <code>routers/router.go</code> 中有一句为 </p>
<p><code>beego.Router(&quot;/&quot;, &amp;controllers.MainController{})</code></p>
<p>然后对应于 <code>controllers/default.go</code> 中的</p>
<figure class="highlight go"><table><tr><td class="code"><pre><div class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</div><div class="line">	beego.Controller</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span> <span class="title">Get</span><span class="params">()</span></span> &#123;</div><div class="line">	c.Data[<span class="string">"Website"</span>] = <span class="string">"wdxtub.com"</span></div><div class="line">	c.Data[<span class="string">"Email"</span>] = <span class="string">"dacrocodilee@gmail.com"</span></div><div class="line">	c.TplName = <span class="string">"index.tpl"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我们给 MainController 添加了 Get() 方法，用于处理基本的 get 请求。而在具体的模板中，使用两个大括号加点号（这里直接输入会导致 hexo 解析异常，所以就用文字描述了）进行引用。</p>
<p>最后，我们可以在 <code>conf/app.conf</code> 中添加一行 <code>EnableAdmin = true</code>，我们就可以在 <code>localhost:8088</code> 中见到一个监控页面，像这样：</p>
<p><img src="/images/14720514130726.jpg" alt=""></p>
<p>基本的套路就是这么简单！然后我们来简单设计下 API，方便之后的开发。</p>
<h2 id="API-规划"><a href="#API-规划" class="headerlink" title="API 规划"></a>API 规划</h2><p>服务 API 的设计其实不算特别难，类似于起函数名。不过随着项目的不断开发，随意的命名会导致项目复杂度指数爆炸。所以我们要采用更为现代化的套路 - RESTful API。</p>
<h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>在我看来 RESTful API 和成语差不多，通过一定的规约和沉淀，把互联网连接的低语境拔高的高语境，所谓高语境的意思是大家已经了解一组通用的条件和原则，在此基础上沟通可以极大降低沟通成本。</p>
<p>先来看几个基本概念：</p>
<ul>
<li>资源(Resources)：我们平常上网访问的一张图片、一个文档、一个视频等。这些资源我们通过URI来定位，也就是一个URI表示一个资源</li>
<li>表现(Representation)：资源是做一个具体的实体信息，他可以有多种的展现方式。而把实体展现出来就是表现层，例如一个 txt 文本信息，他可以输出成 html、json、xml 等格式，一个图片他可以 jpg、png 等方式展现，这个就是表现层的意思。 URI 确定一个资源，而在 HTTP 请求的头信息中用 Accept 和 Content-Type 字段指定，这两个字段才是对”表现层”的描述</li>
<li>状态转化(State Transfer)：访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，肯定涉及到数据和状态的变化。而 HTTP 协议是无状态的，那么这些状态肯定保存在服务器端，所以如果客户端想要通知服务器端改变数据和状态的变化，肯定要通过某种方式来通知它。客户端能通知服务器端的手段，只能是 HTTP 协议。具体来说，就是 HTTP 协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET 用来获取资源，POST 用来新建资源（也可以用于更新资源），PUT 用来更新资源，DELETE 用来删除资源。</li>
</ul>
<p>简单点来说，RESTful 的核心思想类似于面向对象，把原先的过程导向转变为资源导向，然后围绕着资源做文章。</p>
<p>这里需要保证请求是无状态的，有以下几个好处：</p>
<ul>
<li>客户端可以缓存数据来改进性能</li>
<li>在接口层帮助系统分层解耦，限制复杂度，底层可以更加独立</li>
<li>易于扩展，没有机器间关联</li>
</ul>
<p><img src="/images/14720514271343.jpg" alt=""></p>
<h3 id="API-总览"><a href="#API-总览" class="headerlink" title="API 总览"></a>API 总览</h3><p>根据 RESTful 的风格，接口中不应该出现动词，而利用 GET/PUT/POST/DELETE 来进行具体的动作，对应到『一起看飞机』这个项目，API 总览：</p>
<ul>
<li><code>/api/position</code> 客户端每隔一段调用一次该接口<ul>
<li><code>POST</code> 上传当前位置到服务器（状态变为上线）</li>
<li><code>DELETE</code> 结束上传位置（状态变为下线，或通过超时判断）</li>
</ul>
</li>
<li><code>/api/weather</code><ul>
<li><code>GET</code> 获取用户附近的天气状况</li>
</ul>
</li>
<li><code>/api/flight</code><ul>
<li><code>GET</code> 获取用户附近的航班情况</li>
</ul>
</li>
<li><code>/api/near</code><ul>
<li><code>GET</code> 获取用户附近的人</li>
</ul>
</li>
</ul>
<p>调试用接口</p>
<ul>
<li><code>/debug/position</code><ul>
<li><code>POST</code> 获取指定用户的当前位置</li>
</ul>
</li>
<li><code>/debug/weather</code><ul>
<li><code>GET</code> 获取指定位置附近的天气状况</li>
</ul>
</li>
<li><code>/debug/flight</code><ul>
<li><code>GET</code> 获取指定位置附近的航班</li>
</ul>
</li>
<li><code>/debug/near</code><ul>
<li><code>POST</code> 获取用户或指定位置附近的人</li>
</ul>
</li>
<li><code>/debug/upload</code><ul>
<li><code>POST</code> 测试 json 数据上传</li>
</ul>
</li>
</ul>
<p>这里因为时间关系，只用非常简单粗暴的方式实现了 debug 接口。所有的数据处理都在 controller 层完成，并未涉及任何 model（暂时还不需要）</p>
<h3 id="Debug-接口"><a href="#Debug-接口" class="headerlink" title="Debug 接口"></a>Debug 接口</h3><p>坐标采用 WGS84 标准，不同的标准有很多，<a href="http://blog.csdn.net/ma969070578/article/details/41013547" target="_blank" rel="external">参考来源</a>：</p>
<ul>
<li>WGS84 坐标系：即地球坐标系，国际上通用的坐标系。设备一般包含GPS芯片或者北斗芯片获取的经纬度为 WGS84 地理坐标系, 谷歌地图采用的是 WGS84 地理坐标系（中国范围除外）</li>
<li>GCJ02 坐标系：即火星坐标系，是由中国国家测绘局制订的地理信息系统的坐标系统。由 WGS84 坐标系经加密后的坐标系。谷歌中国地图和搜搜中国地图采用的是 GCJ02 地理坐标系</li>
<li>BD09坐标系：即百度坐标系，GCJ02 坐标系经加密后的坐标系; 搜狗坐标系、图吧坐标系等，估计也是在 GCJ02 基础上加密而成的</li>
</ul>
<p>另一个坐标转换的<a href="https://github.com/wandergis/coordtransform" target="_blank" rel="external">项目</a></p>
<p>这里因为时间关系，只用非常简单粗暴的方式实现了 debug 接口。所有的数据处理都在 controller 层完成，并未涉及任何 model（暂时还不需要）</p>
<p>Debug 接口主要用于内部测试，对于参数的传递要求比较灵活，主要是基于地理位置进行测试，输入除 position 外都是经纬度坐标</p>
<ul>
<li><code>/debug</code> (GET) 连接测试函数</li>
<li><code>/debug/position</code> (POST) 获取指定用户的当前位置</li>
<li><code>/debug/weather</code> (GET) 获取指定位置附近的天气状况</li>
<li><code>/debug/flight</code> (GET) 获取指定位置附近的航班</li>
<li><code>/debug/near</code> (POST) 获取指定位置附近的航班</li>
<li><code>/debug/upload</code> (POST) 测试复杂数据上传</li>
</ul>
<h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p>设计数据库之前，我们先要做一些准备工作：</p>
<ul>
<li>安装 Go 的数据库驱动 <code>go get github.com/go-sql-driver/mysql</code></li>
<li>连接到测试用数据库 <code>mysql -h[host ip] -P[host port] -u[user name] -p[password]</code></li>
<li>查看已有的数据库 <code>show databases;</code></li>
<li>新建数据库 <code>create database wptdb</code></li>
<li>使用该数据库 <code>use wptdb</code></li>
<li>清空某表 <code>truncate table history</code></li>
</ul>
<p>因为我们需要记录在线的人，所以得要一个表，叫做 <code>current</code>；另外我们需要记录历史纪录，所以需要另外一个表，叫做 <code>history</code>，这两个表的差别在于其中一个会对数据进行修改和删除，另一个则不会。</p>
<p>因为功能不同，这两个表的设计也不尽相同（主要是主键的选择）。<code>current</code> 表需要经常更新，<code>history</code> 表更多是记录轨迹和时间。</p>
<p>Current 表的初步设计，这里在基本信息中加入了一个 <code>region</code> 字段，用来标识所在分区，这样在检索的时候可以极大提高效率。为什么要用 BIGINT 这里说一下。经度范围 0-360，维度为 0-180，如果精确到 0.001 的话，就是<br><code>36000*18000=648,000,000</code>，加上为高度预留的 3 位，就是 12 位，是超过 INT 所能表示的大小的。时间戳为 UNIX 时间</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`current`</span> (</div><div class="line">    <span class="string">`uid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`latitude`</span> <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`longitude`</span> <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`altitude`</span> <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`timestamp`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`region`</span> <span class="built_in">BIGINT</span>(<span class="number">12</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`online`</span> TINYINT <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`uid`</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<p>History 表的初步设计主要是保证每条数据的唯一性（也就是主键），以及同一个 id 的数据要尽可能放在一起方便检索。这里的 <code>actionid</code> 是由 <code>uid</code> 和 <code>timestamp</code> 拼接而成的。而 <code>location</code> 是由 经纬度和高度拼接而成的。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`history`</span>(</div><div class="line">    <span class="string">`actionid`</span> <span class="built_in">CHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`location`</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    <span class="string">`timestamp`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="string">`actionid`</span>)</div><div class="line">);</div></pre></td></tr></table></figure>
<h2 id="框架搭建"><a href="#框架搭建" class="headerlink" title="框架搭建"></a>框架搭建</h2><p>借助 beego，对于框架部分我们需要做的不多，主要就是配置好路由和对应的 Controller，具体可以参见代码。简单来说，就是新建一个 <code>struct</code> 包含 <code>beego.Controller</code>，然后对应写函数，并在路由中注册，比如：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><div class="line"><span class="comment">// router.go</span></div><div class="line"><span class="keyword">package</span> routers</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"watch-plane-together/controllers"</span></div><div class="line">	<span class="string">"github.com/astaxie/beego"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</div><div class="line">    beego.Router(<span class="string">"/"</span>, &amp;controllers.MainController&#123;&#125;)</div><div class="line">    beego.Router(<span class="string">"/debug/"</span>, &amp;controllers.DebugController&#123;&#125;)</div><div class="line">    beego.Router(<span class="string">"/debug/position"</span>, &amp;controllers.DebugController&#123;&#125;, <span class="string">"post:DebugPosition"</span>)</div><div class="line">    beego.Router(<span class="string">"/debug/weather"</span>, &amp;controllers.DebugController&#123;&#125;, <span class="string">"get:DebugWeather"</span>)</div><div class="line">    beego.Router(<span class="string">"/debug/flight"</span>, &amp;controllers.DebugController&#123;&#125;, <span class="string">"get:DebugFlight"</span>)</div><div class="line">    beego.Router(<span class="string">"/debug/near"</span>, &amp;controllers.DebugController&#123;&#125;, <span class="string">"post:DebugNear"</span>)</div><div class="line">    beego.Router(<span class="string">"/debug/upload"</span>, &amp;controllers.DebugController&#123;&#125;, <span class="string">"post:DebugUpload"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们只需要在 <code>debug.go</code> 中对应编写 <code>DebugPosition</code>, <code>DebugWeather</code>, <code>DebugFlight</code> 和 <code>DebugUpload</code> 方法即可。这里需要注意，附近的人具体的算法没有实现，会在之后专门介绍。</p>
<h2 id="测试部署"><a href="#测试部署" class="headerlink" title="测试部署"></a>测试部署</h2><p>接口测试可以使用 Chrome 插件 Postman，部署的话，因为 Go 直接静态编译，扔到服务器上运行即可，或者参考<a href="http://beego.me/docs/deploy/" target="_blank" rel="external">这里</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为 beego 的缘故，其实只需要不到 200 行代码就可以完成基本的 demo 后台搭建，后面的 mvc 封装等等可以随着项目进行具体调整，作为一个简单的展示大约是足够的，进一步的学习就需要多多阅读源码，真正用 Go 的思路来写代码了。 </p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/wdxtub/Watch-Plane-Together/tree/master" target="_blank" rel="external">项目源代码</a></li>
<li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/08.3.html" target="_blank" rel="external">8.3 REST</a></li>
<li><a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="external">go-sql-driver/mysql</a></li>
<li><a href="http://www.cnblogs.com/good_hans/archive/2010/03/29/1700046.html" target="_blank" rel="external">Mysql 远程登录及常用命令</a></li>
<li><a href="http://blog.csdn.net/hanxuemin12345/article/details/7818662" target="_blank" rel="external">数据库中删除语句Drop、Delete、Truncate的相同点和不同点的比较（举例说明）</a></li>
<li><a href="http://blog.csdn.net/pandajava/article/details/45667001" target="_blank" rel="external">MySQL 插入条件判断</a></li>
<li><a href="http://blog.rpplusplus.me/blog/2014/03/18/yahoo-weather-api/" target="_blank" rel="external">Yahoo Weather API</a></li>
<li><a href="https://github.com/bitly/go-simplejson" target="_blank" rel="external">bitly/go-simplejson</a></li>
<li><a href="https://developer.yahoo.com/weather/archive.html" target="_blank" rel="external">Yahoo! Weather RSS Feed</a></li>
<li><a href="https://developer.yahoo.com/yql/console/" target="_blank" rel="external">Yahoo YQL Console</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面已经了解了『一起看飞机』的基本需求，这次我们来搭建一个完整的基于 beego 框架的后台。同时也会涉及调试测试部署等一系列配套工作，我觉得这些反而是工作中很重要的能力，但不知道为啥大部分书都略过了。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Go" scheme="http://wdxtub.com/tags/Go/"/>
    
      <category term="项目" scheme="http://wdxtub.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="飞机" scheme="http://wdxtub.com/tags/%E9%A3%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>【Go 之旅】III 项目实战：一起看飞机 - 项目介绍</title>
    <link href="http://wdxtub.com/2016/08/24/go-plane-1/"/>
    <id>http://wdxtub.com/2016/08/24/go-plane-1/</id>
    <published>2016-08-24T14:57:34.000Z</published>
    <updated>2016-08-24T15:06:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过之前的两篇文章，应该已经对 Go 有了一定的了解，不过想要真正掌握，还是得做项目，这里我结合工作的内容，设计了『一起看飞机』这么一个无厘头项目，将通过三篇文章来介绍具体的设计和实现。</p>
<a id="more"></a>
<hr>
<p>实话实说，因为我对博客的热爱，本来我是打算做一个博客系统的，简单搜索了一下，已经有几百个轮子了，所以我只好开了这么一个奇怪的脑洞。</p>
<h2 id="总体介绍"><a href="#总体介绍" class="headerlink" title="总体介绍"></a>总体介绍</h2><p>假设有很多飞机的狂热爱好者，假设这些爱好者都喜欢看飞机，假设这些看飞机的爱好者想要一起看飞机，在这么多假设时候，产品经理感觉找到了一个刚需，所以决定开发一个『一起看飞机』的 APP，帮助飞机爱好者凑到一起看飞机。</p>
<p>为了早日上线，产品经理决定第一个版本只需要做很少的功能，甚至都不需要一个图形界面，用文字先凑合就行。我花了五分钟花了一个草图，产品经理表示可以，如下：</p>
<p><img src="/images/14720510281192.jpg" alt=""></p>
<p>只能说，简约不简单！</p>
<h2 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h2><p>好吧，其实简约也简单，具体需要的功能是</p>
<ul>
<li>告知用户附近的人，包括距离和昵称</li>
<li>获取位置告知用户当前的天气、温度、风向</li>
<li>获取用户附近的航线</li>
</ul>
<p>如果不考虑具体展示的话，其实就是维护一个数据库，然后在用户上报位置的时候做一些查询并返回。</p>
<p>虽然看起来很简单，但是也已经足够我们通过这个无厘头项目来了解 Go 了，将会涉及的后台相关技术和原理有：</p>
<ul>
<li>Web 基本工作方式</li>
<li>连接数据库</li>
<li>处理 JSON 格式的文件</li>
<li>Socket 与 WebSocket</li>
<li>RESTful API 的设计和实现</li>
<li>数据的简单加密和解密</li>
<li>错误处理、调试和测试</li>
<li>部署与维护</li>
</ul>
<p>当然我们也会简单涉及一些客户端（Web 和 iOS）的编程，以及创建一些自己用的调试用接口。</p>
<p>接下来的文章中，我会从后台开始搭建起，尽量用简单且清晰的方式把 Web 开发的方方面面展现给大家。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/wdxtub/Watch-Plane-Together/tree/master" target="_blank" rel="external">项目源代码</a></li>
<li><a href="https://astaxie.gitbooks.io/build-web-application-with-golang/content/zh/index.html" target="_blank" rel="external">Go Web 编程</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过之前的两篇文章，应该已经对 Go 有了一定的了解，不过想要真正掌握，还是得做项目，这里我结合工作的内容，设计了『一起看飞机』这么一个无厘头项目，将通过三篇文章来介绍具体的设计和实现。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Go" scheme="http://wdxtub.com/tags/Go/"/>
    
      <category term="项目" scheme="http://wdxtub.com/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="飞机" scheme="http://wdxtub.com/tags/%E9%A3%9E%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Git 指南</title>
    <link href="http://wdxtub.com/2016/08/23/git-guide/"/>
    <id>http://wdxtub.com/2016/08/23/git-guide/</id>
    <published>2016-08-23T14:37:08.000Z</published>
    <updated>2016-08-23T14:39:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然网上 Git 相关指南已经够多了，不过没有自己整理过一次，用得时候还是经常忘，所以这里按照自己的思路来写一篇，跟大家分享一下。</p>
<a id="more"></a>
<hr>
<p>本指南会按照自己工作的经验来进行相关命令的选择，力求贴近实战。慢慢更新中</p>
<h2 id="检出仓库"><a href="#检出仓库" class="headerlink" title="检出仓库"></a>检出仓库</h2><p>一般来说，刚到公司，参与某个项目，第一件事情就是看代码，在开了项目的 Git 权限之后，我们要做的第一步就是把代码克隆到本地，命令为：</p>
<p><code>git clone username@host:/path/to/repository</code></p>
<h2 id="本地仓库结构"><a href="#本地仓库结构" class="headerlink" title="本地仓库结构"></a>本地仓库结构</h2><p>本地仓库由 git 维护的三棵“树”组成。第一个是你的<strong>工作目录</strong>，它持有实际文件；第二个是<strong>暂存区（Index）</strong>，它像个缓存区域，临时保存你的改动；最后是 <strong>HEAD</strong>，它指向你最后一次提交的结果。</p>
<p><img src="/images/14719631395607.jpg" alt=""></p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p>在熟悉了代码之后，组长交给你一个任务。因为是多人共同开发，所以用分支来进行隔离。</p>
<ul>
<li>创建分支 <code>git checkout -b new_branch_name</code></li>
<li>如果主分支经常改动，用 <code>git pull</code> 拉取最新的代码</li>
</ul>
<p>因为我们都是武艺高强的程序员，所以很快就完成了开发和测试，需要提交代码</p>
<ul>
<li>添加文件 <code>git add *</code></li>
<li>提交到 HEAD <code>git commit -m &quot;message&quot;</code></li>
<li>推送改动 <code>git push origin new_branch_name</code></li>
<li>然后可以在 Gitlab 网页中发起合并请求，等组长 review 通过后便可以进行代码合并</li>
<li>删除分支 <code>git branch -d new_branch_name</code></li>
</ul>
<h2 id="意外处理"><a href="#意外处理" class="headerlink" title="意外处理"></a>意外处理</h2><p>如果操作失误，可以使用 <code>git checkout -- filename</code> 来替换最后一次提交的文件。</p>
<p>如果想丢弃本地所有改动并与服务器同步，可以使用 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git reset --hard origin/master</div></pre></td></tr></table></figure>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><ul>
<li><code>git init</code> 用来创建新仓库，不过在公司里一般有内部的 Gitlab，很少需要用到</li>
<li><code>git clone /path/to/repository</code> 克隆本地仓库，一般比较少用到</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">git - 简明指南</a></li>
<li><a href="https://github.com/xirong/my-git/blob/master/git-workflow-tutorial.md" target="_blank" rel="external">Git Workflows and Tutorials</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然网上 Git 相关指南已经够多了，不过没有自己整理过一次，用得时候还是经常忘，所以这里按照自己的思路来写一篇，跟大家分享一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Git" scheme="http://wdxtub.com/tags/Git/"/>
    
      <category term="版本控制" scheme="http://wdxtub.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>跑步与技术债</title>
    <link href="http://wdxtub.com/2016/08/22/running-and-tech-debt/"/>
    <id>http://wdxtub.com/2016/08/22/running-and-tech-debt/</id>
    <published>2016-08-22T13:49:48.000Z</published>
    <updated>2016-08-22T15:39:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>单纯跑步是很快乐的，但是有一个配速，就要努力跑。单纯做技术也是快乐的，但是有一堆技术债，就不只是努力可以搞得定的了。今天我们来聊聊技术债的问题。</p>
<a id="more"></a>
<hr>
<p>关于技术债的文章大多以非常规范的口吻一板一眼在写，读起来有些膈应，所以我决定写一篇接地气的，正好最近把公司里软件相关的项目接触了个遍，在对接的时候还是深深能感受到短平快带来的技术债。一家之言，随便聊聊，以下所有内容都属于梦话，我就这么一写，您就这么一看，关了网页就忘掉吧。</p>
<p>每天我跑步回家总路程大约是 4.3 公里，需要过四个十字路口和一个天桥。四个十字路口有两个在第一公里，第二和第四公里各有一个，而天桥也是在第四公里。</p>
<p>那么问题来了，如果我想要把全程的配速稳定在五分钟以内，具体需要怎么分配时间？</p>
<p>理想情况下当然是匀速，但是因为马路并不是像跑步机这样的恒定的理想环境，就需要处理各种各样的意外情况了。比如：</p>
<ul>
<li>在第一公里因为两个十字路口的原因花了六分钟</li>
<li>在第四公里的天桥处为了节省体力走路上台阶和爬坡</li>
<li>因为没有午休在第三公里后体力迅速枯竭</li>
</ul>
<p>要怎么办？</p>
<p>先说说我的策略</p>
<ul>
<li>第一公里：因为等待十字路口红绿灯的时间不可控也没有办法跳过，所以得尽可能在不受红绿灯制约的路上『要回来一点时间』，包括预估信号灯的变化并据此调整速度（比如说离路口还有一百米，看到是红灯，其实就可以稍微放慢点速度以节省体力）只要能在 5 分 30 秒之内完成，后面就不会太辛苦（后面的平均时间需要 4 分 50 秒以下）</li>
<li>第二公里：只有一个十字路口，后面将是路况较好的路段，所以在十字路口前可以适当保留体力，然后进入较高速的匀速阶段（大约 4 分 30 秒左右）</li>
<li>第三公里：几乎全程无阻碍（除了下班的人群），是为未来保留余量的最佳时机（大约 4 分 30 秒左右）</li>
<li>第四公里：体力需要精打细算，一般来说经过天桥的折磨，后面得依靠呼吸和发力部位来调整（能在 5 分 20 秒左右完成就很好）</li>
</ul>
<p>幸运的是一般来说还是能勉强达标的，可是做技术就没有跑步这么简单粗暴了。</p>
<ul>
<li>老板催得急，要的就是短平快，粗糙就粗糙吧，质量差点没关系</li>
<li>人力不够，不停被打断，很多应完成的计划都处于做了一点但是又没做完的尴尬境地</li>
<li>没有测试，祈祷式编程</li>
<li>没有文档或者文档除了原来的开发团队谁都看不懂，没办法拓展</li>
<li>架构设计随意或者过分依赖框架，最终一大堆代码耦合在一起成了烂摊子谁都不愿意管</li>
<li>重复工作没有自动化，不得不耗费大量时间在零碎小事上</li>
<li>团队沟通不畅，下面的人忙的要死上面的人却感觉大家都很空闲</li>
<li>朝令夕改，各种临时的紧急需求</li>
<li>步调不一，有种无头苍蝇般瞎忙</li>
<li>流程混乱，同一个事情绕来绕去，当然一定要说为了『安全』，只能说从一开始就不信任员工吧</li>
</ul>
<p>就好像第一公里跑了十五分钟，后面跑得再快，也没办法追回来了。但是老板却又觉得肯定是能追回来的，那么结果倒是蛮清晰的，就看哪一天弦绷断了呗。</p>
<p>以上除了跑步部分都是道听途说和胡拼八凑，没有任何一点对号入座的意思。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;单纯跑步是很快乐的，但是有一个配速，就要努力跑。单纯做技术也是快乐的，但是有一堆技术债，就不只是努力可以搞得定的了。今天我们来聊聊技术债的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="跑步" scheme="http://wdxtub.com/tags/%E8%B7%91%E6%AD%A5/"/>
    
      <category term="技术债" scheme="http://wdxtub.com/tags/%E6%8A%80%E6%9C%AF%E5%80%BA/"/>
    
      <category term="人才" scheme="http://wdxtub.com/tags/%E4%BA%BA%E6%89%8D/"/>
    
  </entry>
  
  <entry>
    <title>主流程序员的自我修养</title>
    <link href="http://wdxtub.com/2016/08/21/im-a-programmer-too/"/>
    <id>http://wdxtub.com/2016/08/21/im-a-programmer-too/</id>
    <published>2016-08-21T14:10:16.000Z</published>
    <updated>2016-08-21T15:05:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作也有一段时间了，无论是亲身实践还是观察他人，或多或少能意识到怎么样才是一个『好』的工程师。本文是我的一点思考。</p>
<a id="more"></a>
<hr>
<p>在美国的时候，教授常常跟我说，engineering 和 engineer 在大家看来是特别神圣的词，因为这意味着他们做的事情和他们本身，都是为了解决问题而存在的。而在开源运动风风火火的今天，写代码其实只是工程师应该具备的能力的一小部分。还有很多代码之外的东西，需要去学习和实践。</p>
<p>调试是最基本的技能之一，IDE 是如此强大，搞得很多人以为调试就是设个断点或者输出一下值，但其实并不是这样的，或者说，这不是问题的核心。那么问题的核心是什么？</p>
<p><strong>掌控</strong></p>
<p>通过断点或输出来分离代码确定错误点，然后进行修复。这里一定要弄清楚是因为程序员的无心之失导致的错误，还是因为系统设计的模糊性导致的实现不一致。前者只牵一发，后者要动全身。而对于需要 7x24 运行的服务来说，对于服务质量的掌控，很多时候是通过日志实现的。日志这个是个大话题，通过汇总线上的各类数据，可以确定重点代码进行重点优化，尤其是在计算资源或者带宽资源吃紧的时候，从数据出发才是有的放矢。一般来说需要注意两个地方，一是 IO，二是资源共享。</p>
<p>IO 部分的优化通常是要么是利用缓存，尽量一次多做一点事情，要么是减少数据的传输量，不过这个无形之中增加了设计的复杂度，具体使用的时候需要权衡。资源共享部分涉及某种确定资源使用的机制，比方说锁或者信号量之类的，这部分本身就是很难的，比较好的办法是设计时就尽量隔离，不要过分依赖于资源共享。</p>
<p>另一个增加掌控的方法是写文档，文档可以看作是在时间尺度上的掌控，因为认真写文档的代码，即使过几年再看，也很容易跟上当时的思路，否则就容易迷失在茫茫跳转中。而面对糟糕的代码，文档其实也是很好的重构工具，尤其是在测试紧缺的情况下，通过文字辅助理解可能是最为保险的选择。</p>
<p>关于团队其实是另一个话题，不过说到底原则其实很简单：把自己手头上的事情用心做好，并以此带动同事，成为值得信任的人，才有可能赢得信任。今天看女排赛后采访，听郎平说了两个词『承担』和『包容』，的的确确是成为顶梁柱所必备的素质。</p>
<p>工程师应该把时间花在关键问题上，无聊且机械化的事情，哪怕第一次可能会比较麻烦，必须要交给机器来做。所谓关键问题，就是那些能真正创造价值，或者能让创造价值的过程更好的问题。更重要的是，要让提供资源的人能够意识到解决这些问题的价值。</p>
<p>不过话说回来，掌控也需要一个度，也要容忍一定的黑盒，总不能啥都重新发明一次轮子吧。所谓『掌控』，不是啥都亲力亲为，最后累得死去活来还不一定能达到效果，而是找到关键点，用最少的成本来达到自己想要的效果。</p>
<p>没错，我说的就是《永恒的终结》。观测师和程序员其实挺像的，而我也一定会像小说中那样，愿意为自己珍惜的东西，拼尽一切。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作也有一段时间了，无论是亲身实践还是观察他人，或多或少能意识到怎么样才是一个『好』的工程师。本文是我的一点思考。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="程序员" scheme="http://wdxtub.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="能力" scheme="http://wdxtub.com/tags/%E8%83%BD%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>第十周 - 茶酒伴</title>
    <link href="http://wdxtub.com/2016/08/19/tea-wine-friend/"/>
    <id>http://wdxtub.com/2016/08/19/tea-wine-friend/</id>
    <published>2016-08-19T14:44:32.000Z</published>
    <updated>2016-08-19T16:04:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>青山在，杨柳湾，无人等风来。杏花开，绿水盘，新芽莫摘采。知是一年春又来，冰雪也消散。山路若陡缓步迈，斗酒洒羁绊。</p>
<a id="more"></a>
<hr>
<p>这周平静却暗藏汹涌。周一从广州直接赶回深圳上班，周二到周五跑了四天，终于借着奥运会的东风成绩有所突破。因为台风的缘故，白天总是下雨，所以打着伞穿着拖鞋赶车上班，下班的时候总不能把第二天要用的伞和拖鞋留在公司，所以只好左手拖鞋右手伞往家里跑，路人一定很诧异为啥有个人疯疯癫癫气喘吁吁手里拿着这么奇怪的组合，没想到以这种奇葩的形式不走寻常路。</p>
<p>这两周和另一个老司机一起把公司的数据和日志平台搭建好并正式启用。因为各种历史遗留原因，我们一边填之前别人挖的坑以保证服务质量，一边着手搭建新的更加通用和规范的平台。写文档、设规范流程、重构代码居然能在两周之内搞完，我都被这样的效率震惊了。现在后台的开发和维护已经慢慢走上正轨，总算是有了一个好的地基了。</p>
<p>不过做这些填坑的活简单来说就是没有太多汇报的东西，领导并不会在意代码质量，很多时候他们在意的是能汇报些什么，不同决策之间也没有同步好，总体来说还有成吨地方可以改进。现在慢慢可以理解为什么跨部门合作一定要抄送对方的领导了，不然人家完全不鸟你好嘛。所以这样的后果就是大家都只做可以汇报的工作，于是越来越追求短平快，能用但摇摇欲坠，最终积重难返。</p>
<p>只能说我做事的风格不是这样的，我也不想改变，还是要做真正有价值对得起自己的事情，从我手上交出去的，一定是达到我自己的标准的，而不是简单做完就好，希望能让我看到事情在往好的方面发展的迹象吧。</p>
<p>关于写书，最近有比较大的思路调整（感谢我的编辑及时给我寄来的相关新书），也正式开始正文部分的写作和润色，真的是『鬼知道我经历了什么』。不过目前来看我还是比较满意自己的写作质量的，希望这两三个月能够持续输出，交出一份漂亮的答卷。另外因为自己写了一系列关于 ELK 的文章，（又）有出版社的编辑来约稿，不过因为时间精力能力的原因只能往后排，相信经过更多时间的磨练，写出来的东西会更好吧。这也再次说明了写博客的好处，做的哪怕是微小的工作，也要努力让大家知道，不然就成了小透明了（在公司里我也要想办法展示自己，但绝不要踩在别人头上的那种）。</p>
<p>最后插播两条新闻，一是分别针对国内外的读者部署的两套博客，通过 DNS 解析来定位，应该是极大提高了国内读者的访问体验。二是 Dota2 Ti6 Wings 战队夺冠，真乃『护国神翼』，我们太需要一个这样的故事，专注于本职工作的团队才最有资格获得最高荣誉，而不是那些直播和卖饼的。</p>
<p>这周完美执行了减肥和健身计划（吃了五天沙拉），下周要继续努力。</p>
<p>雨生哀，镜尘满，韶颜虽易改。弃脂彩，肠何断，拂手去青苔。衷心诉了春过半，平生光影短。儿女情长愁摩愁，不如茶相伴。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;青山在，杨柳湾，无人等风来。杏花开，绿水盘，新芽莫摘采。知是一年春又来，冰雪也消散。山路若陡缓步迈，斗酒洒羁绊。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="生活" scheme="http://wdxtub.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Logstash 连接 Kafka 指南</title>
    <link href="http://wdxtub.com/2016/08/18/logstash-kafka-guide/"/>
    <id>http://wdxtub.com/2016/08/18/logstash-kafka-guide/</id>
    <published>2016-08-18T12:00:31.000Z</published>
    <updated>2016-08-18T12:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我对 Logstash 颇有微词，但是与系统自带的 rsyslog 相比还是好用很多的，本文介绍如何快速连接 Logstash 与 Kafka。</p>
<a id="more"></a>
<hr>
<h2 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h2><p>还是之前的场景，我需要把各个业务的线上服务器日志接入到统一的日志处理平台中。具体会用 Kafka 做中间件，所以需要解决的就是如何把日志传到 Kafka。原先的考虑是利用系统自带的 rsyslog，这样我只需要自动配置一下 rsyslog 的处理发送规则就可以了，免去了安装和维护的麻烦。但是系统自带的 rsyslog 版本太低，所以到头来还是要更新维护，那就不如直接用更强大且更好用的 Logstash 了。</p>
<p>需要注意的有两点：</p>
<ul>
<li>不要即时推送日志，以免增加服务器负担</li>
<li>能够妥善处理 logrotate 的情况</li>
</ul>
<p>幸运的是，这 Logstash 都考虑到了，我们只需要简单配置一下即可。</p>
<h2 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h2><p>因为大部分线上服务器跑的是 Ruby，所以需要先安装一下 Java</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo add-apt-repository -y ppa:webupd8team/java</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get -y install oracle-java8-installer</div></pre></td></tr></table></figure>
<h2 id="安装-Logstash"><a href="#安装-Logstash" class="headerlink" title="安装 Logstash"></a>安装 Logstash</h2><p>在 <a href="http://wdxtub.com/2016/07/26/elk-guide/">ELK 指南</a>中介绍了用 <code>apt-get</code> 进行安装的方法，这里介绍如何手动下载安装</p>
<ul>
<li>下载到服务器 <code>wget https://download.elastic.co/logstash/logstash/logstash-all-plugins-2.3.4.tar.gz</code></li>
<li>解压 <code>tar -xvzf logstash-all-plugins-2.3.4.tar.gz</code></li>
<li>进入 Logstash 文件夹并创建配置文件夹（个人习惯） <code>cd logstash-2.3.4; mkdir confs</code></li>
</ul>
<p>之后所有的配置文件均可放在 <code>confs</code> 文件夹中。</p>
<h2 id="配置-Logstash-到-Kafka"><a href="#配置-Logstash-到-Kafka" class="headerlink" title="配置 Logstash 到 Kafka"></a>配置 Logstash 到 Kafka</h2><p>这里 Logstash 相当于 producer</p>
<h3 id="Input-读取文件"><a href="#Input-读取文件" class="headerlink" title="Input 读取文件"></a>Input 读取文件</h3><p>Logstash 使用一个名叫 FileWatch 的 Ruby Gem 库来监听文件变化。这个库支持 glob 展开文件路径，而且会记录一个叫 <code>.sincedb</code> 的数据库文件来跟踪被监听的日志文件的当前读取位置。通过记录下来的 <code>inode</code>, <code>major number</code>, <code>minor number</code> 和 <code>pos</code> 就可以保证不漏过每一条日志。一个可能的配置文件是这样的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">    path =&gt; [&quot;/data/home/service/project/current/log/logstash_production.log&quot;, &quot;/data/home/service/project/current/log/logstash_production.log.1&quot;]</div><div class="line">    codec =&gt; &quot;json&quot;</div><div class="line">    add_field =&gt; &#123; &quot;topic&quot; =&gt; &quot;djiservice&quot;&#125;</div><div class="line">    stat_interval =&gt; 1800</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里说一下 File rotation 的情况，为了处理被 rotate 的情况，最好把 rotate 之后的文件名也加到 path 中（如上面所示），这里注意，如果 <code>start_position</code> 被设为 <code>beginning</code>，被 rotate 的文件因为会被认为是新文件，而重新导入。如果用默认值 <code>end</code>，那么在最后一次读之后到被 rotate 结束前生成的日志不会被采集。</p>
<p>其他一些配置的设定原因</p>
<ul>
<li><code>add_field</code> 添加一个 topic 字段，用作之后导入 elasticsearch 的索引标识</li>
<li><code>stat_interval</code> 单位是秒，这里 30 分钟进行一次检测，不过测试的时候需要去掉这个配置</li>
<li><code>codec</code> 因为已经处理成 logstash 兼容格式，就直接以 json 解析</li>
</ul>
<h3 id="Filter-内容定制"><a href="#Filter-内容定制" class="headerlink" title="Filter 内容定制"></a>Filter 内容定制</h3><p>Filter 主要是对数据进行一些处理，比如说我用的是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">filter &#123;</div><div class="line">  mutate &#123;</div><div class="line">    remove_field =&gt; [&quot;format&quot;]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  geoip &#123;</div><div class="line">    source =&gt; &quot;ip&quot;</div><div class="line">    fields =&gt; [&quot;location&quot;, &quot;city_name&quot;, &quot;country_name&quot;, &quot;country_code2&quot;,&quot;country_code3&quot;, &quot;region_name&quot;, &quot;continent_code&quot;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里做的操作一是移除无效的域，二是把 ip 转换为地理位置，方便后期的处理。</p>
<h3 id="Output-输出到-Kafka"><a href="#Output-输出到-Kafka" class="headerlink" title="Output 输出到 Kafka"></a>Output 输出到 Kafka</h3><p>因为 Logstash 自带 Kafka 插件，直接配置上即可，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">output &#123;</div><div class="line">  kafka &#123;</div><div class="line">    topic_id =&gt; &quot;test&quot;</div><div class="line">    bootstrap_servers =&gt; &quot;kafka_url:port&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是基本的配置及其设定原因</p>
<ul>
<li><code>topic_id</code> 指定 topic 来进行发送</li>
<li><code>bootstrap_servers</code> 这里是 Kafka 的接入地址</li>
</ul>
<p>其他一些需要注意的配置</p>
<ul>
<li><code>acks</code> 可以选的值为 <code>0</code>, <code>1</code>, <code>all</code>，这里解释一下，0 表示不需要 server 返回就认为请求已完成；1 表示需要 leader 返回才认为请求完成；all 表示需要所有的服务器返回才认为请求完成</li>
<li><code>batch_size</code> 单位是字节，如果是发送到同一分区，会攒够这个大小才发送一次请求</li>
<li><code>block_on_buffer_full</code> 这个设置在缓冲区慢了之后阻塞还是直接报错</li>
<li><code>buffer_memory</code> 发送给服务器之前的缓冲区大小，单位是字节</li>
<li><code>client_id</code> 可以在这里设定有意义的名字，就不一定要用 ip 和 端口来区分</li>
<li><code>compression_type</code> 压缩方式，默认是 <code>none</code>，其他可选的是 <code>gzip</code> 和 <code>snappy</code></li>
</ul>
<h2 id="利用-Logstash-从-Kafka-导出数据到-Elasticsearch"><a href="#利用-Logstash-从-Kafka-导出数据到-Elasticsearch" class="headerlink" title="利用 Logstash 从 Kafka 导出数据到 Elasticsearch"></a>利用 Logstash 从 Kafka 导出数据到 Elasticsearch</h2><p>这一步就比较简单了，先从 Kafka 中读取，然后写入到 elasticsearch，这里 Logstash 作为 consumer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">output &#123;</div><div class="line">  input &#123;</div><div class="line">    kafka &#123;</div><div class="line">      zk_connect =&gt; &quot;localhost:2181&quot;</div><div class="line">      topic_id =&gt; &quot;log&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  stdout &#123;</div><div class="line">     codec =&gt; rubydebug</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  elasticsearch &#123;</div><div class="line">    hosts =&gt; [&quot;url:port&quot;]</div><div class="line">    user =&gt; &quot;name&quot;</div><div class="line">    password =&gt; &quot;password&quot;</div><div class="line">    index =&gt; &quot;%&#123;service&#125;-%&#123;+YYYY-MM-dd&#125;&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样可以按照配置的服务名称和日期来切割。</p>
<p>至此，我们完成了从 Logstash 到 Kafka 再到 Elasticsearch 的连接，下一步就可以用 kibana 来展示日志的监控分析结果了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="external">Logstash 下载</a></li>
<li><a href="https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html" target="_blank" rel="external">配置文件格式</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我对 Logstash 颇有微词，但是与系统自带的 rsyslog 相比还是好用很多的，本文介绍如何快速连接 Logstash 与 Kafka。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="日志" scheme="http://wdxtub.com/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="Logstash" scheme="http://wdxtub.com/tags/Logstash/"/>
    
      <category term="Kafka" scheme="http://wdxtub.com/tags/Kafka/"/>
    
  </entry>
  
</feed>
