<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小土刀</title>
  <subtitle>Agony is my triumph</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wdxtub.com/"/>
  <updated>2016-12-20T00:36:08.000Z</updated>
  <id>http://wdxtub.com/</id>
  
  <author>
    <name>wdxtub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【罗曼蒂克消亡史】人在江湖</title>
    <link href="http://wdxtub.com/2016/12/20/the-wasted-times/"/>
    <id>http://wdxtub.com/2016/12/20/the-wasted-times/</id>
    <published>2016-12-19T23:35:24.000Z</published>
    <updated>2016-12-20T00:36:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个人的命运啊，当然要靠个人奋斗，但更多的时候，是被历史的巨浪推着走。或者说，如果连江湖都没有了，那江湖人，也就没有了。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.20: 完成初稿</li>
</ul>
<p>今年的华语电影有两部让我印象非常深刻，一是《驴得水》，二是《罗曼蒂克消亡史》，前者脱胎于话剧，后者则由历史拼装而成。虽然叙事节奏有些不照顾观众，但是仔细想想，也能咂摸出点味道。片子进行到一半我才意识到所谓『消亡』的意义，历史的洪流下，仅存的一丁点美好也会被毫不留情地撕碎。什么罗曼蒂克，什么家国天下，剩下的只有复仇与死亡了。（以下开始剧透）</p>
<p><img src="/images/the-wasted-times.jpg" alt="the-wasted-times"></p>
<p>简单梳理一下故事：</p>
<p>淞沪战役三年前，大老板（倪大红）和小六（章子怡）结婚，但小六本是花蝴蝶怎会为一人停留，所以找陆先生（葛优）帮忙，希望自己能不死。大老板也不是无情的人，只要面子上过得去，也就算了，让小六和情人永远离开上海，就算是找回了面子（毕竟老婆跟人跑了不光彩）。当然，这是计划，具体的执行是陆先生派他妹夫，一个伪装成自己人的日本人，来完成。但是妹夫在押运的途中把司机和情人干掉，最后把小六囚禁在自己的店里，当了三年性奴。</p>
<p>另一条线，沪淞战役前夕，工人学生罢工罢课停水停电，政府绑架了几十个工人，陆先生出面要求释放工人，周先生起初不配合，看到自己情妇的断手，也就知道了陆先生的手段，缴械投降，但最终仍难逃一死。之后不久，陆先生因不愿意日本人合作瓦解中国，日本人于是杀意已决，妹夫作为间谍最终还是决定放过了陆先生，但是家里的其他人大部分都倒在了血泊中。</p>
<p>陆先生在逃到香港后，派仍在上海的小五（钟欣桐）和当年因为王妈（闫妮）引荐成为自己贴身侍卫的车夫（杜淳）去杀掉当年和日本人勾结的老二。小五毕竟不是做这个的，被老二的保镖打死，车夫冷静地完成了对老二的最后一击。</p>
<p>最后一条线，太平洋战争末期，妹夫被俘，陆先生在上海的收容所找到了小六，和她一起来到妹夫被关押的岛上，欲引渡之。起先妹夫不愿意出来（因为知道一出来就是死），但是看到大儿子直接被一枪打死，崩溃，签字，最后被小六杀死。</p>
<p>主线剧情如此，但真正罗曼蒂克消亡的过程，贯穿全片：</p>
<ul>
<li>在老家有相好的小弟，在妓女的石榴裙下彻底沦陷，什么『赚了钱就回家娶她』，不过只是一句话罢了</li>
<li>谈判时，周先生一开始嘴硬，看到断手之后，彻底投降，毕竟罗曼蒂克已没有了对象</li>
<li>吴小姐的丈夫因为一份工作就可以直接『卖』掉妻子，却还是能说出那样自己都不信的告别台词</li>
<li>小六为爱离开，最后却沦为玩具，日复一日中，早已只剩下一具躯壳</li>
</ul>
<p>看着看着不由得有些绝望，就好像我们的理想主义慢慢落地，被现实打磨得越来越光滑。不只是罗曼蒂克，其他的很多东西都在消亡。</p>
<ul>
<li>不喜欢一个地方，就不会喜欢一个地方的菜</li>
<li>很多台词和角色所说的故事其实暗示着剧情的走向</li>
<li>王妈是全片的点睛，很上海，很有一股劲</li>
<li>杀人诛心的确是最高境界</li>
<li>妹夫把日本人骨子里的东西演出来了，隐忍和精致可以在瞬间变成狂暴与绝望，简直可怕</li>
<li>陆先生被自己绑架了，他得照顾好太多人，但是他也愿意去承担这份责任，并且完成得很好，大气、谨慎、公平，能放下过去</li>
</ul>
<p>故事很精彩，只是还有很多细节没有来得及抓住，应该会找机会再看一次的吧。</p>
<p>『我有时候会想到你，你应该是在北方。』</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个人的命运啊，当然要靠个人奋斗，但更多的时候，是被历史的巨浪推着走。或者说，如果连江湖都没有了，那江湖人，也就没有了。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="命运" scheme="http://wdxtub.com/tags/%E5%91%BD%E8%BF%90/"/>
    
      <category term="剧情" scheme="http://wdxtub.com/tags/%E5%89%A7%E6%83%85/"/>
    
  </entry>
  
  <entry>
    <title>第二十七周 - 匆匆</title>
    <link href="http://wdxtub.com/2016/12/16/in-a-haste/"/>
    <id>http://wdxtub.com/2016/12/16/in-a-haste/</id>
    <published>2016-12-16T11:18:18.000Z</published>
    <updated>2016-12-19T15:13:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>那些褪色的青春梦，普通得不能再普通。不敢想过得舒服，也愿意吃苦。</p>
<a id="more"></a>
<hr>
<p>天气转冷，十二月的深圳终于勉强有了点冬天的样子。在朋友圈早已经历过的数次匹兹堡的大雪，不由得感叹时间匆匆，原来都过了一年了，原来才过了一年呀。年底当然少不了总结，工作之余整理出来了 2016 年的 12 个关键词（往年可以参见 <a href="http://wdxtub.com/2015/12/31/12-keywords-2015/">2015 的 12 个关键词</a> | <a href="http://wdxtub.com/2014/12/19/12-keywords-2014/">2014 的 12 个关键词</a> | <a href="http://wdxtub.com/2013/12/22/12-keywords-2013/">2013 的 12 个关键词</a>），和往年一样，又是天翻地覆的一年，2016 年的我逐渐消散，凝结成 2017 年的我。</p>
<p>和我一起进化的还有我的博客，Beta 版发布之后又进行了系统的规整和梳理，主题更加集中，对于版面的利用率也更高了。毕竟工作之余的精力是有限的，还是要把力量汇聚一点，突破自己想象中的藩篱。</p>
<p>上个周末帮同事搬家，历尽千辛万苦，两天之后总算是安定了下来，现在通过中介找房子已经比几年前轻松透明得多，不过我对房子的要求其实不高，只是想要有舒服的凳子和任我平铺的大桌子，这样学习和写作的时候就幸福感爆棚了，至于吃和睡，我其实不是特别在意。就好像小说里的绝顶剑客一样，他们在意的只有剑和剑法，不需要什么『黄金圣衣』来彰显自己。</p>
<p>除了搬家，还去深圳湾飞了一下无人机，虽然在公司里早已司空见惯，但是真正飞起来的瞬间，感觉每个细胞的想象力都被激发了，那种不受任何束缚（当然唯一的束缚是电量）自由看世界的感觉，真正让我意识到我们凭借着热爱与投入，能做出多么极致的产品。这么一想，加班就加班吧，更何况能跟整个行业的开拓者交流讨论，本身就是最大的回报了。</p>
<p><img src="/images/sky.jpg" alt="sky"></p>
<p>这周一直在思考的是『黑客』和『专业』这两个词，由此衍生出来的世界观和方法论是一套完整自洽的体系，而这个体系能在各种经典书籍中看到，能在各种传说中的大神身上看到。比方说《计算机程序的构造和解释》开头的一段话：</p>
<blockquote>
<p>最重要的是，我希望我们不要变成传道士，不要认为你是兜售圣经的人，世界上这种人已经太多了。你所知道的有关计算的东西，其他人也都能学到。绝不要认为似乎成功计算的钥匙就掌握在你的手里。你所掌握的，也是我认为并希望的，也就是智慧：那种看到这一机器比你第一次站在它面前时能做得更多的能力，这样你才能将它向前推进。</p>
</blockquote>
<p>牛人们追逐的是热情、思维、智慧和投入，通过阅读经典，我学会了认识并欣赏美，学会了去敬畏和学习这个世界。不由得想起《DOOM 启世录》中卡马克禅宗般的编程修行，敲着敲着键盘，我忽然意识到禅并不是某种需要去学习的东西，而是一种自律开源的生活方式，就像那句『我们从地板上睡过，我们从河流中淌过』一样。</p>
<p><img src="/images/desk.jpg" alt="desk"></p>
<p>当我把时间的齿轮拨回今年五月的时候，才意识到，我可能再也没有机会在客厅了搭帐篷，在摊开的睡袋上进入梦乡了。那时候的我虽然只存在于记忆中，但是我也许很难忘记，翻天覆地的第一页，是在帐篷旁用纸箱子搭起来的桌子翻开的。</p>
<p>明白了现实里，没有人是孙悟空，与其等往后有了别的贪图，不如现在先找条路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;那些褪色的青春梦，普通得不能再普通。不敢想过得舒服，也愿意吃苦。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【计算机程序的构造和解释】读书笔记</title>
    <link href="http://wdxtub.com/2016/12/15/sicp-clip/"/>
    <id>http://wdxtub.com/2016/12/15/sicp-clip/</id>
    <published>2016-12-15T15:50:07.000Z</published>
    <updated>2016-12-16T12:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>你所掌握的，也是我认为并希望的，也就是智慧：那种看到这一机器比你第一次站在它面前时能做得更多的能力，这样你才能将它向前推进。</p>
<a id="more"></a>
<hr>
<p>我认为，在计算机科学中保持计算中的趣味性是特别重要的事情。这一学科在起步时饱含着趣味性。当然，那些付钱的客户们时常觉得受了骗。一段时间之后，我们开始严肃地看待他们的抱怨。我们开始感受到，自己真的像是要负起成功地、无差错地、完美地使用这些机器的责任。我不认为我们可以做到这些。我认为我们的责任是去拓展这一领域，将其发展到新的方向，并在自己的家里保持趣味性。我希望计算机科学的领域绝不要丧失其趣味意识。最重要的是，我希望我们不要变成传道士，不要认为你是兜售圣经的人，世界上这种人已经太多了。你所知道的有关计算的东西，其他人也都能学到。绝不要认为似乎成功计算的钥匙就掌握在你的手里。你所掌握的，也是我认为并希望的，也就是智慧：那种看到这一机器比你第一次站在它面前时能做得更多的能力，这样你才能将它向前推进。 - Alan J. Perils</p>
<h2 id="序"><a href="#序" class="headerlink" title="序"></a>序</h2><p>解决大规模问题需要经过一系列规划，其中的大部分东西只有在工作进程中才能做出来，这些规划中充满着与手头问题的特殊性相关的情况。</p>
<p>程序员们必须同时追求具体部分的完美和汇合的适宜性。</p>
<p>本书要讨论的各种问题都牵涉到三类需要关注的对象：人的大脑、计算机程序的集合以及计算机本身。每一个计算机程序都是现实中的或者精神中的某个过程的一个模型，通过人的头脑孵化出来。这些过程出现在人们的经验或者思维之中，数量上数不胜数，详情琐碎繁杂，任何时候人们都只能部分理解它们。</p>
<p>计算机程序设计领域之令人兴奋的源泉，就在于它所引起连绵不绝的发现，在我们的头脑之中，在由程序所表达的计算机制之中，以及在由此所导致的认识爆炸之中。如果说艺术解释了我们的梦想，那么计算机就是以程序的名义执行着它们。</p>
<p>在我们写出的程序里，有些程序执行了某个精确的数学函数（但是绝不够精确），例如排序，或者找出一系列数中的最大元。我们将这种程序称为算法，关于它们的最佳行为已经有了许多认识，特别是关于两个重要的参数：执行的时间和对数据存储的需求。程序员应该追求好的算法核惯用法。即使某些程序难以精确地描述，程序员也有责任去估计它们的性能，并要继续设法去改进之。</p>
<p>我们希望建立起一种看法：一个计算机语言并不仅仅是让计算机去执行操作的一种方式，更重要的，它是一种表述有关方法学的思想的新颖的形式化媒介。因此，程序必须写得能够供人们阅读，偶尔地去供计算机执行。其次，我们相信，在这一层次的课程里，最基本的材料并不是特定程序设计语言的语法，不是有效计算某种功能的巧妙算法，也不是算法的数学分析或者计算的本质基础，而是一些能够用于控制大型软件系统的智力复杂性的技术。</p>
<p>这些技能并不仅仅适用于计算机程序设计。我们所教授和提炼出来的这些技术，对于所有的工程设计都是通用的。我们在适当的时候隐藏起一些细节，通过创建抽象去控制复杂性。我们通过建立约定的界面，以便能以一种『混合与匹配』的方式组合起一些标准的、已经很好理解的片段，去控制复杂性。我们通过建立一些新的语言去描述各种设计，每种语言强调设计中的一个特定方面并降低其他方面的重要性，以控制复杂性。</p>
<p>『计算机科学』并不是一种科学，而且其重要性也与计算机本身并无太大关系。计算机革命是有关我们如何去思考的方式，以及我们如何去表达自己的思考的一个革命。在这个变化里最基本的东西，就是出现了这样一种或许最好是称为<strong>过程性认识论</strong>的现象——这就是如何从一种命令式的观点去研究知识的结构，这一观点是与经典数学领域中所采用的更具说明性的观点完全不同的。数学为精确处理『是什么』提供了一种框架，而计算则为精确处理『怎样做』的概念提供了一种框架。</p>
<h2 id="构造过程抽象"><a href="#构造过程抽象" class="headerlink" title="构造过程抽象"></a>构造过程抽象</h2><blockquote>
<p>心智的活动，除了尽力产生各种简单的认识之外，主要表现在如下三个方面：1）将若干简单认识组合为一个复合认识，由此产生出各种复杂的认识。2）将两个认识放在一起对照，不管它们如何简单或者复杂，在这样做时并不将它们合而为一。由此得到有关它们的相互关系的认识。3）将有关认识与那些在实际中核它们同在的所有其他认识隔离开，这就是抽象，所有具有普遍性的认识都是这样得到的。 - John Locke, 有关人类理解的随笔 1690</p>
</blockquote>
<p>我们准备学习的是有关<strong>计算过程</strong>的知识。计算过程是存在于计算机里的一类抽象事物，在其演化过程中，这些过程会去操作一些被称为<strong>数据</strong>的抽象事物。人们创建出一些称为<strong>程序</strong>的规则模式，以指导这类过程的进行。</p>
<h3 id="程序设计的基本元素"><a href="#程序设计的基本元素" class="headerlink" title="程序设计的基本元素"></a>程序设计的基本元素</h3><p>一个强有力的程序设计预研，不仅是一种指挥计算机执行任务的方式，它还应该成为一种框架，使我们能够在其中组织自己有关计算过程的思想。每一种强有力的语言都为此提供了三种机制：</p>
<ul>
<li><strong>基本表达形式</strong>，用于表示语言所关心的最简单的隔离</li>
<li><strong>组合的方法</strong>，通过它们可以从较简单的东西出发构造出复合的元素</li>
<li><strong>抽象的方法</strong>，通过它们可以为复合对象命名，并将它们当做单元去操作</li>
</ul>
<p>在程序设计中，我们需要处理两类要素：过程和数据。非形式地说，数据是一种我们希望去操作的『东西』，而过程就是有关操作这些数据的规则的描述。这样，任何强有力的程序设计语言都必须能够表述基本的数据和基本的过程，还需要提供对过程和数据进行组合和抽象的方法。</p>
<p>程序设计语言中一个必不可少的方面，就是它需要提供一种通过名字去使用计算对象的方式。我们将名字标识符称为<strong>变量</strong>，它的<strong>值</strong>也就是它所对应的那个对象。</p>
<p>实际上，狗仔一个复杂的程序，也就是为了去一步步地创建出越来越复杂的计算性对象。解释器使这种逐步的程序构造过程变得非常方便，因为我们可以通过一系列交互式动作，逐步创建起所需要的名字-对象关联。这种特征鼓励人们采用递增的方式去开发和调试程序。在很大程度上，这一情况也出于另一个事实，那就是，一个 Lisp 程序通常总是由一大批相对简单的过程组成的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你所掌握的，也是我认为并希望的，也就是智慧：那种看到这一机器比你第一次站在它面前时能做得更多的能力，这样你才能将它向前推进。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://wdxtub.com/categories/Reading/"/>
    
    
      <category term="经典" scheme="http://wdxtub.com/tags/%E7%BB%8F%E5%85%B8/"/>
    
      <category term="SICP" scheme="http://wdxtub.com/tags/SICP/"/>
    
  </entry>
  
  <entry>
    <title>【通天塔之团队建设】零 好队友指南</title>
    <link href="http://wdxtub.com/2016/12/12/babel-team-good-member-guide/"/>
    <id>http://wdxtub.com/2016/12/12/babel-team-good-member-guide/</id>
    <published>2016-12-11T23:42:29.000Z</published>
    <updated>2016-12-13T14:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果说团队建设是盖大楼，那么每个队员就是那一根根顶梁柱，怎么样才能成为同事眼中的好队友和上司眼中的一员虎将呢？本文是我的一些思考。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.12: 完成初稿</li>
</ul>
<p>想要成为一个好队友，最重要的标准只有一个，就是要成为『专业人士』。如果一个团队里每个人都以高度的专业精神要求自己，想都不用想，战斗力一定强。那么问题来了，什么是『专业人士』呢：</p>
<ul>
<li>专业人士会严肃对待自己的责任和事业，愿意作出艰难的选择去做自己认为是正确的事情 —— 往往还要自己承担代价</li>
<li>专业人士是可以依靠的人，他们恪尽职守，精益求精，也不曲意逢迎</li>
<li>专业人士知道什么事情是不可能的，什么路径是错误的</li>
<li>专业人士会潜心钻研匠艺，锤炼自己的技能</li>
<li>专业人士会坦诚自己不知道答案，但是可以信赖他会找到答案</li>
<li>专业人士持续稳定，为自己的工作设置了很高的质量标准，每天都持之以恒地坚守标准</li>
</ul>
<p>具体到工作上来说，对应于不同角色有不同的具体表现。假如你是项目负责人，在接受到新任务时，需要：</p>
<ul>
<li>弄清楚任务的相关背景，理解具体的业务场景，不要想当然</li>
<li>发送邮件告知所有相关人员你接受了任务，给出具体的安排和预期的阶段性输出</li>
<li>和技术负责人明确开发需求和优先级，集中人力完成核心功能</li>
<li>有特殊变化时，及时汇报给上司和变动涉及的相关同事，看看有没有办法把影响降到最低</li>
<li>在项目进行的过程中，坚持跟踪进度，并根据反馈及时调整更新计划</li>
<li>如果遇到困难，积极寻求支持，找到最佳解决方案</li>
<li>完成项目后，定期进行总结和思考，为以后进行相关任务积累经验</li>
</ul>
<p>对于开发人员来说，需要：</p>
<ul>
<li>明确需求和排期，先完成耦合度高的模块，不拖进度</li>
<li>遇到困难，寻求老司机帮助，及时汇报，不要拖到最后一秒</li>
<li>一边写一边重构，不要让代码太快腐化</li>
</ul>
<p>当然，说着容易做着难，就要在每天的工作中不断实践啦</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说团队建设是盖大楼，那么每个队员就是那一根根顶梁柱，怎么样才能成为同事眼中的好队友和上司眼中的一员虎将呢？本文是我的一些思考。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="团队" scheme="http://wdxtub.com/tags/%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>【萨利机长】专业精神</title>
    <link href="http://wdxtub.com/2016/12/11/sully-movie/"/>
    <id>http://wdxtub.com/2016/12/11/sully-movie/</id>
    <published>2016-12-11T02:21:44.000Z</published>
    <updated>2016-12-16T12:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>整部影片最打动我的，是萨利机长的专业精神和对自己的绝对自信，专注、精确、解决问题的能力，真的太吸引人了。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.11: 完成初稿</li>
</ul>
<p><img src="/images/14814229114855.jpg" alt=""></p>
<p>去年感恩节，当我来到 911 纪念碑广场的时候，面对着深邃的方形瀑布池，看着似乎是流向异世界的水流，才感受到这个名为 Reflecting Absence(缺之思)设计的真正含义。自 2001 年起，谈及纽约与飞机，大约本能会想到就是世贸大厦的轰然倒塌与 2996 个逝去的生命。</p>
<p>八年之后的 2009 年 1 月 15 日，又一架飞机成为了纽约的大新闻，这次是全美航空 1549 号航班，机长萨利。飞机起飞两分钟后遭到鸟群撞机，两架发动机全部熄火，萨利决定在哈德逊河上迫降，奇迹的是，机上一百五十五人，无一人死亡。</p>
<p>关于剧情其实无需多言，我在美国只坐过十来次飞机，除了有一次因为突发时间延误了约两个小时外，基本都是准时的。影片中从空姐到乘客再到整个上飞机的流程都很逼真，不由得让我想起在各大机场晃悠着找吃的经历。不过这些都不是重点，重点在于机长的从容淡定、专业精神和彻底的负责任的态度，这些都在细节中一览无遗，也正是因为真实，所以特别有穿透力。我甚至有点后悔，高三那年怎么没有选择成为一个飞行员呢（玩笑话）？</p>
<p>因为热爱因为责任，我看到了萨利机长离开飞机前仍然在确定是否有乘客还未撤离，我看到了他穿好制服拿好记录板，我看到了他想要确定乘客全部安全的在码头瑟瑟发抖，我看到了他在医院得知 155 人安然无恙时的微笑，我看到了他身上的自豪。</p>
<p>即使四十多年的职业生涯要被迫降这不到五分钟时间来盖棺定论实在过于残忍，即使面对各种询问与质疑依然相信是数据错的似乎有些自负固执，但正如机长夫人所说的那样，这难道不是『你所做过最危险的事情吗』，可是哪怕最终结局反转，能依靠自己的技能把大家都带回这个美好的世界，是惊险刺激但是值得骄傲的回忆。</p>
<p>人生是无数个选择，所有事情都与时机有关，我们可以能做出任何选择。萨利机长年轻时学习开飞机的时候，学到的最重要的一课也许是『微笑』吧。尽自己的责任，完成自己的使命，然后在大家的开开心心背后，留下微笑，深藏功与名。</p>
<p>回归正题，还是讲讲『专业』本身，在《战争的艺术》这本书中，作者 Steven Pressfield 给出过『专业人士』的概念：</p>
<blockquote>
<p>成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</p>
</blockquote>
<p>工作一段时间之后，深感象牙塔和现实世界的巨大鸿沟，那些学生时代最不酷的品质，反而是工作中最需要最难得最珍贵最迷人的，比如专业精神、纪律和专注。就是这样的『不酷』，长年累月坚持累计，才能做出最『酷』的事情。</p>
<p>不由得想起《软技能》这本书里对专业人士的描述，分享给大家：</p>
<ul>
<li>专业人士会严肃对待自己的责任和事业，愿意作出艰难的选择去做自己认为是正确的事情 —— 往往还要自己承担代价</li>
<li>专业人士是可以依靠的人，他们恪尽职守，精益求精，也不曲意逢迎</li>
<li>专业人士知道什么事情是不可能的，什么路径是错误的</li>
<li>专业人士会潜心钻研匠艺，锤炼自己的技能</li>
<li>专业人士会坦诚自己不知道答案，但是可以信赖他会找到答案</li>
<li>专业人士持续稳定，为自己的工作设置了很高的质量标准，每天都持之以恒地坚守标准</li>
</ul>
<p>希望我能早日成为自己心中的专业人士。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整部影片最打动我的，是萨利机长的专业精神和对自己的绝对自信，专注、精确、解决问题的能力，真的太吸引人了。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="迫降" scheme="http://wdxtub.com/tags/%E8%BF%AB%E9%99%8D/"/>
    
      <category term="机长" scheme="http://wdxtub.com/tags/%E6%9C%BA%E9%95%BF/"/>
    
      <category term="责任" scheme="http://wdxtub.com/tags/%E8%B4%A3%E4%BB%BB/"/>
    
  </entry>
  
  <entry>
    <title>小土刀的生产力指南</title>
    <link href="http://wdxtub.com/2016/12/10/be-productive-guide/"/>
    <id>http://wdxtub.com/2016/12/10/be-productive-guide/</id>
    <published>2016-12-10T11:59:57.000Z</published>
    <updated>2016-12-10T14:39:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>每天都只有二十四个小时，如果生产效率提高一倍，就相当于有四十八个小时。那么问题来了，如何提高呢？本文是我的一些实践经验。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.10: 完成初稿</li>
</ul>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之前在知乎上回答过一个关于我的问题 - <a href="http://zhihu.com/question/47788269/answer/108425865" target="_blank" rel="external">为什么小土刀能读那么多书写那么多文章</a>，核心其实就是如何提高生产力。时隔五个月再看，发现原来答案中的建议不够明确，应用的场景也更偏向于校园。正好临近年末，趁此机会把这段时间在工作中不断调整和实践的经验整理一下，分享给大家。</p>
<p>原答案的核心思想其实三句话可以总结完成：</p>
<ol>
<li>提高自己的精力水平，在相同的时间内完成更多的工作。</li>
<li>根据优先级找出安排工作的最合理顺序，集中力量办大事，小事利用零碎时间见缝插针。</li>
<li>写作即是思考，按照主题有目的组织自己所学的内容，坚持下去会有极大的收获。</li>
</ol>
<p>这里先以这三点为轴，具体介绍一下我是如何逐渐形成属于自己的方法论的。</p>
<h2 id="精力"><a href="#精力" class="headerlink" title="精力"></a>精力</h2><p>提高精力水平的方法其实并不多，除了直接吃兴奋剂之外，比较长期提高策略都是建立在规律生活的基础上的，包括：</p>
<ul>
<li>早起：一日之计在于晨</li>
<li>跑步：通过有氧运动提高心肺水平</li>
<li>健身：强健体魄，需要告别让精力大打折扣的亚健康状态</li>
</ul>
<p>工作之后，单独去找时间运动其实是比较奢侈的，所以可以考虑在任务调度的时候，合并一些任务。</p>
<h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><p>人们为了提高计算机执行的效率，在调度上做了很多工作，我一直在想，这样的思路可不可以应用到我们的日常生活中呢？</p>
<p>答案当然是可以的，秘诀就在于『局部性原则』、『批处理』和『分治法』。不过开始之前我们一定要意识到，人和计算机的最大差异在于任务切换的成本，所以我的策略大概是这样的：</p>
<ul>
<li>把上下班的通勤时间利用起来：走路上班，路上听播客，了解行业外的知识；跑步下班，把运动合并到通勤时间内，既避免了堵在路上心塞，也正好运动了，一举两得。</li>
<li>早起先把每天必须要做的重复性工作完成，避免堆积到晚上就不想做了</li>
<li>对于长期任务，分解为以天为单位的小目标，每天下班之后尽力去推进进度</li>
<li>公众号的推送我会在下楼时根据简单过一遍，值得读的我会推送到 kindle 中，等过一段时间集中阅读</li>
<li>碎片时间的最佳克星是手机上的记事本和 kindle，我一般会想到啥就先在手机上记录下来，而在地铁等比较嘈杂的公共交通路上，kindle 中积累的文章就可以派上用场</li>
</ul>
<p>生活节奏的优化是一个长期的过程，需要根据不同人不同工作不同习惯去自己调整，最重要的是尽量减少碎片时间和不知道干嘛的时间，总应该有点事儿做，哪怕是好好聊聊天。</p>
<h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>习惯塑造性格，性格决定命运，所谓『吾日三省吾身』，说的其实就是要努力找到自己的坏习惯，并且想办法改掉它。在和坏习惯作斗争的时候，难免失败，但换个角度想，这也是很好的学习如何面对失败的机会。</p>
<p>一些我正在培养或者坚持的习惯有：</p>
<ul>
<li>建立自己的信息处理流程，为什么说这是一个习惯，其实如何获取信息就是如何观察这个世界，也许这是最重要的习惯</li>
<li>一天只听一首歌，足够熟悉之后这首歌就有了『降噪』的功能，更能够集中精神</li>
<li>早睡早起</li>
<li>写周记</li>
<li>零食只吃薄荷糖，饮料除了水之外基本是酸奶和牛奶</li>
<li>电梯一般坐到一半的高度，剩下的楼层走楼梯</li>
<li>每天下班前会把明天要做的事情写在纸上，这样第二天很快就可以进入状态</li>
<li>隔五十分钟去喝喝水，走动一下去个洗手间，不要久坐</li>
<li>少油少盐，不要吃太饱</li>
<li>有什么想法第一时间记下来</li>
</ul>
<p>基本就是这些了，最后附上原答案吧</p>
<h2 id="原答案"><a href="#原答案" class="headerlink" title="原答案"></a>原答案</h2><p>这个问题的核心很简单，就是如何投资自己。很多人都知道要投资自己，但是却停留在知道这个概念的程度，没有继续思考，结果就是既不懂什么是投资，也不懂什么是自己，于是像无头苍蝇般尝试，基本是徒劳。了解自己是个大问题，稍后再说，先来看看投资。</p>
<p>投资的目的很简单，就是要收益大于成本，那么成本是什么？生理角度看，两个，时间与精力。换个角度看，成本其实对应于本金，假设一分耕耘一分收获，那么成本转化成本金的比例为一比一。如果想要增加本金，两个方法：增加时间和提高效率。原来工作四个小时，现在八个小时，那么时间上就翻倍；如果原来做一个小时的活现在只需要半小时，那么效率上翻倍。本金的公式大约是时间乘以效率，这样都翻倍的话，实际上本金就变成了原来的四倍，这就是很大的优势了。早起，增加了时间，是一种提高的方式；坚持运动，提高精力水平，也是一种提高的方式。简单粗暴点来说，投资一块钱能赚四块钱的事儿，不去做，是不是傻？从成本到本金的转化还涉及另一个因素，就是环境，可能好的环境加成是 2.0，坏的环境是 0.5，回顾一下公式：本金=时间 x 精力 x 环境，具体每个变量的系数都是可以改变的，问题就是如何去改变了。这里三个变量，有哪一个不重要吗？没有，三个都重要，只有都提高了，本金才会有明显的增长。</p>
<p>现在我们有了本金，就要决定怎么投资了，具体做什么事儿，其实就对应于如何投资。这就又分情况了，两类比较容易区别开的：短线投资和长线投资。短线投资一般来说两个目的，维持收支平衡或者赚快钱。收支平衡是我们养活自己的条件，至少得把前面提到的成本满足了，才有后面的事儿；赚快钱就是赶趟，现在流行啥就去折腾啥。所以用流不流行、目前有没有用来评判事情是非常幼稚的，以为自己跟引领风骚的人一样，其实所有的自我感觉良好都是幻觉。长线投资说白了很简单，那些本质、原理和看起来没啥用的，很可能是大鱼。当然这套理论也不是我凭空发明的，看过《穷查理宝典》和巴菲特相关内容的话，应该就能明白长线投资的重要性，就这其实老祖宗也都帮我们总结好了：放长线钓大鱼。</p>
<p>有了前面的公式和长短线投资的概念，其实大部分事情都很好解决了，自己心里算一笔账，挑可能赚的多的，去做就行了。创业公司的成功率很低，投资人的成功率也不高，做事情本来就是有风险的，尽力去做好，期待下一次更好，就可以了。道理其实非常简单，不过为了说清晰点，一边回答问题一边介绍吧。</p>
<p>读大部头最有效率的方法是知道自己要什么，然后去找。比方说我要写教材，看各种教材的关键点不是它的用词句式，甚至都不是知识点，而是组织内容的方式，我知道自己需要什么，就可以暂时先只获取什么。看起来我很快过了一遍，但私底下每一章我可能得重看五到十次。简单来说，目的不同，方式就不同。</p>
<p>课业压力繁重，如何抽出时间呢？这个其实是一个伪命题，课业压力至多是第二位，第一位是拖延带来的压力。真正对抗拖延的办法不是三令五申拖延的坏处，而是让大家意识到不拖延的好处。拖延就是浪费时间，时间就是本金，本金少了投资得再好赚得也少，都说无利不起早，那么有利，为什么还不起早？</p>
<p>当然，在 CMU 确实很多名声在外的课工作量都不小，我的做法一般是周一周二闭关集中注意力尽量做完，把星期二当作星期天（也就是交作业的时候），有了这样的紧迫感，即使是很难的作业，大约也能在周三周四完成，那么周五和周末就很自由，可以写写博客。</p>
<p>配合我自己的工作学习节奏，其实是对作息有一定要求的，一日之计在于晨，如果我五点钟起床（十一点前睡觉），那么到十二点中午吃饭，基本上有六个多小时的有效时间，这可是一天中最长的连续时间段啊（前提是每顿饭都按时吃），所谓集中力量办大事，就是这个道理，用最连贯的时间把最难的部分处理掉，后面就省心很多了。另外坚持运动对精力的提升效果非常明显，当我意识到自己精力充沛时效率很高时，我就会尝试各种方式，尽量去延长效率高的时间，尽量在这段时间里做最重要的事情。</p>
<p>其实需要放弃很多东西，比方说我没有精力去关心所有人，会根据自己的判断进行筛选，这就避免了很多无效社交（但也有误伤）。与此同时我不给自己揽活，不让别人背上的猴子跳到我背上，自己该完成的事情就应该自己完成，交给别人是非常不负责任的做法。但是这样久了很多时候会过于理性，少了些人味儿，这是我很希望慢慢扭转过来的。</p>
<p>付出和积累其实都不太记得了，只是年轻的时候时间宝贵，只是不想停下来，只是想找点事情做，不然不就浪费本金了吗？没有喊着金钥匙出生，只能一路披荆斩棘。不过有一个例子我印象非常深刻，我的 lofter 博客写到第十个月，差不多两百篇的时候，粉丝都不到一百个，文章数目比粉丝数目多一倍，这就是太夸张的，但是忽然在第十一个月，因为网易内部外部推荐的缘故，慢慢粉丝才多了起来，很多时候就是得坚持到某一个关口。</p>
<p>不过话说回来，这也不算坚持，用坚持的话，好像是在做一件不大喜欢做的事儿一样；我也不喜欢用习惯这个词，弄得好像是千篇一律按部就班的感觉。开始写作就是自己想要去做，就做了，写是给自己，看是自己看，年纪大了记忆力不好，写下来，自己踏实些。更何况写的时候强迫自己思考，围绕主题组织内容强迫自己关联，这都是很好的训练，帮助打通不同知识、学科的连接，最终得以触类旁通、举一反三。</p>
<p>说得略微详细，不是说按照这条路就走得通，而是想表达，每个人都有最适合自己的路，我的路是一点一点摸索出来的，不同的人可以参考，却不必照搬。唯一能够复制的其实是想法，具体到实现，得自己一次次碰壁和调整。</p>
<p>有一句话我很喜欢：上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。</p>
<p>我的选择是上士，所以我的路，就是勤而行之。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每天都只有二十四个小时，如果生产效率提高一倍，就相当于有四十八个小时。那么问题来了，如何提高呢？本文是我的一些实践经验。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="效率" scheme="http://wdxtub.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="时间" scheme="http://wdxtub.com/tags/%E6%97%B6%E9%97%B4/"/>
    
      <category term="生产力" scheme="http://wdxtub.com/tags/%E7%94%9F%E4%BA%A7%E5%8A%9B/"/>
    
  </entry>
  
  <entry>
    <title>【天地九重】读书笔记</title>
    <link href="http://wdxtub.com/2016/12/10/sky-ground-clip/"/>
    <id>http://wdxtub.com/2016/12/10/sky-ground-clip/</id>
    <published>2016-12-09T23:03:28.000Z</published>
    <updated>2016-12-09T23:21:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>有一种生活，你没有经历过，就不知其中的艰辛;有一种艰辛，你没有体会过，就不知其中的快乐;有一种快乐，你没拥有过，就不知其中的真谛。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.10:完成初稿</li>
</ul>
<p>成为一名军人，是我引以为幸运和骄傲的事，是军队给了我一切，这一切并不是指个人荣誉和生活待遇，而是指英雄梦想、精神品格、信念与勇气这些珍贵的东西。</p>
<p>在航天员公寓的墙上写着这样一句话：『有一种生活，你没有经历过，就不知其中的艰辛；有一种艰辛，你没有体会过，就不知其中的快乐；有一种快乐，你没拥有过，就不知其中的真谛。』我将完整讲述航天员选拔、训练、执行任务的故事。我愿读者能从我的讲述中，真切地看到作为航天员的艰辛、快乐和真谛。</p>
<p>当年，我们的学校叫绥中县第二高级中学。2004 年，改名为『绥中县利伟高中』。我所在的班级被命名为『利伟班』。我觉得这是家乡的父老在看着我，令我无法懈怠。</p>
<p>奇怪的是，在离别时热烈、喧闹的场景中，我却异常平静。即使是登上火车启程的时候，送别的家人、老师和同学边道别边流泪，同行的伙伴也泪水涟涟，我却没有想流眼泪的感觉。至今我想象不出自己那时何以如此坦然、冷静，直到有人喊我的名字，我才抬起手，向父母、姐姐和弟弟，向包括县领导、学校老师和同学的人群挥了一下手，告别了家乡，也告别了那个少不更事的懵懂自己。</p>
<p>父亲曾说，一个人，无论走到哪里，都要记得你来自何方。家，是你的根本，热爱故乡，才能热爱祖国。家国天下，中国人总是把家庭、故乡、祖国的命运紧紧地联系在一起。</p>
<p>其实，从小我的个性就是争强好胜的，但是我太爱玩了，大多数时候这种争强好胜是表现在玩的当中，在玩和学习之间选择，我显然是倾向于前者，是老师和家长对我的监督让我不得不好好学习。但是在进入军营之后，父母并不在身边，没人整天盯着我要我用功，这种自我管理的天性油然而生，随着成长不断强化，军校的同学都成为我竞争的对象，我对自己各方面要求都显著严格起来。</p>
<p>一位军旅作家曾经这样说过：『在所有的行业中，方队没有任何实际作用，只有军队中还依然存在，因为它从古至今都是军队战斗精神的绝好体现。在冷兵器时代，方队是最基本的战斗队形，每当发起冲锋，士兵们就端起武器成方队前进，此时队列中的每个人实际上都是「死士」，你后退，躲避，战友的利刃就会刺进你的身体，所以你只能抱着必死的决心，勇往直前，直到被面前的敌人击中，扑倒在地，后面的战友再踏着你的尸体冲上去!』</p>
<p>预校对我们在时间上的管理尤其严格，这和培养目标有关系，对飞行员这个彼时我们还所知甚少的高危险工作来说，将时间精密计算、合理分配和准确执行，是必须着重培养的素质之一。</p>
<p>一日生活制度规定得非常细致，不消说起床、上课、吃饭、休息、看新闻这些大项内容，就连我们什么时间写家信，什么时候洗衣服，完全都是程序化的。</p>
<p>我相信，许多有了一定经历的军人和曾经的军人，都会有和我大致相同的想法。你现在也许已经是领导干部，也许已经从普通士兵成长为将军，也许你已经在某一领域建功立业，或者已经是手握重金的企业家，当回想起初入军营的青春时代，你不会否认那些艰苦的训练，严格的纪律，所经历的身体和精神上的锻炼，培养了你，影响了你，你的人生一路走来，它就在潜移默化中造就了你。</p>
<p>了解外面军队几十年历史的人都知道，人民解放军从小到大，在战争中多次以弱胜强，打下了江山，战胜过世界上最强大的军队，而在和平时期也业绩卓著，急难险重的任务都由军队完成，与世界上任何一支军队相比，外面都算得上一个最成功的军队。</p>
<p>所以，我想对人们说，尤其是对年轻的战友们说，在部队的文化里有你最珍贵、最需要、对你最有意义的东西，接受它的塑造，服从它的纪律，理解它的意义，是我们一生的幸运。这些东西，除了军队，没有别的地方能够给你。它会影响我们的一生，是我们做人做事的一个最强大也最可靠的基础。</p>
<p>部队这样做是为什么?我想，虽然说起来叠被子是件很平常的事情，但往深里说，那实际上从某一点上代表和规范着你去做一个什么样的人、做一个什么样的军人。军人做事追求极致，强调执行力，要做到胆大心细，准确认真。尤其作为飞行员、航天员，任何细小的误差和失误都有可能影响到任务的完成，威胁到生命的安全。军中无小事，往往细节决定了成败、决定了生死。</p>
<p>从普通人到飞行员一般要过两个关口：抗过载和高速翻滚。我的身体素质好，适应过载不难。可第一次上天时，在飞机高速翻滚中感到有些头昏，虽然经过很好的打旋梯训练，但在飞机上这种高速的不规则翻滚，还是让我感到难受。</p>
<p>我知道，学员淘汰率这么高，这一关如果不能过，结局就是注定的。要过关没别的窍门，只有去适应，只有想办法练。除正常的训练之外，我休息时用上了土办法——左手捏右耳，右手捏左耳，原地打圈。</p>
<p>飞低空时，我们会飞得很低，看到地面有大片白花花的东西，就想去看个究竟，原来是牧民们的羊群，我们的飞机从 50 米的低空快速掠过，巨大的轰鸣和强烈的气流，把羊群惊得四下奔逃。</p>
<p>飞行员大多有这样的『顽皮』的故事，它是飞行快乐的一种释放，缘自对自己战机的熟知，也是在充分掌控的前提下对危险边界的体验与品味。虽然飞行员面临着高度风险，但熟知飞机和飞行训练过程的所有细节，就可以把主动权牢牢掌握在自己手里。真正的危险往往来自于『意外』，遇到这样的意外，长期训练形成的临机处置能力尤其重要。</p>
<p>艰苦的自然环境、单调重复的军旅生活，让人寂寞，也使人坚韧。有人曾说，耐得住寂寞是美德，作为军人，坚守自己的岗位是职责。无论是在南疆大漠还是在西北边陲，军人，就是一棵棵的骆驼刺，驻扎在艰苦的地方，耐住寂寞，保卫着祖国，让自己的青春展露成边疆的一片绿色。</p>
<p>现在看来，这个阶段的新机型飞行训练，不仅让我的心理素质、反应能力、做动作的精准度有了很大长进，各个方面的变化所带来的困难，也成为对我思想和精神的考验与砥砺，我比任何时候都清楚地知道我心中最热爱的，最珍贵的是什么，而我要如何对待它、为它奋斗。</p>
<p>中国航天员要执行复杂的空中任务，并不是飞船上的乘客，美国、苏联选择担任指令长的航天员一般也都从飞行员中挑选;其次，较长时间的飞行经验，空中生活、工作经历，让飞行员过渡到航天员不需要重新适应。而要达到规定的飞行时间，年龄必然在 30 岁左右。</p>
<p>另外，在航天员的训练与工作中，风险和压力不仅仅是生理上的，主要是心理上的。飞行员阶段的空中体验对心理承受能力、良好的精神品质、意志力的形成起到了关键作用。</p>
<p>当然，作为飞行员，即使是一名优秀的战斗机飞行员，也不是顺理成章就能成为合格航天员的，中间相隔的，不是从四川到北京的万水千山，也不仅仅是从地面到天空几公里扩展到几百公里的距离，而是另外一些越过生命极限、超出想象的考验。</p>
<p>国家为了选拔训练一名航天员，可以说是煞费苦心，投入的人力物力不可胜数。许多科学家拼搏一生，就是为把航天员送上太空。有人说战斗机飞行员是用等量黄金堆起来的，这样形容起来，航天员大概是要用等量的钻石堆起来了。</p>
<p>每个人的成功方法不尽相同，但几个关键词却非常相似，比如对理想的追求，对事业的坚持，对自我的不断超越。马斯洛人本主义心理学认为，人类的最高需要是个人成长与发展的自我实现。当实现理想与抱负成为自身的需要时，就会转化为一种巨大的内在驱动力，更大程度地激发自身潜能，实现个人的成功，从而对社会、对国家做出更大的贡献。我想这是最好的解读。</p>
<p>每个人都有自己的方法，往往是方法上的差别导致了成绩的高低。在学习和考核中，要深入进去，把原理理解透了，去领悟一些东西，悟性来自于你对知识的掌握，通过勤奋找到最科学的方法。</p>
<p>在航天员的全部学习训练课目的结业总评中，我的综合成绩排名第一，这其中既包括理论考试，也包括操作考试。这是从头到尾五年不松懈、不停歇、不间断努力积累的结果，不是一朝一夕，也不是一时一事。</p>
<p>困难和挫折就像湍急河水里湿滑的石头，一不留神就有可能让你滑倒。然而，了解了这些困难，战胜了这些挫折，却又可以摸着“石头”过河，它们变成了帮助你渡过河流的助力。</p>
<p>在经过长时间的努力却没有达到应有的效果时，我也曾经气馁、灰心过。但我仅仅让这种情绪在心中存留很短的时间，便开始收拾心情，继续奋斗。我不敢松懈!</p>
<p>在一次次体能和心理超负荷的训练后，我渐渐摸索到一条规律:当一件事坚持到快要坚持不下去的时候，实际上就接近成功了。</p>
<p>首飞选拔在结业考试结束后随即开始，过程分为三个阶段。一要在14名通过考核的航天员中，选出5名表现更为突出的进入下一阶段;二是通过为期两个月的强化训练，选出3人进入首飞梯队;三是通过具体针对首飞任务的训练与模拟，确定执行首飞任务的1人。</p>
<p>我认为，要保障保险系数，要达到不让万一的情况出现，就只有反复地重复同一件事情，直到它像你的本能反应和天生的技能一样，这样才能真正在实际执行航天飞行任务时，确保做到『万无一失』。</p>
<p>比如对《飞行手册》中的条款和规定，我真的可以做到倒背如流。很多人关心我在太空中看什么书，结果发现我在看手册，似乎有些失望。其实，为了确保万无一失，完全靠记忆是不行的，我当时确实是在复习手册中的内容。</p>
<p>我想，『特别认真』是我们航天员训练中应有的状态，也应当是我们平时工作和生活中应有的状态。</p>
<p>除了认真之外，还要能吃苦。</p>
<p>我想，一个人有没有能力是另外一个概念，有能力却不把能力发挥出来，是很遗憾的事情。现在，我也经常对航天员说，别因为自己的原因造成终身的遗憾。</p>
<p>很多时候，有很多人，真的就是因为一个小小的差错把自己的前途毁掉了。对此我从来都是一句话:不要说忽略了、马虎了这样的话，没有这句话!你马虎，别人怎么不马虎呢?这绝对是一种能力，从心理素质的角度来讲，这就是一种能力的体现。</p>
<p>马虎就要出错，明知道出错会选不上却还要马虎，这至少说明你没办法控制自己，这就是能力上的差距。</p>
<p>我举手敬礼，然后左手提着航天服地面通风箱，转身向通往院外的侧门走。马上要到门边了，我回过头来，向总书记和其他首长挥手道别。</p>
<p>这时候，我看到了意想不到的一幕。总书记见我回头，又向前迈了两步，停住，向我挥手。我忽然看到总书记的眼睛里有泪光闪烁……我的心情一下子变得很复杂，既感到强烈的心灵震撼，又有一些吃惊;既非常感动，又有一种不忍。即便是几年后的今天想起那时的情景，我仍然会眼眶发热，激动不已。总书记眼中的泪水饱含着对我的关心、期待、信任，同时也包含了一份牵挂和不舍。总书记作为党和国家的最高领导人，却在航天员去执行任务时，给予如此深厚的关切，我能感到他的心和我们在一起。我想，无论是谁，此时此刻都无法克制自己的情感。</p>
<p>我只觉得一股热流涌向眼眶，心情无以言表。但我没有让眼泪掉下来，只把那种殷切的目光，那种关怀，那种鼓励，深深地记在了心里。在执行任务的整个过程中，这种目光给了我巨大的力量，让我义无反顾。</p>
<p>现在分析起来，可以说那是一种真正意义上的灵魂冲击，让我产生了从未有过的慷慨激昂的情绪。<br>在总书记那种目光的注视下，那一刻我甚至有了英勇献身的冲动，有了那种“风萧萧兮易水寒，壮士一去兮不复还”的壮烈豪情，心想，即便有什么突发情况，为了国家、民族，贡献就贡献了，牺牲就牺牲了。</p>
<p>当看到这段录像的时候，我感动得说不出任何语言。我看到有些白发苍苍的老专家，盯着大屏幕掉眼泪，哭得像个孩子。我看到我的大队长申行运哭了，一米八的大个子在那里捂着脸哭。我看到我的教练也在流眼泪，朝夕相处的航天员战友们，我的领导们，还有工程技术人员，那一刻大家都在流眼泪。有这么多人在关心我、牵挂我!那种真诚，那种真情流露，现在想起来，我心里都有种很酸楚的感觉。</p>
<p>作为首飞航天员，除了一些小难题，别的突发的、没有预案的、原因不明的情况还有许多。这些问题的应对方法，没有人告诉过我，和国外航天员交流的时候，人家也不会把各种细节都说给你听。就像小时候读过的那个寓言故事《小马过河》，只有自己亲身体会了才知道深浅。</p>
<p>比如，当飞船刚刚入轨，进入失重状态时，这个阶段，百分之八九十的航天员都会产生一种“本末倒置”的错觉。这种错觉很难受，我明明是正着坐的，却感觉脑袋冲下。如果不克服这种倒悬的错觉，就会觉得自己一直在倒着飞，很难受，而且还可能诱发空间运动病，影响任务的完成。</p>
<p>在地面没人提到过这种情况，而且即使知道，训练也无法模拟。相信在我之前遨游太空的国外航天员有过类似体会，但他们从没有跟我交流过。</p>
<p>在这个情况下，没别的办法，只有完全靠意志力克服这种错觉。想象自己在地面训练的情景，眼睛闭着猛想，不停地想，给身体一个适应过程。几十分钟后，我终于调整过来了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有一种生活，你没有经历过，就不知其中的艰辛;有一种艰辛，你没有体会过，就不知其中的快乐;有一种快乐，你没拥有过，就不知其中的真谛。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://wdxtub.com/categories/Reading/"/>
    
    
      <category term="书摘" scheme="http://wdxtub.com/tags/%E4%B9%A6%E6%91%98/"/>
    
      <category term="杨利伟" scheme="http://wdxtub.com/tags/%E6%9D%A8%E5%88%A9%E4%BC%9F/"/>
    
      <category term="航天" scheme="http://wdxtub.com/tags/%E8%88%AA%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>【软技能 代码之外的生存指南】读书笔记</title>
    <link href="http://wdxtub.com/2016/12/10/soft-skill-clip/"/>
    <id>http://wdxtub.com/2016/12/10/soft-skill-clip/</id>
    <published>2016-12-09T22:53:59.000Z</published>
    <updated>2016-12-09T23:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常好的一本书，即使不是程序员，也应该读一读。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.10: 完成初稿</li>
</ul>
<h2 id="职业"><a href="#职业" class="headerlink" title="职业"></a>职业</h2><p>这里说的『优秀的软件开发人员』是那些能够把控自己职业生涯、达成目标、享受生活的人。</p>
<ul>
<li>如何管理职业生涯，如何在职业生涯中做出正确选择</li>
<li>如何以更好，更有效的方式学习，以及如何尽可能富有成效，以及在缺乏动力而心灰意冷的时候该如何去做</li>
<li>有关理财的基础知识，有关身心健康的基础知识</li>
</ul>
<p>你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。</p>
<h3 id="从非同凡响开始：绝不要做他人都在做的事"><a href="#从非同凡响开始：绝不要做他人都在做的事" class="headerlink" title="从非同凡响开始：绝不要做他人都在做的事"></a>从非同凡响开始：绝不要做他人都在做的事</h3><p>把自己当作一个企业去思考时，才能开始做出良好的商业决策。想想自己有什么可以卖，我的产品和服务是什么。</p>
<ul>
<li>专注于你正在提供怎样的服务，以及如何营销这项服务</li>
<li>想方设法提升你的服务</li>
<li>思考你可以专注为哪一特定类型的客户或行业提供特定的服务</li>
<li>集中精力成为一位专家，专门为某一特定类型的客户提供专业的整体服务（记住，作为一个软件开发人员，你只有真正专注于一类客户，才能找到非常好的工作）</li>
</ul>
<p><strong>采取行动</strong></p>
<ul>
<li>想象一下：有一家企业，拥有某个产品或服务。他们将如何推广这一产品或服务从而可以做到卓尔不凡？</li>
<li>如果只用一句话来描述你能为潜在雇主或客户提供怎样的特定服务，这句话是什么？</li>
<li>把你的职业当作是一个企业，将会影响你的：<ul>
<li>工作的方式</li>
<li>处理自己的财务的方式</li>
<li>寻求新工作或新客户的方式</li>
</ul>
</li>
</ul>
<h3 id="思考未来：你的目标是什么"><a href="#思考未来：你的目标是什么" class="headerlink" title="思考未来：你的目标是什么"></a>思考未来：你的目标是什么</h3><p>无论因为何种原因你没有为自己的职业生涯设定目标，现在都是时候设定目标了。不是明天，也不是下周，就是现在。没有明确的方向，你走的每一步都是徒劳的。不要随心所欲地生活，不要随遇而安地行走在职业生涯的漫漫长路上。</p>
<p>大目标并不需要那么具体，但是必须足够清晰。你应该定期追踪并更新自己设定的目标，必要时还要调整。</p>
<p><strong>采取行动</strong></p>
<ul>
<li>坐下来，为你的职业生涯设置至少一个大目标</li>
<li>将大目标分解成相应的若干小目标，例如：<ul>
<li>月度目标</li>
<li>周目标</li>
<li>每日目标</li>
</ul>
</li>
<li>把你的大目标写在自己每天的必经之地，每日三省吾身——我在追求什么</li>
</ul>
<h3 id="人际交往能力：远比你想象的重要"><a href="#人际交往能力：远比你想象的重要" class="headerlink" title="人际交往能力：远比你想象的重要"></a>人际交往能力：远比你想象的重要</h3><p>需要特别留意的点</p>
<ul>
<li>每个人都希望感到自己很重要<ul>
<li>我们常常容易犯的一项错误就是，轻率地否决同事的想法，以便于可以提出自己的想法，但这样让他们感觉自己是无足轻重的，会起反效果</li>
</ul>
</li>
<li>永远不要批评，用表扬代替批评<ul>
<li>奖励积极行为要比惩罚消极行为有效得多</li>
</ul>
</li>
<li>换位思考<ul>
<li>思考对他人而言什么才是最重要，什么才是他们需要的</li>
<li>直接告诉老板你喜欢的实现功能的方式是不明智的，而应该说明这样实现功能对他所带来的帮助</li>
</ul>
</li>
<li>避免争吵<ul>
<li>逻辑和纯粹的理性不足以说服人，有的时候退一下也无所谓，但是可以赢得不可估量的尊重</li>
</ul>
</li>
</ul>
<h3 id="破解面试之道"><a href="#破解面试之道" class="headerlink" title="破解面试之道"></a>破解面试之道</h3><ul>
<li>大多数面试官决定雇佣某个人是基于各种各样的非技术因素</li>
<li>通过面试最快捷的方式是让面试官对你怀有好感。达成该目标有很多方法，其中大多数可以在面试之前完成</li>
<li>从期待加入的公司里找到联系人 -&gt; 与该联系人建立紧密关系 -&gt; 获得个人推荐 -&gt; 面试</li>
<li>集中经历推销自己会对你大有裨益</li>
</ul>
<h3 id="公司与公司是不一样的"><a href="#公司与公司是不一样的" class="headerlink" title="公司与公司是不一样的"></a>公司与公司是不一样的</h3><ul>
<li>小公司<ul>
<li>优点：承担多种职责，灵活的角色转换；对工作的影响较大；回报潜力大</li>
<li>缺点：没法安静下来写代码；工作在众目睽睽之下；稳定性差</li>
</ul>
</li>
<li>中公司<ul>
<li>优点：工作稳定；加班较少</li>
<li>缺点：变化很慢；没有机会使用前沿技术</li>
</ul>
</li>
<li>大公司<ul>
<li>优点：完备的流程和规范；培训机会多；大型有影响力的项目</li>
<li>缺点：官僚主义；只负责代码库的一小部分；很难获得关注</li>
</ul>
</li>
</ul>
<h3 id="攀登晋升阶梯"><a href="#攀登晋升阶梯" class="headerlink" title="攀登晋升阶梯"></a>攀登晋升阶梯</h3><ul>
<li>承担责任<ul>
<li>承担更多种责任看起来显而易见，但在职业生涯中，经常会面对更多金钱还是更多责任的选择。至少从长远来看，正确的选择几乎永远是更多责任</li>
<li>有一个不受重视的项目，你能去负责它吗？</li>
<li>你能帮助团队里的信任快速成长吗？</li>
<li>你能负责文档制作流程，并保证及时更新这些文档吗？</li>
<li>哪些工作是没有人愿意去做，你愿意承担起来，并将其简化或者自动化的？</li>
</ul>
</li>
<li>引人注目<ul>
<li>周报是让领导关注你的方式之一</li>
<li>每天都记录自己的活动日志 —— 把这个日志以周报的形式发送给你的经历</li>
<li>提供演讲或培训 —— 选择一个对你的团队有用的话题</li>
<li>发表意见 —— 只要在会议上就这么做，或者只要你能得到的机会就这么做</li>
<li>保证『曝光度』 —— 定期与老板会面，确保你经常被注意到 </li>
</ul>
</li>
<li>自学<ul>
<li>不要只学软件开发，领导力、管理和商科同样重要</li>
<li>不要忘记分享自己学到的东西 </li>
</ul>
</li>
<li>成为问题的解决者<ul>
<li>成为永远能为各种问题找到解决方案的人，成为勇于执行这些解决方案以获得成果的人</li>
</ul>
</li>
<li>关于政治<ul>
<li>脚踏实地成为一个真正有价值的员工要比弄虚作假好得多</li>
<li>至少应该知道会发生什么，哪种人需要避开，哪种人永远不要有交集</li>
</ul>
</li>
</ul>
<h3 id="成为专业人士"><a href="#成为专业人士" class="headerlink" title="成为专业人士"></a>成为专业人士</h3><p>成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑作斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</p>
<p>专业人士的品质</p>
<ul>
<li>遵守自己的原则</li>
<li>专注于正确完成工作</li>
<li>不惧怕承认自己错了，不会文过饰非</li>
<li>持续稳定</li>
<li>勇于承担责任</li>
<li>时间管理技能</li>
<li>追求品质，完善自我</li>
</ul>
<h3 id="请勿陷入对技术的狂热之中"><a href="#请勿陷入对技术的狂热之中" class="headerlink" title="请勿陷入对技术的狂热之中"></a>请勿陷入对技术的狂热之中</h3><ul>
<li>至少在历史的某个时间点，每项技术都被看作是那个时代里『好的』甚至是『伟大的』</li>
<li>没有理由去强烈坚持自己选择的技术就是最好的，而轻视甚至无视其他技术</li>
</ul>
<h2 id="如何自我营销"><a href="#如何自我营销" class="headerlink" title="如何自我营销"></a>如何自我营销</h2><p>自我营销的方式</p>
<ul>
<li>博客</li>
<li>播客</li>
<li>视频</li>
<li>给杂志投稿</li>
<li>书籍</li>
<li>代码库</li>
<li>技术会议</li>
</ul>
<h3 id="打造引人注目的品牌"><a href="#打造引人注目的品牌" class="headerlink" title="打造引人注目的品牌"></a>打造引人注目的品牌</h3><p>品牌的四个要素：</p>
<ul>
<li>品牌所要传递的信息</li>
<li>品牌的视觉符号</li>
<li>品牌的一致性</li>
<li>品牌的曝光率</li>
</ul>
<h3 id="创建大获成功的博客"><a href="#创建大获成功的博客" class="headerlink" title="创建大获成功的博客"></a>创建大获成功的博客</h3><ul>
<li>每一个在乎自己职业生涯的软件开发人员都应该投资创建一个博客。</li>
<li>最大秘诀有且只有一个 —— 持之以恒</li>
<li>创建一个流动的博客文章主题列表。每当有新想法，就把它添加到这个列表中</li>
<li>善于运用社交媒体</li>
<li>你的主要目标：为他人增加价值<ul>
<li>给人们想要的东西。弄清人们的真实想法，透过现象看本质</li>
<li>把你工作成果的 90% 都做成免费的</li>
</ul>
</li>
<li>不要努力成为一个成功的人，而要努力成为一个有价值的人</li>
</ul>
<h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ul>
<li>通过动手实践和教会他人，我们能学得更好</li>
<li>教育的首要目标，并不在于『知』而在于『行』</li>
</ul>
<h3 id="体系背后的逻辑"><a href="#体系背后的逻辑" class="headerlink" title="体系背后的逻辑"></a>体系背后的逻辑</h3><p>为了掌握一门技术，需要了解以下三个要点：</p>
<ol>
<li>如何开始 —— 要想开始使用自己所学的，我需要掌握哪些基本知识</li>
<li>学科范围 —— 我现在学的东西有多宏大？在开始阶段，我不需要了解每个细节，但是如果我能对该学科的轮廓有大致的了解，那么将来我就能发现更多细节</li>
<li>基础知识 —— 不止在开始阶段，要想使用一项特定的技术，我需要了解基本的用户案例和最常见的问题，也需要知道自己学的哪 20% 就能满足 80% 的日常应用。</li>
</ol>
<h3 id="十步学习法"><a href="#十步学习法" class="headerlink" title="十步学习法"></a>十步学习法</h3><p>前六个步骤只做一次。</p>
<ul>
<li>第 1 步：了解全局</li>
<li>第 2 步：确定范围</li>
<li>第 3 步：定义目标</li>
<li>第 4 步：寻找资源</li>
<li>第 5 步：创建学习计划</li>
<li>第 6 步：筛选资源</li>
</ul>
<p>从第七到第十则需要根据第五步所制定的学习计划中的每个模块循环往复</p>
<ul>
<li>第 7 步：开始学习，浅尝辄止</li>
<li>第 8 步：动手操作，浅尝辄止</li>
<li>第 9 步：全面掌握，学以致用</li>
<li>第 10 步：乐为人师，融会贯通</li>
</ul>
<p>从寻找导师到成为导师。</p>
<h2 id="生产力"><a href="#生产力" class="headerlink" title="生产力"></a>生产力</h2><p>外行静坐等待灵感，其他人则唤起激情努力创作。</p>
<ul>
<li>一切始于专注</li>
<li>个人有个人的方式<ul>
<li>番茄工作法</li>
<li>如何处理重复性工作</li>
<li>如何处理长期工作 </li>
</ul>
</li>
<li>不要多任务并行</li>
<li>学习程序的优化策略（局部性原则，批处理）</li>
<li>停止任何并非真正的多任务并行的多任务并行</li>
</ul>
<p>浪费时间的</p>
<ul>
<li>电视</li>
<li>各种综艺节目</li>
<li>社交网站</li>
<li>新闻网站</li>
<li>不必要的会议</li>
<li>烹饪</li>
</ul>
<h2 id="理财"><a href="#理财" class="headerlink" title="理财"></a>理财</h2><ul>
<li>拒绝短期思维</li>
<li>先出价者输</li>
<li>一定要弄清楚自己值多少钱</li>
</ul>
<h2 id="书单"><a href="#书单" class="headerlink" title="书单"></a>书单</h2><ul>
<li>The War of Art, Steven Pressfield</li>
<li>Think and Grow Rich, Napoleon Hill</li>
<li>Psycho-Cybernetics, Maxwell Maltz</li>
<li>Atlas Shrugged, Ayn Rand</li>
<li>Rich Dad, Poor Dad</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不要给自己设限</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常好的一本书，即使不是程序员，也应该读一读。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="程序员" scheme="http://wdxtub.com/tags/%E7%A8%8B%E5%BA%8F%E5%91%98/"/>
    
      <category term="书摘" scheme="http://wdxtub.com/tags/%E4%B9%A6%E6%91%98/"/>
    
      <category term="软技能" scheme="http://wdxtub.com/tags/%E8%BD%AF%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>第二十六周 - 彩虹</title>
    <link href="http://wdxtub.com/2016/12/09/rainbow-again/"/>
    <id>http://wdxtub.com/2016/12/09/rainbow-again/</id>
    <published>2016-12-09T01:02:22.000Z</published>
    <updated>2016-12-09T14:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>身为一道彩虹，雨过了就该闪亮整片天空。请天空给我，请时间给我，再多一点停留。</p>
<a id="more"></a>
<hr>
<p>又一次以《彩虹》为本周的主题曲，唯一不同的是，上次是上海彩虹合唱团的<a href="http://wdxtub.com/2016/07/29/rainbow/">彩虹</a>，这次是动力火车的彩虹。</p>
<p>这周过得并不轻松，却很重要。想起快五个月之前写的<a href="http://wdxtub.com/2016/07/18/kalpa/">《渡劫》</a>一文，那时正值我刚开始工作不久，因为发烧在公司晕倒，躺在救护车上到医院打吊针直到深夜。竟又体验了当时的感觉：</p>
<blockquote>
<p>看见、听见、碰见，却无从改变，这种无力感，才是最令人痛苦的。</p>
</blockquote>
<p>唯一不同的是，这次是心病。可我大约是永远乐观的，在文章最后还写着：</p>
<blockquote>
<p>古印度传说世界经历若干万年毁灭一次，重新再生，这一周期为一劫。EVA 有一个剧场版的副标题叫做『死与新生』，另一个剧场版的副标题叫做『真心为你』。劫总是在的，渡的唯一方法，就是一直走下去，直到走不动了，倒下了，再重新站起来的时候，一切便不一样了。</p>
</blockquote>
<p>肉体承受痛苦时，心灵会坚强；而内心承受痛苦时，肉体也许会迸发出自己都未曾意识到的能量。跑步回家的时候，居然连续两天把配速跑进了四分半以内，这可是我一直想要达到但是却从未达到的成绩！我不由得想起当年爸爸的叮嘱，原话不太记得，大意是年轻的时候应该走四方闯江湖，而不是在儿女情长的温柔乡中丧失斗志。</p>
<p>猛然惊醒，原来安逸的生活是这么容易让人沉醉。</p>
<p>所以一面痛苦着从过去抽离，一面重新找回了侵略性。不再睡午觉了，虽然中午时间短，但是还是可以挤出一个多小时来整理构思新书的材料和思路，加上早上和晚上的时间，每天能有四到五个小时，书本的进度也大大加快了。工作上，从一直以来的单机选手（之前负责的项目基本都是整个项目完全我一个人来折腾），忽然成了一个小团队的负责人，而且直接跟研发的老大汇报，感觉自己的进步还是非常快的。更重要的是，能天天跟老司机们混在一起，极大开拓了我的视野，同时也逼迫着我用更深刻的思考去项目真正的需要。</p>
<p>虽然作为一个内部实验性质的系统，技术上的难度不算高，但是工程上的难度却不低，毕竟这个项目的需求，真的是砍我也不能砍需求的那种需求。这就意味着，我的系统设计一定要足够灵活的同时还要保证实现的快速简便。我不得不再次开始大包大揽，从架构到运维，从公式推导到数据校验，从前端到后端，居然在一个多月的时间，用之前从来没有大规模使用过的 Go 语言，把项目基本完成了不说，顺带还折腾出来了一套工具库。今天下班前提交完代码之后，看着整齐的数据，真的有种涅磐的感觉。</p>
<p>有个小插曲，另一个老大把我拉到电脑前，指着 excel 图表问我屏幕上的柱状图有什么问题。我当时感觉完蛋了，统计学宝宝半路出家不靠谱啊，于是抱着试试看的心态说了一个我感觉比较可疑的地方，没想到居然对了！老大一脸欣慰地说：嗯这就是我要考你的地方。</p>
<p>虽然只是很小的一个事情，但是那一瞬间我忽然觉得我的积累终于融会贯通了，这是我一直想要达到，却没有达到的境界。而那之后的几天，我轻松愉快一次性就做完了系统 50% 最核心的功能，把整个运算引擎给写出来了。</p>
<p>天天跟数据打交道，但忽然意识到所谓『数据科学家』，越纯粹，就越难创造价值，因为当数据脱离了业务成为了炫技之后，数字再精确，模型再优美，又有什么意义呢？</p>
<p>很多技术人容易进入一种『自己造的轮子最圆』的循环，这种思路可以锻炼能力，却无法做出突破，走在别人走过的路上，哪怕是用跑的，可能也看不到新的风景。在这样一个知识爆炸的年代，学会站在巨人肩上，也许比一味埋头苦干更重要。所以当一个技术人真正把已有的东西用好，而不是一言不合就开始自己造轮子的时候，也许才进入了另一个台阶。</p>
<p>我不属于那种『技术至上』的人，因为我意识到把事情做成做好，技术所占据的比例是有限的。正因为技术最终要作用于人，而人并非数字逻辑可以建模的，所以更应该把最多的时间和精力投入到从技术到人的转换过程中。也就是说，弄清楚别人要什么，然后用手头上的东西，把别人要的东西做好，甚至超出预期。</p>
<p>可能是害怕我触底反弹得太高，浑浑噩噩买错车票着实像一桶冷水把我带回现实世界。也许真的给自己太大压力了，是时候让紧绷的心弦稍微松一些了。</p>
<p>写计算机系统发展历史的时候，我愈发不满意为什么大部分国内的教材简单粗暴把几代计算机列上去就完事儿的做法。教育的最高境界是让同学热爱一门学科，而计算机系统发展历史本来是如此令人激情澎湃的故事会，却被硬生生压缩成八股文，我觉得随便讲几个故事，就足够把计算机系统之美和复杂展现给大家了。所以这次我会做一些改变，从算筹到打孔卡片，从模拟到数字，从 Fortran 到 Heartbleed，从 System/360 到 Apple Watch 多角度展现计算机系统的发展历史。目标大约是，让导论的第一章，不至于成为同学们看都不愿意看的章节。</p>
<p>好消息是，这个周末，第一章，也是全书最高屋建瓴的一章，初稿就可以完成了。</p>
<p><img src="/images/2011-gz.jpeg" alt="2011-gz"></p>
<p>整理照片的时候，忽然看到五年前在飞机上拍的一张照片。不由得想，原来在发生了这么多事情之后，才过了五年啊，又想，居然这样就过去了五年了。五年前我应该畅想过很多种可能，但是没有一个接近于现在的状况。因为能力所限，预测未来本来就是不靠谱的吧，所以还是随心而动，一路勇往直前吧。</p>
<p>下一次下雨，你能看见的，那道彩虹，不再可能是我。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;身为一道彩虹，雨过了就该闪亮整片天空。请天空给我，请时间给我，再多一点停留。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【血战钢锯岭】再救一个</title>
    <link href="http://wdxtub.com/2016/12/08/hacksaw-ridge/"/>
    <id>http://wdxtub.com/2016/12/08/hacksaw-ridge/</id>
    <published>2016-12-08T14:44:06.000Z</published>
    <updated>2016-12-11T23:19:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>『看到战友的笑容，我觉得这就是最好的回报』。</p>
<a id="more"></a>
<hr>
<p><img src="/images/14812111986039.jpg" alt=""></p>
<p>作为从小在部队大院长大的孩子，对于战争片有着天然的执着，这种感觉可能只能跟同在部队大院长大的孩子共享。还记得小时候早晚必有的号声，虽然早已因为『扰民』而取消，但时至今日，听到类似的集结号，还是会有心潮澎湃的感觉。</p>
<p>考虑到我是坚定的无神论者，对影片中的信仰问题就不做过多的讨论，不过无论信什么，只要不是倒行逆施的信仰，我至少是不反对的。</p>
<p>先前觉得电影节奏有些拖沓，但仔细想想，前面的爱情戏码越是老派越是温情，才更能凸现后面战争的残忍。尤其是男主的懵懂青涩，真的让人有种回到过去的感觉。而训练营的部分就有点用力不足了，我感觉完全可以缩短十分钟，很多桥段有说不出的怪异感，作为战争部分的预热，显然是有些暖场气温不够的。</p>
<p>但是战争戏一下子把前面的温情与矛盾完全抹去，血与肉，爆炸与火焰，简单粗暴，爽吗？并不爽，反而让人对战争产生深深的厌恶，我见过的最可怕的战争场景大概就是这里了，几乎全程都紧紧抓着外套捂着嘴吧。</p>
<p>正当我纳闷怎么表现男主拯救世界的时候，日军气势汹汹的反扑配合上无差别炮火掩护，留下了各种伤兵和清理战场的日军。于是，战地最强『奶妈』就登场了。但即使是这样『硬点』的英雄，在第一次完成救人之后，仍旧是迷茫的。我想任何课本和学校都无法教会人们如何去面对这样的情景。</p>
<p>于是男主每次喊出『再一个』『再一个』『再一个』的时候，我都特别为他捏一把汗，毕竟《美国狙击手》最后的结局实在太令人难过了。</p>
<p>钢锯岭拿下来了，英雄也凯旋归来了。</p>
<p>我在回家的路上不由得暗念：好男儿报国在今朝！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;『看到战友的笑容，我觉得这就是最好的回报』。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="战争" scheme="http://wdxtub.com/tags/%E6%88%98%E4%BA%89/"/>
    
      <category term="信仰" scheme="http://wdxtub.com/tags/%E4%BF%A1%E4%BB%B0/"/>
    
  </entry>
  
  <entry>
    <title>计算机科学名人堂</title>
    <link href="http://wdxtub.com/2016/12/07/cs-hall-of-fame/"/>
    <id>http://wdxtub.com/2016/12/07/cs-hall-of-fame/</id>
    <published>2016-12-07T13:29:07.000Z</published>
    <updated>2016-12-08T14:38:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>纵观计算机发展历史，可真是『天才引导的历程』，一路走来，星光熠熠。本文介绍计算机科学中那些可以入选『名人堂』的人物。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.07: 完成初稿</li>
</ul>
<p>收集了计算机领域比较重要的各大奖项的历年获奖人，大家可以从他们的工作中发现时代发展的轨迹。</p>
<h2 id="图灵奖得主"><a href="#图灵奖得主" class="headerlink" title="图灵奖得主"></a>图灵奖得主</h2><p>图灵奖(ACM A.M. Turing Award)是计算机协会（ACM）于1966年设立的奖项，专门奖励对计算机事业作出重要贡献的个人。其名称取自世界计算机科学的先驱、英国科学家、英国曼彻斯特大学教授艾伦·图灵（A.M. Turing），这个奖设立目的之一是纪念这位现代计算机科学的奠基者。获奖者必须是在计算机领域具有持久而重大的先进性的技术贡献。大多数获奖者是计算机科学家。是计算机界最负盛名的奖项，有“计算机界诺贝尔奖”之称。</p>
<ul>
<li>1966年 - 艾伦·佩利(Alan J. Perlis) - 高级程序设计技巧，编译器构造</li>
<li>1967年 - 莫里斯·威尔克斯(Maurice V. Wilkes) - 存储程序式计算机EDSAC，程序库</li>
<li>1968年 - 理查德·卫斯里·汉明(Richard Hamming) - 数值方法，自动编码系统，错误检测和纠错码</li>
<li>1969年 - 马文·闵斯基(Marvin Minsky) - 人工智能</li>
<li>1970年 - 詹姆斯·维尔金森(James H. Wilkinson) - 数值分析，线性代数，倒退错误分析</li>
<li>1971年 - 约翰·麦卡锡(John McCarthy) - 人工智能</li>
<li>1972年 - 艾兹格·迪科斯彻(Edsger Dijkstra) - 程序设计语言的科学与艺术</li>
<li>1973年 - 查理士·巴赫曼(Charles W. Bachman) - 数据库技术</li>
<li>1974年 - 高德纳(Donald E. Knuth) - 算法分析、程序设计语言的设计、程序设计</li>
<li>1975年 - 艾伦·纽厄尔(Allen Newell) 赫伯特·西蒙(Herbert A. Simon) - 人工智能，人类认知心理学和列表处理</li>
<li>1976年 - 迈克尔·拉宾(Michael O. Rabin) 达纳·斯科特(Dana S. Scott) - 非确定性自动机</li>
<li>1977年 - 约翰·巴克斯(John Backus) - 高级编程系统，程序设计语言规范的形式化定义</li>
<li>1978年 - 罗伯特·弗洛伊德(Robert W. Floyd) - 设计高效可靠软件的方法学</li>
<li>1979年 - 肯尼斯·艾佛森(Kenneth E. Iverson) - 程序设计语言和数学符号，互动系统的设计，运用 APL 进行教学，程序设计语言的理论与实践</li>
<li>1980年 - 东尼·霍尔(C. Antony R. Hoare) - 程序设计语言的定义与设计</li>
<li>1981年 - 埃德加·科德(Edgar F. Codd) - 数据库系统，尤其是关系型数据库</li>
<li>1982年 - 史提芬·库克(Stephen A. Cook) - 计算复杂度</li>
<li>1983年 - 肯·汤普逊(Ken Thompson) 丹尼斯·里奇(Dennis M. Ritchie) - UNIX 操作系统和 C 语言</li>
<li>1984年 - 尼古拉斯·沃斯(Niklaus Wirth) - 程序设计语言设计、程序设计</li>
<li>1985年 - 理查德·卡普(Richard M. Karp) - 算法理论，尤其是 NP-完全性理论</li>
<li>1986年 - 约翰·霍普克罗夫特(John Hopcroft) 罗伯特·塔扬(Robert Tarjan) - 算法和数据结构的设计与分析</li>
<li>1987年 - 约翰·科克(John Cocke) - 编译理论，大型系统的体系结构，及精简指令集（RISC）计算机的开发</li>
<li>1988年 - 伊凡·苏泽兰(Ivan Sutherland) - 计算机图形学</li>
<li>1989年 - 威廉·卡亨(William Morton Kahan) - 数值分析</li>
<li>1990年 - 费尔南多·考巴托(Fernando J. Corbató) - CTSS 和 Multics</li>
<li>1991年 - 罗宾·米尔纳(Robin Milner) - LCF，ML语言，CCS</li>
<li>1992年 - 巴特勒·兰普森(Butler W. Lampson) - 分布式，个人计算环境</li>
<li>1993年 - 尤里斯·哈特马尼斯(Juris Hartmanis) 理查德·斯特恩斯(Richard E. Stearns) - 计算复杂度理论</li>
<li>1994年 - 爱德华·费根鲍姆(Edward Feigenbaum) 拉吉·瑞迪(Raj Reddy) - 大规模人工智能系统</li>
<li>1995年 - 曼纽尔·布卢姆(Manuel Blum) - 计算复杂度理论，及其在密码学和程序校验上的应用</li>
<li>1996年 - 阿米尔·伯努利(Amir Pnueli) - 时序逻辑，程序与系统验证</li>
<li>1997年 - 道格拉斯·恩格尔巴特(Douglas Engelbart) - 互动计算</li>
<li>1998年 - 詹姆斯·尼古拉·格雷(James Gray) - 数据库与事务处理</li>
<li>1999年 - 弗雷德里克·布鲁克斯(Frederick P. Brooks,Jr.) - 计算机体系结构，操作系统，软件工程</li>
<li>2000年 - 姚期智(Andrew Chi-Chih Yao) - 计算理论，包括伪随机数生成，密码学与通信复杂度</li>
<li>2001年 - 奥利-约翰·达尔(Ole-Johan Dahl) 克利斯登·奈加特(Kristen Nygaard) - 面向对象编程</li>
<li>2002年 - 罗纳德·李维斯特(Ronald L. Rivest) 阿迪·萨莫尔(Adi Shamir) 伦纳德·阿德曼(Leonard M. Adleman) - 公钥密码学（RSA加密算法）</li>
<li>2003年 - 艾伦·凯(Alan Kay) - 面向对象编程</li>
<li>2004年 - 文特·瑟夫(Vinton G. Cerf) 罗伯特·卡恩(Robert E. Kahn) - TCP/IP协议</li>
<li>2005年 - 彼得·诺尔(Peter Naur) - Algol 60 语言</li>
<li>2006年 - 法兰西斯·艾伦(Frances E. Allen) - 优化编译器</li>
<li>2007年 - 爱德蒙·克拉克(Edmund M. Clarke) 艾伦·爱默生(Allen Emerson) 约瑟夫·斯发基斯(Joseph Sifakis) - 开发自动化方法检测计算机硬件和软件中的设计错误</li>
<li>2008年 - 芭芭拉·利斯科夫(Barbara Liskov) - 编程语言和系统设计的实践与理论</li>
<li>2009年 - 查尔斯·萨克尔(Charles Thacker) - 帮助设计、制造第一款现代PC</li>
<li>2010年 - 莱斯利·瓦伦特(Leslie Valiant) - 对众多计算理论所做的变革性的贡献\</li>
<li>2011年 - 犹大·伯尔(Judea Pearl) - 人工智能</li>
<li>2012年 - 沙菲·戈德瓦塞尔(Shafi Goldwasser) 西尔维·奥麦克林(Silvio Micali) - 由于在密码学和复杂理论领域做出创举性工作</li>
<li>2013年 - 莱斯利·兰伯特(Leslie Lamport) - 在提升计算机系统的可靠性及稳定性领域的杰出贡献</li>
<li>2014年 - 迈克尔·斯通布雷克 - 对现代数据库的概念和实践作出的根本性贡献</li>
<li>2015年 - 惠特菲尔德·迪菲(Whitfield Diffie) 马丁·赫尔曼(Martin E. Hellman) - 发明迪菲-赫尔曼密钥交换，对公开密钥加密技术有重大贡献</li>
</ul>
<h2 id="王选奖得主"><a href="#王选奖得主" class="headerlink" title="王选奖得主"></a>王选奖得主</h2><p>2005年设立。旨在表彰计算机领域取得重大理论、技术突破或获得重大科研成果的个人，是为纪念已故的王选院士而设。　CCF王选奖奖励的人应具备如下条件之一：</p>
<ol>
<li>在基础研究或应用基础研究方面有得到国内外同行公认的重大理论突破或做出原创性的研究成果；</li>
<li>有重大的技术发明或技术突破，通过原理性样机或系统，展示了新思想、新技术或新方法，被后来的研究者采纳，并最终影响了工业界。 </li>
<li>把新技术首次应用于某一领域，并在应用中效果显著，得到了一定的推广，形成了对产业或社会的重要影响。</li>
<li>在与信息化建设相关的计算机系统重大工程方面取得了创新性成果，产生了良好的经济或社会效益。</li>
</ol>
<p>历年得主</p>
<ul>
<li>2006年 - 胡伟武（龙芯2号增强型通用处理器） 赵有健（IPv6核心路由器） 朱建生（中国铁路客票发售和预订系统v5.0项目）</li>
<li>2007年 - 应明生（通讯并发系统中的拓扑结构、随机性与噪音） 唐卫清（PDSOFT 计算机辅助工厂设计系统）</li>
<li>2008年 - 孙育宁（信息设备资源共享协同服务国际标准研制）</li>
<li>2009年 - 孟小峰（纯XML数据库技术研究）</li>
<li>2010年 - 高文（北京大学教授 音视频研究、标准的制定和应用） 刘积仁（东北大学教授 软件新技术研发和研究成果在行业领域的推广与应用）</li>
<li>2011年 - 廖湘科（国防科技大学教授 高性能计算机和操作系统的研究及应用） 孙凝晖（中科院计算所研究员 集群高性能计算机领域的研究和应用）</li>
<li>2012年 - 刘庆峰（安徽科大讯飞 计算机语音技术领域的创新努力和突出贡献）</li>
<li>2013年 - 李彦宏（百度 全球最大的中文搜索引擎） 李晓明（北京大学教授 搜索引擎理论方面）</li>
<li>2014年 - 赵沁平（北京航空航天大学教授 建立了我国第一个基于广域网络的分布式虚拟环境） 雷军（小米科技董事长兼CEO 在手机硬件、人机交互方面有大量创新）</li>
<li>2015年 - 李建中（哈尔滨工业大学教授 海量数据的计算研究） 刘迎建（汉王科技公司 手写汉字识别技术）</li>
<li>2016年 - 李星（清华大学教授 互联网和下一代互联网科技领域的主要开拓者）</li>
</ul>
<h2 id="计算机先驱奖得主"><a href="#计算机先驱奖得主" class="headerlink" title="计算机先驱奖得主"></a>计算机先驱奖得主</h2><p>计算机先驱奖(Computer Pioneer Award)是 IEEE 计算机协会于 1981 年设立的奖项，兼顾了理论与实践，设计与工程实现，硬件与软件，系统与部件。奖励那些在概念真正流行起来的 15 年前就开始做出巨大贡献的人。</p>
<ul>
<li>1981年<ul>
<li>Jeffrey Chuan Chu - 电子计算机逻辑设计</li>
</ul>
</li>
<li>1982年<ul>
<li>Harry D. Huskey - 并行计算机 SWAC</li>
<li>Arthur Burks - 电子计算机逻辑设计</li>
</ul>
</li>
<li>1984年<ul>
<li>John Vincent Atanasoff - 有序串行内存的电子计算机</li>
<li>Jerrier A. Haddad - IBM 701</li>
<li>Nicholas C. Metropolis - 使用 ENIAC 解决了核能问题</li>
<li>Nathaniel Rochester - IBM 702 的架构师</li>
<li>Willem L. van der Poel - 串行电脑 ZEBRA</li>
</ul>
</li>
<li>1985年<ul>
<li>John G. Kemeny - BASIC 语言</li>
<li>John McCarthy - LISP 语言与人工智能</li>
<li>Alan Perlis    - 计算机语言翻译</li>
<li>Ivan Sutherland - 图像化绘图板</li>
<li>David J. Wheeler - 汇编语言编程</li>
<li>Heinz Zemanek - Mailüfterl 计算机及编程语言</li>
</ul>
</li>
<li>1986年<ul>
<li>Cuthbert C. Hurd - 计算</li>
<li>Peter Naur - 计算机语言开发</li>
<li>James H. Pomerene - IAS 和 Harvest 电脑</li>
<li>Adriann van Wijngaarden - ALGOL 68 </li>
</ul>
</li>
<li>1987年<ul>
<li>Robert E. Everett - Whirlwind</li>
<li>Reynold B. Johnson - RAMAC</li>
<li>Arthur L. Samuel - 自适应非数值处理</li>
<li>Niklaus E. Wirth    - Pascal 语言</li>
</ul>
</li>
<li>1988年<ul>
<li>Friedrich L. Bauer - 计算机栈</li>
<li>Marcian E. Hoff, Jr. - 芯片上的微处理器</li>
</ul>
</li>
<li>1989年<ul>
<li>John Cocke    - 指令流水线和 RISC 概念</li>
<li>James A. Weidenhammer - 高速 I/O 机制</li>
<li>Ralph L. Palmer - IBM 604 电子计算器</li>
<li>Mina S. Rees &amp; Marshall C. Yovits &amp; F. Joachim Weyl &amp; Gordon D. Goldstein - 自 1946 年开始进行的 ONR 计算机研发</li>
</ul>
</li>
<li>1990年<ul>
<li>Werner Buchholz - 计算机架构</li>
<li>C.A.R. Hoare - 编程语言定义</li>
</ul>
</li>
<li>1991年<ul>
<li>Bob O. Evans - 兼容电脑</li>
<li>Robert W. Floyd - 编译器</li>
<li>Thomas E. Kurtz - BASIC 语言</li>
</ul>
</li>
<li>1992年<ul>
<li>Stephen W. Dunwell - Project stretch</li>
<li>Douglas C. Engelbart - 人机交互</li>
</ul>
</li>
<li>1993年<ul>
<li>Erich Bloch    - 高速计算</li>
<li>Jack S. Kilby - 合作发明了集成电路</li>
<li>Willis H. Ware - 设计了 IAS 和 JOHNNIAC 电脑</li>
</ul>
</li>
<li>1994年<ul>
<li>Gerrit A. Blaauw    - IBM System/360 系列</li>
<li>Harlan B. Mills - 结构化编程</li>
<li>Dennis M. Ritchie &amp; Ken L. Thompson - Unix</li>
</ul>
</li>
<li>1995年 <ul>
<li>Gerald Estrin - 早期计算机</li>
<li>David Evans - 计算机图形学</li>
<li>Butler Lampson - 个人电脑</li>
<li>Marvin Minsky - 人工智能</li>
<li>Kenneth Olsen - 迷你电脑</li>
</ul>
</li>
<li>1996年（今年主要是冷战结束后给老对手颁发安慰奖）<ul>
<li>Angel Angelov - 保加利亚的计算机科学</li>
<li>Richard F. Clippinger - 在 Aberdeen Proving Ground 把 ENIAC 转化成一个程序</li>
<li>Edgar Frank Codd - 数据库管理的抽象模型</li>
<li>Norber Fristacky - 数码设备</li>
<li>Victor M. Glushkov - 计算机架构的数字自动化</li>
<li>Jozef Gruska - 计算理论和有组织的活动</li>
<li>Jiri Horejs - 信息论与计算机科学</li>
<li>Lubomir Georgiev Iliev - 第一个保加利亚的计算机，抽象数学和软件</li>
<li>Robert E. Kahn - TCP/IP 协议和 Internet</li>
<li>László Kalmár - 1956 逻辑机器，在匈牙利设计 MIR 电脑</li>
<li>Antoni Kilinski - 波兰的商业化电脑，大学的计算机科学</li>
<li>László Kozma - 1930 relay machines, 战前匈牙利的早期电脑</li>
<li>Sergey A. Lebedev - 苏联的计算机事业</li>
<li>Alexey A. Lyaponov - 苏联的控制论和编程</li>
<li>Romuald W. Marczynski - 波兰的数字计算机和计算机架构</li>
<li>Grigore C. Moisil -  逻辑交换电路</li>
<li>Ivan Plander - 斯洛伐克的计算机硬件技术</li>
<li>Arnold Reitsakas    - Estonia’s computer age</li>
<li>Antonin Svoboda - 捷克斯洛伐克的计算机研究</li>
</ul>
</li>
<li>1997年<ul>
<li>Homer (Barney) Oldfield - 银行应用 ERMA 和计算机制造</li>
<li>Francis Elizabeth (Betty) Snyder-Holberton - Univac 电脑的排序生成器</li>
</ul>
</li>
<li>1998年<ul>
<li>Irving John (Jack) Good - Colossus 和 Manchester Mark I</li>
</ul>
</li>
<li>1999年<ul>
<li>Herbert Freeman - SPEEDAC of Sperry Corporation，计算机图形学和图像处理</li>
</ul>
</li>
<li>2000年<ul>
<li>Harold W. Lawson - 指针变量的发明</li>
<li>Gennady Stolyarov - Minsk 系列电脑的软件</li>
<li>Georgy Lopato - Minsk 系列电脑的硬件</li>
</ul>
</li>
<li>2001年<ul>
<li>Vernon Schatz - 电子资金转移，使得银行可以进行数字交易</li>
<li>William H. Bridge - GE DATANET-30 计算机和交流技术</li>
</ul>
</li>
<li>2002年<ul>
<li>Per Brinch Hansen - 操作系统和并发编程</li>
<li>Robert W. Bemer - ASCII 码和转义序列</li>
</ul>
</li>
<li>2003年<ul>
<li>Martin Richards - 系统软件可移植化</li>
</ul>
</li>
<li>2004年<ul>
<li>Frances E. Allen - 编译器优化的理论与实践</li>
</ul>
</li>
<li>2006年<ul>
<li>Mamoru Hosaka - 日本的计算事业</li>
<li>Arnold M. Spielberg - 实时数据获取和记录</li>
</ul>
</li>
<li>2008年<ul>
<li>Betty Jean Jeanings Bartik - ENAIC 的程序员</li>
<li>Edward J. McCluskey - 五十年来设计综合数字系统</li>
<li>Carl A. Petri - Petri 网络理论 (1962) 和并行/分布式计算</li>
</ul>
</li>
<li>2009年<ul>
<li>Jean E. Sammet - 最早的编程语言开发者</li>
<li>Lynn Conway - 对超标量架构的突出贡献，包括多发射动态指令调度</li>
</ul>
</li>
<li>2011年<ul>
<li>David Kuck - 并行架构</li>
</ul>
</li>
<li>2012年<ul>
<li>Cleve Moler    - 创造 MATLAB</li>
</ul>
</li>
<li>2013年<ul>
<li>Edward Feigenbaum - 知识库系统的开发和应用</li>
</ul>
</li>
<li>2014年<ul>
<li>Linus Torvalds - Linux 内核和开源</li>
</ul>
</li>
<li>2015年<ul>
<li>Michael J. Flynn    - 超过五十多年的 TCCA 和 SIGARCH 的老领导 </li>
<li>Peter M. Kogge - 多核处理器开发和计算机控制流水线</li>
</ul>
</li>
<li>2016年<ul>
<li>E. Grady Booch - 对象建模和 UML</li>
</ul>
</li>
</ul>
<h2 id="计算机历史博物馆-Fellow-Award-得主"><a href="#计算机历史博物馆-Fellow-Award-得主" class="headerlink" title="计算机历史博物馆 Fellow Award 得主"></a>计算机历史博物馆 Fellow Award 得主</h2><p>奖励那些改变世界的人，包括：计算、网络、软件、硬件、存储、编程语言等等</p>
<ul>
<li>1987年<ul>
<li>Grace Murray Hopper - 开发编程语言</li>
</ul>
</li>
<li>1995年<ul>
<li>Jay W. Forrester - 内存技术，早期计算机系统设计和开发</li>
</ul>
</li>
<li>1996年<ul>
<li>Mitch Kapor - 开发 Lotus 1-2-3</li>
<li>Ken Olsen - DEC 公司的共同创始人，为 Minicomputer 做出贡献</li>
</ul>
</li>
<li>1997年<ul>
<li>John Backus - FORTRAN，计算机系统理论和软件管理</li>
<li>Dennis Ritchie &amp; Ken Thompson - UNIX 和 C</li>
</ul>
</li>
<li>1998年<ul>
<li>Gene Amdahl - 为计算机架构和设计做的基本的工作，项目管理和领导力</li>
<li>Donald Knuth - 算法，TeX 语言和在数学和计算机科学领域的贡献</li>
<li>Gordon Moore - 设计和制造半导体设备，Fairchild 和 Intel 的共同创始人</li>
<li>Steve Wozniak - Apple 共同创始人，设计了 Apple I</li>
</ul>
</li>
<li>1999年<ul>
<li>Alan Kay - 个人电脑和人机界面</li>
<li>John McCarthy - 人工智能，分时系统</li>
<li>Konrad Zuse - 发明了第一个程序控制的高级语言 Plankalkul</li>
</ul>
</li>
<li>2000年<ul>
<li>Frances Allen - 并行电脑程序编译和优化</li>
<li>Vinton Cerf - 创造和发展了 Internet</li>
<li>Tom Kilburn - 随机访问存储，虚拟内存和 Multiprogramming</li>
</ul>
</li>
<li>2001年<ul>
<li>Frederick P. Brooks - 计算机架构，操作系统，软件工程</li>
<li>Jean Sammet - 编程语言及其历史</li>
<li>Sir Maurice V. Wilkes - 早期计算机设计</li>
</ul>
</li>
<li>2002年<ul>
<li>John Cocke - 精简指令集，程序优化</li>
<li>Charles Geschke &amp; John Warnock- 商业电脑，计算机图形和打印</li>
<li>Carver Mead - 自动化</li>
</ul>
</li>
<li>2003年<ul>
<li>Gordon Bell - 微型电脑的进化</li>
<li>Sir Tim Berners-Lee - 开发 WWW</li>
<li>David Wheeler - 架构设计，计算机测试</li>
</ul>
</li>
<li>2004年<ul>
<li>Erich Bloch - 工程管理</li>
<li>Dan Bricklin &amp; Bob Frankston- VisiCalc 电子表单</li>
<li>Bob Evans - 硬件，软件项目管理</li>
<li>Niklaus Wirth - 编程语言核算法</li>
</ul>
</li>
<li>2005年<ul>
<li>Paul Baran - Internet 架构</li>
<li>Douglas C. Engelbart - 人机交互，发明鼠标</li>
<li>Alan F. Shugart - 现代磁盘驱动器</li>
<li>Ivan E. Sutherland - Sketchpad 应用，计算机图形学</li>
</ul>
</li>
<li>2006年<ul>
<li>Sir Antony Hoare - 发明快速排序，编程语言</li>
<li>Robert Kahn - 在科学研究中利用网络</li>
<li>Butler Lampson - 工作站，操作系统，计算机安全，文档发布</li>
<li>Marvin Minsky - 人工智能，神经网络，机器人</li>
</ul>
</li>
<li>2007年<ul>
<li>Morris Chang - 开发独立半导体制作产业</li>
<li>John Hennessy - 工程教育，计算机架构</li>
<li>David Patterson - 工程教育，计算机架构</li>
<li>Charles (Chuck) Thacker - 领导开发 Xerox PARC Alto</li>
</ul>
</li>
<li>2008年<ul>
<li>Jean Bartik - 在 ENIAC 上编程</li>
<li>Bob Metcalfe - 发明、标准化核商业化以太网</li>
<li>Linus Torvalds - 创造 Linux 内核，开源</li>
</ul>
</li>
<li>2009年<ul>
<li>Donald Chamberlin - SQL 与数据库架构</li>
<li>Robert Everett - MIT Whirlwind 和 SAGE 计算机系统</li>
<li>Federico Faggin &amp; Marcian Hoff &amp; Stan Mazor &amp; Masatoshi Shima - 开发 Intel 4004，世界上第一个商业处理器</li>
</ul>
</li>
<li>2011年<ul>
<li>Whitfield Diffie &amp; Martin Hellman &amp; Ralph Merkle - 公钥加密</li>
<li>Bill Joy - BSD Unix 系统</li>
</ul>
</li>
<li>2012年<ul>
<li>Fernando Corbato - 分时系统，Multics 操作系统</li>
<li>Edward Feigenbaum - 人工智能，专家系统</li>
<li>Steve Furber &amp; Sophie Wilson- ARM 处理器架构</li>
</ul>
</li>
<li>2013年<ul>
<li>Edwin Catmull - 计算机图形，动画，电影制作</li>
<li>Harry D. Huskey - 计算系统</li>
<li>Robert W. Taylor - 计算机网络，在线信息和交流系统 </li>
</ul>
</li>
<li>2014年<ul>
<li>Lynn Conway - 集成电路设计</li>
<li>John Crawford - 工业标准微处理器架构</li>
<li>Irwin Jacobs - 数字电话通信技术</li>
</ul>
</li>
<li>2015年<ul>
<li>Charles W. Bachman - 早期数据库系统开发</li>
<li>Evelyn Berezin - 计算机设计</li>
<li>Bjarne Stroustrup - 创造 C++ 编程语言</li>
</ul>
</li>
<li>2016年<ul>
<li>David Cutler - 计算机架构，编译器，操作系统，软件工程</li>
<li>Lee Felsenstein - 早期个人电脑时代的影响力</li>
<li>Philip Moorby - 发明和提高 Verilog 这一硬件描述语言</li>
</ul>
</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Computer_Pioneer_Award" target="_blank" rel="external">Computer Pioneer Award</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9B%BE%E7%81%B5%E5%A5%96" target="_blank" rel="external">图灵奖</a></li>
<li><a href="http://www.computerhistory.org/fellowawards/hall/" target="_blank" rel="external">Hall of Fellows</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;纵观计算机发展历史，可真是『天才引导的历程』，一路走来，星光熠熠。本文介绍计算机科学中那些可以入选『名人堂』的人物。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="不周山" scheme="http://wdxtub.com/tags/%E4%B8%8D%E5%91%A8%E5%B1%B1/"/>
    
      <category term="名人" scheme="http://wdxtub.com/tags/%E5%90%8D%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>【小土刀的播客】零 Podcast 制作指南</title>
    <link href="http://wdxtub.com/2016/12/07/podcast-guide/"/>
    <id>http://wdxtub.com/2016/12/07/podcast-guide/</id>
    <published>2016-12-07T05:22:33.000Z</published>
    <updated>2016-12-07T13:18:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>我筹备一年多的播客项目终于要启动了！</p>
<a id="more"></a>
<hr>
<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>播客(Podcast)是类似广播的网络声讯节目，如果博客(Blog)是文字的游戏，那么播客(Podcast) 则是声音的游戏。五花八门的节目类型，真的是用耳朵去『看』世界。</p>
<p>最初的想法其实是做一档访谈视频节目，找我不同阶段的同学作嘉宾，内容是各自从前对生活的想法，现在的生活和未来的展望。一方面增进了同学感情，一方面大家都可以知道彼此在想什么，可能很多年之后回头看，是特别有趣的事儿。</p>
<p>如果说博客依赖的就是键盘，那么一步跨越到视频节目，绝对是会拉伤的。首先至少得有俩机位吧，得有俩麦克风吧，得有个场地吧，得有一俩工作人员吧。这么一想，现阶段基本是没有机会开展了。</p>
<p>但是播客就不同了，音频毕竟还是要比视频好处理多了，也没有太多时空上的限制，哪怕网络不稳定什么的，后期剪辑一下就好。什么场地啊化妆啊灯光啊都可以省了，就我一个业余主持人兼工作人员，还是凡事从简得好。</p>
<p>因为形式的转变，内容也有些变化。不过变来变去，都是一个非常『个人化』的节目。会聊我的童年、少年、青年，会找各行各业的朋友来聊聊自己的生活和工作。一直觉得，让年轻人了解其他人在做什么，了解不同的生活可能性是特别有意义的事情。世界给我们的条条框框已经很多，希望能在仅有的空间中，活得更自由些。</p>
<h2 id="一份不靠谱的播客制作指南"><a href="#一份不靠谱的播客制作指南" class="headerlink" title="一份不靠谱的播客制作指南"></a>一份不靠谱的播客制作指南</h2><p>注：本指南非常随性，更加详细靠谱的可以在参考链接中找到。</p>
<p>在这个硬件软件网络成本都很低的时代，做一『』播客节目基本没有什么难度，但是做一『档』播客节目就很难了，因为一档节目最需要的恰恰是无论哪个时代都很难的东西：坚持、知识与见解。</p>
<p>那么我打算怎么做呢？</p>
<ul>
<li>名字：第一步，节目名，Logo 和宣传语得定一下</li>
<li>主题：需要能够持续产生话题的内容。录之前理清思路<ul>
<li>回忆专辑：我和我的小伙伴的童年少年青年小学中学大学研究生</li>
<li>身边专辑：我和我的程序员小伙伴的日常吐槽</li>
<li>九零后专辑：我和我的九零后朋友们聊聊各行各业的工作</li>
</ul>
</li>
<li>时长：剪辑后约 45 - 60 分，不然会被说太短吧</li>
<li>结构：每期节目的具体内容编排<ul>
<li>片头（简单自我介绍，节目基本信息，联系方式，捐赠地址等等）</li>
<li>如果有听众来信，那么选读</li>
<li>如果有微博评论，那么选读</li>
<li>嘉宾自我介绍（我也许会插嘴吐槽）</li>
<li>正题部分（就是随意跟着我事先列的简略提纲聊一聊）</li>
<li>总结（总结下中心思想，升华下主题）</li>
<li>片尾（暂时还没想好）</li>
</ul>
</li>
<li>硬件：iPhone + 原配的耳机</li>
<li>网络存储：荔枝 FM</li>
<li>编辑器：GarageBand</li>
<li>运营：随缘运营法<ul>
<li>公众号：搞一下，还是要推送一下的</li>
<li>节目邮箱：会申请一个的</li>
<li>捐赠网址：就直接链接到我的博客了</li>
<li>微博：直接用我自己的微博</li>
<li>抽奖：那还是要抽的，不过准备礼物和发货有点略麻烦</li>
<li>时间轴：每期节目对应一篇博客，里面会附上节目内容的相关链接</li>
<li>周末更新：看心情</li>
<li>关注热点：考虑下，一般来说不关注</li>
<li>浏览各类信息：不浏览</li>
<li>阅读量：不在意</li>
<li>粉丝数量：不在意</li>
<li>交朋友：在意，希望能交到更多各行各业的朋友</li>
</ul>
</li>
</ul>
<p>这么看来，只要没有太多杂念，做个播客节目还是不难滴。</p>
<h2 id="推荐播客"><a href="#推荐播客" class="headerlink" title="推荐播客"></a>推荐播客</h2><p>我一直在寻找一个解决方案，来利用好上班/上学通勤的这段时间，毕竟每天也有一两个小时呢。阅读文字条件不允许，歌曲总有听厌的时候，网络电台早上都是天气交通新闻。一番寻寻觅觅，播客可谓完美解决了这个问题。</p>
<p>转眼间接触播客也快五年了，和身边朋友聊天的时候发现其实这还是颇为小众的信息源。考虑自己目前也正在筹备播客节目，所以希望能有更多的朋友来听听看，感受另一种信息获取的方式，说不定就喜欢上了呢？</p>
<p>均可在 Podcast 应用中搜索并订阅。</p>
<p><strong>内核恐慌</strong></p>
<blockquote>
<p>《内核恐慌》(Kernel Panic) 是由 IPN 出品、吴涛和 Rio 做的播客，首播于 2014 年 10 月。号称硬核，可也没什么干货。想听的人听，不想听的人就别听。</p>
</blockquote>
<p>吴涛和 Rio 大概是我最喜欢的节目主持人了！声音很好听，跑题能力也是一流，但是字里行间能听出来对技术满满的热情与追求。节目中聊的话题五花八门，有种老司机带带我的感觉，从键盘到字体，从文件系统到如何找女朋友，从编码到 WWDC。总而言之，如果你是一个自认为比较有趣的技术人，那么内核恐慌绝对不应该错过。</p>
<p><strong>太医来了</strong></p>
<blockquote>
<p>《太医来了》由 IPN 出品、由前骨科医生初洋和妇产科医生田吉顺主持，是中文互联网第一档医生谈话类播客。节目里没有老专家讲养生，只有几个医生聊聊医院里的事儿，顺便给大家做做科普。</p>
</blockquote>
<p>田吉顺是知乎上的高质量的答主之一，如果你觉得光看图文回答不过瘾，那么这档节目就是听医生说事儿的最佳选择。医疗和健康问题，还是要多去听听看医生怎么说，而不是听养生节目忽悠。</p>
<p><strong>味之道</strong></p>
<blockquote>
<p>《味之道》是由 IPN 出品、由席妙雅主持的美食播客，首播于 2014 年 6 月。美味是感性的体验，但同时需要开放的心态和眼界，以及精准的判断力。用味道来检验美食，不谈风月，不聊情怀。</p>
</blockquote>
<p>作为一个吃货，怎么吃，怎么好吃，都是必修课！如果平日工作太忙，不妨就听听专业人士的说法，毕竟咱们还可以按图索骥刻舟求剑嘛（这里贬义褒用）</p>
<p><strong>机核网 GADIO 游戏广播</strong></p>
<blockquote>
<p>国内首家游戏网络电台 最新最全的游戏新闻 热门游戏报道 游戏心得分享 以及业内最专业的游戏人访谈 涵盖所有游戏主机</p>
</blockquote>
<p>非常接地气且专业的游戏节目！素质高话题有趣涉猎范围广，唯一低的就是节操！如果你喜欢游戏，那么从这里可以找到游戏背后更有趣的故事。</p>
<p><strong>Teahour.fm</strong></p>
<blockquote>
<p>Teahour.fm 由Terry，玎玎, Daniel, Kevin 和滚滚主持，会专注程序员感兴趣的话题，包括 Web 设计和开发，移动应用设计和开发，创业以及一切 Geek 的话题。</p>
</blockquote>
<p>这一档界面虽然更新比较慢，但是基本每次都会请 IT/互联网业界的大牛来分享经验和历程，对于我这种初出茅庐的新兵蛋子来说，简直就是快速升级的十全大补丸。唯一的问题在于主持人有点多，我常常听着听着就混乱了，建议还是带上嘉宾三人以内比较好。</p>
<p><strong>一刻 talks</strong></p>
<blockquote>
<p>「一刻talks」正在邀请世界上的思想领袖与实干家来分享他们的事业、故事创意和想法，这些来自世界各地不同领域的专业人才和深藏不露的绝妙素人，将带来极具前瞻性的话题，把思想精华浓缩在15分钟，讲述知识与创意的精髓，碰撞思想的火花。目前已累积1500则以上的精彩演讲，主题包罗万象，科学家、艺术家、哲学家、探险家、心理学家、商业领袖等各路有想法的人纷纷登台，观点“响亮”，要给世界一点言色！</p>
</blockquote>
<p>简单来说，可以理解为音频版的 TED，我一直觉得，即使是做技术，也需要有视野和大局观，说不定就发现新世界了呢对不对！</p>
<p><strong>静雅思听</strong></p>
<blockquote>
<p>我们将城市大众，尤其是白领年轻人关心的一些热点问题，生活性、知识性及思想性的内容， 以MP3的形式提供给公众，让城市听众免费从我们的网站上下载下来，放在电脑或MP3中，在自己方便的时候收听，在所有现代城市人适合听，但不适合看的场合来听。内容涉及 ：历史、军事、健康保健、法制、情感、文化、汽车、旅游、生活常识、经济管理、 心理、医疗、营养、职业发展、教育、地理、科技等各个方面</p>
</blockquote>
<p>静雅思听是我最早接触的播客之一，也是我听得最久，甚至会专门下载来收藏的唯一的播客。内容非常丰富，天南海北五花八门，基本上来说，是听不完的，不过挑自己感兴趣的就好嘛！如果硬要说缺点，就是有些太专业了，像节目，不像前面几个是主持人唠唠嗑的感觉。播客这个事儿丰俭由人，挑自己喜欢的就好</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.qdaily.com/cooperation/articles/yidian/32869.html" target="_blank" rel="external">长假第 5 天，感觉现充的点份播客制作指南</a></li>
<li><a href="https://zhuanlan.zhihu.com/haohaoshuohua" target="_blank" rel="external">好好说话</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我筹备一年多的播客项目终于要启动了！&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wdxtub.com/categories/Life/"/>
    
    
      <category term="播客" scheme="http://wdxtub.com/tags/%E6%92%AD%E5%AE%A2/"/>
    
      <category term="好望角" scheme="http://wdxtub.com/tags/%E5%A5%BD%E6%9C%9B%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>【你的名字。】忘却</title>
    <link href="http://wdxtub.com/2016/12/04/your-name/"/>
    <id>http://wdxtub.com/2016/12/04/your-name/</id>
    <published>2016-12-04T08:42:35.000Z</published>
    <updated>2016-12-04T09:54:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>梦里相逢人不见，若知是梦何须醒。纵然梦里常幽会，怎比真如见一回。我很开心，新海诚终于学会讲故事了，动人的故事。</p>
<a id="more"></a>
<hr>
<p><img src="/images/14808417657233.jpg" alt=""></p>
<p>依然是招牌式的天空，回顾新海诚的几部重要作品，就会发现十几年间，一切都已改变，一切也未曾改变。《星之声(2002)》的成功使得新海诚崭露头角；两年后《云的彼端，约定的地方(2004)》却只能碎片化无头绪地讲故事；三年后《秒速五厘米(2007)》干脆放弃长篇故事，用三小节讲述了生活的焦虑和选择，回归现实并取得了重大成功；四年后《追逐繁星的孩子(2011)》却魔幻现实过了头，像是宫崎骏和庵野秀明没睡醒弄出来的；两年后《言叶之庭》终于说了一个起承转合的故事，但是一直以来的时空感没有了。</p>
<p>终于《你的名字。》把所有的一切融合了起来，用新海诚自己的话说就是：『每次制作新作品的时候，我都要想，这必须是一部此刻的自己做不出来的作品，并且又要想，这部作品如今的我肯定能制作出来。我想将这十几年经历的事，感受的东西，都在这部作品中反映出来。到了成年人的年纪，就想将自己曾经得到的东西，送给与曾经的自己相似的人。』</p>
<p>看完之后不得不祝贺，新海诚做到了，找到了自己的方向，叙事清晰，节奏感也很好，为难自己，却不再折磨观众。</p>
<blockquote>
<p>隐约雷鸣 阴霾天空 但盼风雨来 能留你在此<br>隐约雷鸣 阴霾天空 即使天无雨 我亦留此地</p>
</blockquote>
<p>以《万叶集》为引子，前作中我特别喜欢的语文老师在这个名为糸守的小镇中教着短歌，这次的主题是『黄昏之时』，黑板上写着的是『长月黄昏后，伫立露沾身；莫问我为谁，我自待伊人』。</p>
<p>糸守镇的特产是结绳，代表着时间的流动，扭曲、缠绕、还原、连接，也正是一直以来新海诚作品的主题：分离、找寻与相逢。</p>
<p>交换身体，平行世界，时空流转。星空，云海，匆匆行人，鳞次栉比的高楼，往来穿梭的电车。还是熟悉的配方，还是原来的味道。</p>
<p>但这次又有些不同，从《云的彼端，约定的地方》中的高塔、《秒速五厘米》中的樱花、《追逐繁星的孩子》中的宝石，到《言叶之庭》中的鞋子，贯穿作品系列的意象又多了一个——跨越时空的结绳发带。新海诚终于把前几作精彩的部分抽出来，融合到了一个完整的故事中，要是我一个人在家看，恐怕是早已泪如雨下吧。</p>
<p>最后说三个小细节吧。</p>
<ol>
<li>三叶去供奉的身体和《追逐繁星的孩子》中的生死门非常类似，都是巨大圆环中央。正当我以为又会是一个生死相隔的故事的时候，还是通过平行世界圆了我想要大团圆的梦。但是细细想来，聚散离合生死无常，我们也只能慢慢去学着接受吧。</li>
<li>在彗星碎块摧毁小镇之后，三叶的消失让我想到《合金装备 V 幻痛》中的 Quiet 。她离开之后，曾经的一切痕迹仿佛都像不曾存在过一样。这种曾经的存在都不存在的感觉是非常让人绝望的，就好像自己的一半被暮然抽走一样。没有办法生活在电影里的我们，也只能慢慢去学着接受吧。</li>
<li>从《言叶之庭》开始有意融入的日本传统文化为作品增色不少，直接把意境这一栏填充满了。什么时候我们的电影也能做这样的文化输出呢？</li>
</ol>
<p>翻阅影评时看到了电影宣传小册子上的一段话：『这是一部献给所有正值青春期的年轻人和内心仍旧怀抱青春期残片的大人们的电影。我赌上了自己的全部来完成它的制作，希望大家能乐在其中。』</p>
<p>仿佛我又找回了被丢在角落里快要忘却的信念，要更加满怀憧憬地冲向下一段未知的旅程。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;梦里相逢人不见，若知是梦何须醒。纵然梦里常幽会，怎比真如见一回。我很开心，新海诚终于学会讲故事了，动人的故事。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="电影" scheme="http://wdxtub.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="新海诚" scheme="http://wdxtub.com/tags/%E6%96%B0%E6%B5%B7%E8%AF%9A/"/>
    
      <category term="找寻" scheme="http://wdxtub.com/tags/%E6%89%BE%E5%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>【追逐繁星的孩子】天亮了</title>
    <link href="http://wdxtub.com/2016/12/04/go-after-stars/"/>
    <id>http://wdxtub.com/2016/12/04/go-after-stars/</id>
    <published>2016-12-04T04:33:12.000Z</published>
    <updated>2016-12-04T08:39:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>转型对于任何人来说都不是简单的事情，这是新海诚又一次挑战剧情片，好坏且不说，这种尝试本身就值得肯定。</p>
<a id="more"></a>
<hr>
<p><img src="/images/14808261944849.jpg" alt=""></p>
<p>经历了《云的彼端，约定的地方(2004)》《秒速五厘米(2007)》和《言叶之庭(2013)》的洗礼，这部 2011 年的作品精准而清晰地插入了 2007 和 2013 之间的缝隙。每次新海诚出了剧情片之后，都要出一部文艺片回回血。所以不难想象，《秒速五厘米》大获成功之后，肯定又要来一部剧情片了，这就是本文的主角——《追逐繁星的孩子》。</p>
<p>之前的影评说过『长于细腻的新海诚，似乎一直不太能找到叙事的方法』，吸取了《云的彼端，约定的地方(2004)》的教训，这次总算是把故事说清楚了。但是给人的感觉却不再新海诚了，因为在寻寻觅觅之后才发现，宫崎骏老爷子早已在山的那边很久了。我想，这对于创意工作者来说，是特别难过的事情，就好像《伟大的悲剧》中英国人斯科特到达南极点却发现挪威人阿蒙森早已拔得头筹那样。不过话说回来，所有的初学者不都是从模仿开始的嘛。（插一句：我很高兴在《你的名字》中看到的进步）</p>
<p>实话说，除了标准的新海诚式天空和质量极高的配乐（依然是和天门合作），画风的改变一时间让我有些难以适应。但是随着剧情的展开，那种熟悉的感觉又回来了。然后我意识到，这些感觉已经深深和不同的意象结合起来了，或者说，正是如此才有了『意象』这个词。</p>
<p>熟悉的轨道、电车与火车，一方面代表着被拦住的路，一方面却又代表着通向远方的路。随风摇曳的风铃代表着思念，我却不由自主想到了<a href="http://wdxtub.com/2014/09/11/feng-ling-zhong-de-dao-sheng-clip/">《风铃中的刀声》</a>。曾经的守护者因为失去了『心』而变成了怪物，面目可憎的夷族因为见不得阳光不得不蛰伏在地下，老师和瞬的弟弟最终选择了不停流浪的生活，明日菜却回到了原来的世界。</p>
<p>最令我震撼的其实是明日菜突如其来的那句『只是太寂寞了』。</p>
<p>很直白，很露骨，却没有任何办法反驳。有这样一个帅气的小英雄在危难之中出现，还送上了一个吻，从小独立坚强的明日菜仿佛看到了新世界的亮光，于是再也不肯放下。正因为她孤独，所以才会不顾一切去追寻。看着丧妻的老师即使失去眼睛也要再见妻子一面，才意识到也许所有的执念的根源都来自于寂寞吧。</p>
<p>因为寂寞，所以有了分离、孤独和找寻。生与死的分离，地上与地下的分离，有得必有失；黑暗中蹒跚前进的孤独，爬下通向生死门的孤独，在追逐中消逝；拿着宝石对不可思议音乐的找寻，牺牲一切只求一个结果的找寻，也许只是大梦一场。</p>
<p>突然，幸福和悲伤的感觉都一起涌上来。我才意识到，分离、孤独和找寻固然是重要的主题，但我却一直漏掉了最重要的主题——相逢。</p>
<p>因为向往没有去过的地上，瞬用生命的代价为明日菜留下了一个吻，这是一种相逢。因为对亡妻的思念，老师十年来苦苦追寻终于在生死门前再次见到了夫人，这是一种相逢。因为经历了奇幻且不可思议的冒险，明日菜对着妈妈笑容，也是一种相逢。</p>
<blockquote>
<p>生死门虽繁星灿烂，但活着的人才是最重要。<br>我们会幸福，会痛苦，但一定要活下去，缅怀逝者，珍惜生者，承受着丧失，继续存活，人就是这样的生物啊。我们是如此渺小，可正是因为太过渺小，才要愈发珍惜。</p>
</blockquote>
<p>天亮了。明日菜，你要走了吗？</p>
<p>是的，再见。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转型对于任何人来说都不是简单的事情，这是新海诚又一次挑战剧情片，好坏且不说，这种尝试本身就值得肯定。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="告别" scheme="http://wdxtub.com/tags/%E5%91%8A%E5%88%AB/"/>
    
      <category term="电影" scheme="http://wdxtub.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="新海诚" scheme="http://wdxtub.com/tags/%E6%96%B0%E6%B5%B7%E8%AF%9A/"/>
    
  </entry>
  
  <entry>
    <title>【云的彼端，约定的地方】醒来</title>
    <link href="http://wdxtub.com/2016/12/04/cloud-other-side/"/>
    <id>http://wdxtub.com/2016/12/04/cloud-other-side/</id>
    <published>2016-12-04T00:31:02.000Z</published>
    <updated>2016-12-04T02:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>逆着时间走，秒速五厘米上映的三年前，新海诚披着科幻的皮，还是在诉说那个悲伤却圆满的故事。不由得想起古龙的那句话『故事情节的变化有穷尽时，只有情感的冲突才永远能激动人心』。</p>
<a id="more"></a>
<hr>
<p><img src="/images/14808114689811.jpg" alt=""></p>
<p>从《言叶之庭》到《秒速五厘米》再到《云的彼端，约定的地方》，倒序连着看新海诚的三部作品，才意识到这些所有作品本来就只是他为自己制作的，只是恰好击中了大家心底柔软的部分罢了。这样一想，片中大量的意识流、留白和跳跃也就理所当然了，毕竟在想象的世界中，很多东西一点都不重要，不需要画，也不需要说。</p>
<p>当然，毕竟要上映毕竟要挣钱，所以影片中还是努力想要把故事说清楚的，只是长于细腻的新海诚，似乎一直不太能找到叙事的方法。稍微回顾一下几部作品令人记忆深刻的地方，就会发现凡是涉及稍微长一些的故事主线的时，大约都是以简单的『几年后』一笔带过的。反而是那些小场景的设置，令人拍手叫绝。从《言叶之庭》的雨中的凉亭和楼梯的拐角，到《秒速五厘米》的铁轨和杂货店，再到《云的彼端，约定的地方》的工厂和病房，充盈的细节与恰到好处的节奏把控，像靶靶十环的开弓箭，把记忆中美好的与糟糕的串在一起，在击中靶心的那一刻因为惯性全部融汇在一起，像火箭发射后巨大的烟雾，逐渐消散后，发现天依然很蓝。</p>
<p>《云的彼端，约定的地方》的科幻设定有不少硬伤，或者说，科幻在这里的作用仅仅是为了烘托气氛制造冲突，并不是故事的重点。看到各种吐槽设定的影评时，我反而觉得他们因为不能够接受他人的天马行空而错过了更重要的东西。平行宇宙的故事已经太多，研究所和黑科技也颇有《新世纪福音战士》的感觉，但这些再离谱，也就相当于背景板的几棵树，所有的背景设定都是为了营造一场分离，一种孤独，一次找寻。</p>
<p>分离是什么？也许是《言叶之庭》中无法跨越的师生差距，也许是《秒速五厘米》中因为大雪停运的电车，也许是《云的彼端，约定的地方》中三年时间带来的天翻地覆。</p>
<p>孤独是什么？也许是《言叶之庭》中做好却没法送出去的鞋子，也许是《秒速五厘米》中被风吹走的装满思念的信，也许是《云的彼端，约定的地方》中一个人在平行世界中逡巡。</p>
<p>找寻是什么？也许是《言叶之庭》中每一个期盼下雨的清晨，也许是《秒速五厘米》中没有收件人的短信，也许是《云的彼端，约定的地方》中最终在天空飞翔的自制飞行器。</p>
<p>突然意识到，新海诚只是一直在一次又一次诉说着相同的故事，但是每次依然动人。我不由得想知道这其中的奥秘。最后发现其实哪有什么奥秘，不过是心里装着美好的希冀，自然而然的真情流露罢了。还是古龙写的好：</p>
<blockquote>
<p>中原的四月，正如三月的江南，莺飞草长，正是春光最艳，春色最浓的时候，只可惜这时候春又偏偏已将去了。夕阳最美时，也总是将近黄昏。世上有很多事都是这样子的，尤其是一些特别辉煌美好的事。所以你不必伤感，也不用惋惜，纵然到江湖去赶上了春，也不必留住它。因为这就是人生，有些事你留也留不住。你一定要先学会忍受它的无情，才会懂得享受它的温柔。</p>
</blockquote>
<p>云的彼端，约定的地方是一座高塔。故事的最后，这座高塔却已不复存在了。没有了约定的地方，生活也将重新开始了。约定的从来不是一个地方，而是共同的渴望。</p>
<p>醒来吧！浪子为君歌一曲，劝君切莫把泪流。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://movie.douban.com/review/1928206/" target="_blank" rel="external">剧情详解 - 新海诚从来都喜欢把观众当作已知剧情群体</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逆着时间走，秒速五厘米上映的三年前，新海诚披着科幻的皮，还是在诉说那个悲伤却圆满的故事。不由得想起古龙的那句话『故事情节的变化有穷尽时，只有情感的冲突才永远能激动人心』。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="电影" scheme="http://wdxtub.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="新海诚" scheme="http://wdxtub.com/tags/%E6%96%B0%E6%B5%B7%E8%AF%9A/"/>
    
      <category term="科幻" scheme="http://wdxtub.com/tags/%E7%A7%91%E5%B9%BB/"/>
    
  </entry>
  
  <entry>
    <title>【秒速五厘米】One More Time</title>
    <link href="http://wdxtub.com/2016/12/03/speed-5cm-second/"/>
    <id>http://wdxtub.com/2016/12/03/speed-5cm-second/</id>
    <published>2016-12-03T13:15:18.000Z</published>
    <updated>2016-12-03T14:53:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>后知后觉的我，在电影上映了快十年才第一次看了这部作品。也许是心境不同了吧，看到澄田在第二话结尾蜷缩着入睡，我终于能够说服自己，残留着夏天味道的十月下旬，已经永远地过去了。</p>
<a id="more"></a>
<hr>
<p><img src="/images/14807714020993.jpg" alt=""></p>
<p>最初接触新海诚的动画片是《言叶之庭》，缓慢的节奏，绝美的画面，文艺的台词配上抒情的音乐，从各个细节体现出日本人细腻的心思，因此是一部适合一个人慢慢看慢慢品味的电影。或者说，与其说是看电影，更不如说是看自己的记忆，那些埋藏在心底的瞬间，虽然有快乐有痛苦，但是拥有这样的回忆本身，就是一种幸福。</p>
<p>《秒速五厘米》的题材则与《言叶之庭》有很大的不同，虽然刚看了开头就已经猜到了结局，但是第二话『太空人』着实给了我太多太多的惊喜。仿佛看到过去和曾经的那个脸通红心过速的自己，一面想哭，一面想笑。想哭是因为很多事情即使再勇敢再努力也没有办法改变，那不如一开始就深埋心底；想笑是因为那个为了心底认定的事情拼命努力的自己，着实让我很开心。</p>
<p>不由得想起几年前写给自己的一封信，要好的朋友读完后曾说过那是我写得最好的一篇文章。那当然应该是最好的，不是每一篇文章都可以写两三年。想在再读当年的文字，依然有种莫名的亲切感。特别幼稚，特别天真，但是特别开心，那种透过纸面都能感受到的开心。一方面我努力让自己心理变得更强大更踏实，一方面却又憧憬着怀念着那样不知所措心烦意乱的自己。用理性武装自己可以百毒不侵，但却也少了许多趣味。</p>
<p>意识到自己在逐渐『异化』后，便很努力很努力想要进入『人化』的轨道，就好像我的 Github 签名那样——『一个死理性派的人化』。我变得像躲在墙角假装凑巧的澄田，变得像拿到新玩具迫不及待想要分享的小朋友，变得像希望回程的路能够再长一点的学生，变得像走过一个又一个灯柱但依然凑不齐勇气的自己。</p>
<p>很多当时的话，放到现在同样应景，真不知道是该开心还是不开心：</p>
<blockquote>
<p>命运的车轮忘了装刹车，一旦启动，便无法停下，甚至连转变方向，都很困难。于是我们在某一点交汇，在某一点分离。</p>
<p>等待是煎熬。时间却是良药。多么可笑的结论。</p>
<p>满怀希望，却又瞬间落空，才意识到，本是一场空。我在自己编织的梦境里已度过了太久，久得分不清什么是现实，什么是梦境。</p>
</blockquote>
<p>缘深缘浅，相聚别离，后会无期。</p>
<blockquote>
<p>One more time 季节啊 请不要变化<br>One more time 那嬉笑玩闹的岁月</p>
</blockquote>
<p>别给自己太多烦恼，过些日子就会好的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;后知后觉的我，在电影上映了快十年才第一次看了这部作品。也许是心境不同了吧，看到澄田在第二话结尾蜷缩着入睡，我终于能够说服自己，残留着夏天味道的十月下旬，已经永远地过去了。&lt;/p&gt;
    
    </summary>
    
      <category term="Movie" scheme="http://wdxtub.com/categories/Movie/"/>
    
    
      <category term="爱情" scheme="http://wdxtub.com/tags/%E7%88%B1%E6%83%85/"/>
    
      <category term="电影" scheme="http://wdxtub.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="新海诚" scheme="http://wdxtub.com/tags/%E6%96%B0%E6%B5%B7%E8%AF%9A/"/>
    
  </entry>
  
  <entry>
    <title>【不周山之计算机基础】计算机网络协议指南</title>
    <link href="http://wdxtub.com/2016/12/03/bzs-network-protocol-guide/"/>
    <id>http://wdxtub.com/2016/12/03/bzs-network-protocol-guide/</id>
    <published>2016-12-03T06:33:06.000Z</published>
    <updated>2016-12-04T00:29:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果说计算机科学中最重要的概念是抽象，那么『分层』绝对有资格争榜眼，再不济也是一个探花。计算机网络是最能代表『分层』思想的概念，本文我们就来了解一下计算机网络中的各种协议。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.03: 完成初稿</li>
</ul>
<h2 id="系列目录"><a href="#系列目录" class="headerlink" title="系列目录"></a>系列目录</h2><ul>
<li><a href="http://wdxtub.com/2016/12/03/bzs-linux-concept-guide/">Linux 概念指南</a></li>
<li><a href="http://wdxtub.com/2016/12/03/bzs-network-protocol-guide/">计算机网络协议指南</a></li>
</ul>
<h2 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h2><ol>
<li>了解计算机网络的几种分层模型</li>
<li>了解数据链路层、网络层、传输层和应用层的常见协议及其特性</li>
<li>学会利用命令查看基本的网络信息</li>
</ol>
<h2 id="分层模型"><a href="#分层模型" class="headerlink" title="分层模型"></a>分层模型</h2><p>网络通信是基于分层模型的。虽然不同的协议有不同的层级划分（甚至同一种协议也有不同的层级划分），但是都离不开分层。分层的好处有很多，最重要的是能够比较好控制具体实现的复杂度，由于每层之间由事先约定的接口通信，并不需要关心其他层的实现细节。</p>
<p>比较出名的分层模型有 <a href="https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B" target="_blank" rel="external">OSI 分层模型</a>和 <a href="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F" target="_blank" rel="external">TCP/IP 分层模型</a>，本文以 TCP/IP 的四层模型进行讲解，他们分别是：</p>
<ul>
<li>网络接口层(link layer): 以太网, Wi-Fi</li>
<li>网络互连层(internet layer): IP, ARP</li>
<li>传输层(transport layer): TCP, UDP, RTP, SCTP</li>
<li>应用层(application layer): HTTP, FTP, DNS</li>
</ul>
<p>下面就开始分别介绍这四层的基本概念和重要的协议。</p>
<h2 id="网络接口层"><a href="#网络接口层" class="headerlink" title="网络接口层"></a>网络接口层</h2><p>网络接口层的基础是光纤、电缆或者电磁波等真实存在的物理媒介。对于数字应用来说，我们只需要两种物理信号来分别表示 0 和 1，比如用高电压表示 1，低电压表示 0，就构成了简单的物理层协议。针对某种媒介，电脑可以有相应的接口，用来接收物理信号，并解读成为 0/1 序列</p>
<p>在这些介质中，信息以『帧(frame)』为单位传输。所谓的帧，是一段有限的 0/1 序列。连接层协议的功能就是识别 0/1 序列中所包含的帧。比如说，根据一定的 0/1 组合识别出帧的起始和结束。在帧中，有收信地址(Source, SRC)和送信地址(Destination, DST)，还有能够探测错误的校验序列(Frame Check Sequence)。当然，帧中最重要的最重要是所要传输的数据(payload)。这些数据往往符合更高层协议，供网络的上层使用。与数据相配套，帧中也有数据的类型(Type)信息。连接层协议不关心数据中到底包含什么。帧就像是一个信封，把数据包裹起来。</p>
<h3 id="深入理解帧-Frame"><a href="#深入理解帧-Frame" class="headerlink" title="深入理解帧(Frame)"></a>深入理解帧(Frame)</h3><p><img src="/images/14808113173928.jpg" alt=""></p>
<p>帧的结构很简单，一共三部分：<code>头部 | 数据(Payload) | 尾部</code>，发送时由头发送到尾，其中：</p>
<ul>
<li>头部: <code>DST SRC Type</code></li>
<li>数据: <code>Payload(Data)</code></li>
<li>尾部: <code>Pad FCS Extension</code></li>
</ul>
<p>更正：<code>Preamble</code> 和 <code>SFD</code> 如上图所示是 packet 的一部分，具体参考 <a href="https://en.m.wikipedia.org/wiki/Ethernet_frame" target="_blank" rel="external">这里</a></p>
<p>我知道看到这些奇奇怪怪的单词大家一定一头雾水，不要紧张，这就来一个一个解释：</p>
<ul>
<li>Preamble: 翻译过来叫序言，是一帧的前 7 个字节，每个字节都是 <code>10101010</code>，所以合起来大概样子是 <code>10101010101010101010101010101010101010101010101010101010</code>。这是要干嘛？对表！为什么要对表！因为不同的网卡发送/接收的频率可能是不一样的，所以就通过这些 1010 来让彼此找到节奏，这个过程叫做时钟复原(recover the clock)</li>
<li>SFD: 起始信号(Start Frame Delimiter)，估计是 <code>0xAB</code></li>
<li>DST: 目的地(Destination)，对方的 MAC 地址（物理设备自带的序号）</li>
<li>SRC: 起始地(Source)，本机的 MAC 地址（只能在同一个以太网中识别）</li>
<li>Type: 用来描述数据部分的类型，如果是 IPv4 则为 <code>0x0800</code>，如果是 ARP 则为 <code>0x0806</code></li>
<li>FCS: 校验序列(Frame Check Sequence)，检测传输过来的数据是否出错，采用 CRC 算法</li>
</ul>
<p>数据部分一般包含更高层协议的数据，比如 IP 包，但是其实具体里面是帧是并不在意的。另外数据尾部可能有一串用来填充的 0，因为数据有一个最小长度限制。</p>
<h3 id="集线器与交换机"><a href="#集线器与交换机" class="headerlink" title="集线器与交换机"></a>集线器与交换机</h3><p>我们现在把想要发送的数据打包成帧，然后要怎么发送呢？老一点的方式是通过集线器，而目前基本上都是通过交换机。</p>
<p>集线器的每个端口都会连接一台计算机，一旦有一台电脑把帧发送到集线器，就会自动转发到其他所有的端口，由每台计算机进行检测，如果不是 DST 的话，就忽略这一帧。这种机制实际上有两个问题：</p>
<ol>
<li>两台计算机的通信在同一个以太网上是公开的，甚至都不需要去截获，帧自己就会推送过来。虽然信息本身可以加密，但是能够知道发送信息的时间和规律，也并不是特别安全的做法</li>
<li>因为每次都需要广播消息，所以实际上集线器不能同时发送信息，一旦冲突，就等待一段时间再进行发送</li>
</ol>
<p>交换机解决了这两个问题，一是记录各个设备的 MAC 地址，按需发送的同时也允许多路同时通信。正因为如此，交换机取代集线器也就非常理所当然了。</p>
<h2 id="网络互联层"><a href="#网络互联层" class="headerlink" title="网络互联层"></a>网络互联层</h2><p>如果我们想让一台连接 Wifi 的计算和一台连接以太网的计算机通信，只使用网络接口层的『帧』是万万做不到的，因为有线和无线并没有办法进行信号的传输，所有我们需要一个桥梁，也就是路由器(router)。路由器可以在 Wifi 和 以太网之间发送/接收数据，这样一来就把中间欠缺的环节补上了。但是还有一个问题，我们来看看整个通信过程：</p>
<p>Computer1(Wifi) &lt;-&gt; Router(Wifi) &lt;-&gt; Router(Ethernet) &lt;-&gt; Computer2(Ethernet)</p>
<p>这里需要四个地址！但是一个帧里面只有 SRC(起点)和 DST(终点)的地址，所以我们就需要在前面的数据(payload)中添加信息，来完成信息的传输，于是便有了 IP 协议。</p>
<h3 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h3><p>网络互联层是互联网最重要的根基，通过几乎一统的 IP 协议构成了我们今天的互联网。更高层的协议，无论是 TCP 还是 UDP，必须通过网络层的 IP 数据包(datagram)来传递信息。操作系统也会提供该层的 socket，从而允许用户直接操作 IP 包。</p>
<p>IP 协议现在有 IPv4 和 IPv6 两个版本，比如下面就是 IPv4 的格式：</p>
<p><img src="/images/14551392855125.jpg" alt=""></p>
<p>其中 source 和 destination 的长度都是 4 字节，我们通常会把每个字节转化成一个 0-255 的十进制整数，记为类似 192.168.0.1 这样的形式。</p>
<p>IP地址是全球地址，它可以识别局域网和主机。这是通过将IP地址分类实现的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">IP class    From          To                Subnet Mask</div><div class="line">A           1.0.0.0       126.255.255.255    255.0.0.0</div><div class="line">B           128.0.0.0     191.255.255.255    255.255.0.0</div><div class="line">C           192.0.0.0     223.255.255.255    255.255.255.0</div></pre></td></tr></table></figure>
<p>每个 IP 地址的 32 位分为前后两部分，第一部分用来区分局域网，第二个部分用来区分该局域网的主机。子网掩码(Subnet Mask)告诉我们这两部分的分界线，比如 255.0.0.0 (也就是8个1和24个0)表示前 8 位用于区分局域网，后 24 位用于区分主机。由于 A、B、C 分类是已经规定好的，所以当一个IP地址属于 B 类范围时，我们就知道它的前 16 位和后 16 位分别表示局域网和主机。</p>
<p>而在具体传输的时候，需要依赖路由器中的路由表，在不同机器间传递的时候，改变的只有帧中的 SRC 和 DST，而 IP 包的内容在帧的 Payload 中是不会变化的。但是现在问题来了，我们怎么知道 IP 和 MAC 的对应关系呢？这里就是 ARP 协议发挥作用的时候了，它会把IP 地址与 MAC 地址的对应传播到局域网的每个主机和路由。而路由表除了可以手动进行编写外，也可以使用 RIP(Routing Information Protocol) 来根据距离进行生成。</p>
<p>IP 协议是 “Best Effort” 式的，也就是说是不可靠的（如果失败了就失败了），但于此同时也是的 IP 协议效率很高，至于更加可靠的传输方式，就要靠传输层实现了。</p>
<p>除了 IP 协议之外，网络互联层一个很重要的协议是 ICMP(Internet Control Message Protocol) 协议，它介于网络层和传输层，主要功能是传输网络诊断信息。我们常用的 <code>ping</code> 命令就是基于 ICMP 协议的。</p>
<h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>现在我们已经能在两台计算机之间进行通信了，但是问题来了，每个计算机有不同的进程，如果我想指定找远方计算机的某个进程要怎么办呢，IP 协议又不够用了。所以传输层协议(TCP, UDP)使用端口号来标注进程，在传输数据的时候，我们写上目的进程的端口。当数据到达另一台计算机时，会根据传输层协议，识别端口号，将信送给不同的进程。</p>
<p>传输层最重要的协议是 TCP 协议和 UDP 协议。TCP 协议复杂但传输可靠，UDP 协议简单但传输不可靠，接下来我们来简单了解一下这俩协议。</p>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP 协议其实并没有在 IP 协议的基础上做太多额外的工作，主要是为 IP 协议增加了端口的支持，头部如下：</p>
<p><img src="/images/14551394375473.jpg" alt=""></p>
<p>从上图就可以看到，UDP 的头部很短，只是额外包含了端口信息，可以看作是 IP 协议暴露在传输层上的接口。</p>
<h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP(Transportation Control Protocol)协议与 IP 协议是一同产生的，或者说，他俩一开始就是同一个协议，后来才被拆开的。TCP 因为实现了『流』式通信，在特定场景中非常有用。具体『流』式通信的实现这里就不展开了，我们来看看 TCP 协议的头部大概就知道它要比 UDP 复杂多少了：</p>
<p><img src="/images/14551394884094.jpg" alt=""></p>
<p>在 TCP 传输数据之前，需要先进行连接，这个过程就是我们常说的 TCP 三次握手(three-way handshaking)。而结束联结的时候也需要进行双方互相确认的工作，就是我们常说的 TCP 四次挥手。</p>
<p>TCP 是一个非常复杂的协议，感兴趣的同学可以在参考链接中找到非常详细的说明，这里我就不再赘述了。</p>
<h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>传输层协议其实在大部分时候已经能够满足我们的需求，但是随着网络应用的增加，不同类型的应用也慢慢有了自己的一套规则，就是我们所说的应用层协议了，比如 HTTP, FTP, IMAP, DNS 等等。这里我们简单介绍一下 HTTP 协议。</p>
<p>HTTP 使用的是『请求(request)』-『回复(response)』机制，客户端向服务器发送请求，而服务器给客户端发送回复。具体回复的状态会在返回的信息中以状态码的形式进行表示。早期发送请求的时候，都需要重新进行 TCP 连接，网络开销很大，同时每次的通信也是无状态的(stateless)。现在 HTTP 协议允许 TCP 链接复用，但是这种无状态的特性依然保留了下来。</p>
<h2 id="试一试"><a href="#试一试" class="headerlink" title="试一试"></a>试一试</h2><ol>
<li>访问 wdxtub.com，看看在这个过程中数据是如何传输的</li>
<li>试着 ping 一些地址，看看返回的信息是什么</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文中我们简单了解了计算机网络的基本概念和常用协议，如果有需要，会在后面的系列中进行深入讲解。</p>
<p>（写此文时精神状态不佳，振作后再进行修订）</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://read.douban.com/column/1788114/" target="_blank" rel="external">协议森林 - 趣话网络协议</a></li>
<li><a href="http://www.cnblogs.com/vamei/p/3784866.html" target="_blank" rel="external">Mac OS X 网络诊断命令</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说计算机科学中最重要的概念是抽象，那么『分层』绝对有资格争榜眼，再不济也是一个探花。计算机网络是最能代表『分层』思想的概念，本文我们就来了解一下计算机网络中的各种协议。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="不周山" scheme="http://wdxtub.com/tags/%E4%B8%8D%E5%91%A8%E5%B1%B1/"/>
    
      <category term="网络协议" scheme="http://wdxtub.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>【不周山之计算机基础】Linux 概念指南</title>
    <link href="http://wdxtub.com/2016/12/03/bzs-linux-concept-guide/"/>
    <id>http://wdxtub.com/2016/12/03/bzs-linux-concept-guide/</id>
    <published>2016-12-03T00:19:09.000Z</published>
    <updated>2016-12-03T06:37:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果说计算机科学的三大浪漫是操作系统、编译原理和计算机图形学的话，谈及操作系统，Linux 就一定是那个程序员对它又爱又恨的存在。本文带大家了解 Linux 中的基本概念和原理，正所谓知其然也要知其所以然。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.12.03: 初稿完成</li>
</ul>
<h2 id="系列目录"><a href="#系列目录" class="headerlink" title="系列目录"></a>系列目录</h2><ul>
<li><a href="http://wdxtub.com/2016/12/03/bzs-linux-concept-guide/">Linux 概念指南</a></li>
<li><a href="http://wdxtub.com/2016/12/03/bzs-network-protocol-guide/">计算机网络协议指南</a></li>
</ul>
<h2 id="任务目标"><a href="#任务目标" class="headerlink" title="任务目标"></a>任务目标</h2><ol>
<li>了解 Linux 的基本概念</li>
<li>理解 Linux 的架构和背后的设计思考</li>
<li>初步掌握文件系统的操作和原理</li>
<li>对管道、进程和进程间通信有简单的感性认识</li>
</ol>
<h2 id="当我们谈论-Linux-时我们在谈论什么"><a href="#当我们谈论-Linux-时我们在谈论什么" class="headerlink" title="当我们谈论 Linux 时我们在谈论什么"></a>当我们谈论 Linux 时我们在谈论什么</h2><p>Linux 的出现其实是一位大学生的心血来潮，Linus Torvalds（就是 Linux 之父）不满意当年学习操作系统时所使用的 Minix 系统，在其代码的基础上参考 Unix 的设计，写出了第一版 Linux 内核。之后 Linus 开源了代码，随着网络时代的大幕逐渐揭开，Linux 和 GNU 金风玉露一相逢，在开源协议下迅速发展成熟。</p>
<p>正所谓『不懂 Unix 的人注定最终还要重复发明一个蹩脚的 Unix』，通过学习 Linux 来掌握 Linux/Unix 的核心思想其实是非常有意义的。作为诸多天才的智慧结晶，能够从中偷师一星半点，也能受益匪浅。（新闻插播：2016.12.03 Solaris 操作系统将终止开发）</p>
<p>准确来说，Linux 其实只是一个内核，负责管理硬件和为上层应用提供接口。不过随着 Linux 概念的不断外延，现在提到 Linux，更多是指以 Linux 内核为基础配上各种应用的 Linux 发行版本（比如 Ubuntu, Debian 等等）。这个系列的文章不会过多着眼于各个发行版，而是专注于 Linux 内核和系统基本概念本身，比如操作系统中重要的抽象：文件系统、输入输出操作、进程、线程和进程间通信。</p>
<h2 id="常见-Linux-发行版简介"><a href="#常见-Linux-发行版简介" class="headerlink" title="常见 Linux 发行版简介"></a>常见 Linux 发行版简介</h2><p>因为 Linux 开源的特性，各种不同的发行版层出不穷，感兴趣的同学可以在 <a href="https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科 - Linux 发行版列表</a> 这个条目中看到各式各样的发行版及简介，也可以在 <a href="http://distrowatch.com/" target="_blank" rel="external">distrowatch.com</a> 查看更加详细的排名，这之中比较流行的发行版有：</p>
<ul>
<li>ArchLinux，一个基于 KISS(Keep It Simple and Stupid) 的滚动更新的操作系统。</li>
<li>CentOS，从 Red Hat 发展而来的发行版，由志愿者维护，旨在提供开源的，并与 Red Hat 100%兼容的系统。比较稳定，不用动不动就升级。</li>
<li>Debian，一个强烈信奉自由软件，并由志愿者维护的系统。</li>
<li>Elementary OS：基于 Ubuntu，接口酷似 Mac OS X。</li>
<li>Fedora，是 Red Hat 的社区版，会经常引入新特性进行测试。</li>
<li>Gentoo，一个面向高级用户的发行版，所有软件的源代码需要自行编译。</li>
<li>Linux Mint，从 Ubuntu 派生并与 Ubuntu 兼容的系统。</li>
<li>openSUSE，最初由 Slackware 分离出来，现在由 Novell 维护。用起来还是比较生涩。</li>
<li>Red Hat Enterprise Linux，Fedora 的商业版，由 Red Hat 维护和提供技术支持。</li>
<li>Ubuntu，一个非常流行的桌面发行版，由 Canonical 维护。基本上日常常用的就是它了。</li>
</ul>
<p>因为手头上只有基于 Ubuntu 的虚拟机（包括 Win10 中自带的 Linux），所以接下来的示例都是基于 Ubuntu 14.04 LTS 的。</p>
<h2 id="按下开机键之后"><a href="#按下开机键之后" class="headerlink" title="按下开机键之后"></a>按下开机键之后</h2><p>虽然现在我们使用的云主机基本都已经预装好了 Linux，也不需要自己去操心开机，但是操作系统毕竟不是凭空出现的，了解从按下开机键到操作系统启动之间的过程有助于我们深入理解计算机系统。整个过程的步骤如下：</p>
<ol>
<li>按下开机键</li>
<li><strong>BIOS 步骤</strong>：计算机从主板的 BIOS(Basic Input/Output System) 中读取存储的程序</li>
<li><strong>MBR 步骤</strong>：该程序从存储设备中读取起始的 512 字节数据（称为主引导记录 Master Boot Record, MBR）</li>
<li><strong>Boot Loader 步骤</strong>：MBR 告诉计算机从哪个分区(Partition)来载入引导加载程序(Boot Loader)，Boot Loader 保存了操作系统的相关信息</li>
<li><strong>Kernel 步骤</strong>：Boot Loader 根据所存储的信息加载内核(Kernel)，内核主要的任务是管理计算机的硬件资源</li>
<li><strong>Init 步骤</strong>：内核会为自己预留内存空间，然后进行硬件检测，之后启动 init 进程（1 号进程），之后的操作会由 init 进程来接管</li>
<li><strong>初始化脚本步骤</strong>：如果没有进入单用户模式，就会为操作系统启动做各种初始化工作，包括计算机基本信息、文件系统、硬盘、清理临时文件、设置网络等等</li>
<li><strong>登录步骤</strong>：操作系统准备好之后，我们就可以用用户名和密码登录到计算机中，我们成为了一个用户，属于某个用户组</li>
</ol>
<h2 id="Linux-的架构"><a href="#Linux-的架构" class="headerlink" title="Linux 的架构"></a>Linux 的架构</h2><p>现在我们有了一个可以运行的 Linux 操作系统，具体它是怎么工作的呢？这就要从架构说起了。</p>
<p><img src="/images/14807342792897.jpg" alt=""></p>
<p>最底层是硬件，硬件之上是内核，前面说内核负责管理所有的硬件资源的意思是，所有的计算机操作都需要通过内核传递给硬件。如果接触过硬件的同学一定知道，硬件本身是颇为复杂的，即使有了内核代为管理，仍旧非常繁琐，所以在内核之上我们有了系统调用。我们不需要了解内核和硬件的细节，就可以通过系统调用来操作它们，系统调用是操作系统的最小组成单位，也就是说，计算机能做的所有操作，最终能且仅能分解成已有的系统调用。</p>
<p>我们可以看到，内核实际上是硬件的抽象，而系统调用是内核的抽象，在这之上的 shell 和 library 甚至应用程序其实是更高层次的抽象，正是通过这样一层一层的抽象，计算机才得以发展成为如今这么庞大却简洁的系统。</p>
<p>我们在命令行中输入 <code>man 2 syscalls</code> 就可以浏览系统调用的说明了，顺着列表往下滑，就可以看到一些我们常常使用的命令了，比如 <code>chmod</code>, <code>fork</code>, <code>kill</code> 等等。反应快的同学应该已经意识到了，这些命令不就是我们在 shell 中常常使用的嘛，原来它们就是系统调用！</p>
<p>现在最常用的 shell 叫做 bash，其他诸如 zsh, fish 等也各有各的拥趸。这里要具体说一下 shell 和终端(Terminal)的不同，在大型机时代，终端是一个硬件设备，用来进行输入输出，而随着计算机硬件的发展，终端已经慢慢从实体变成了一个概念。我们打开 Gnome Terminal 的 About 页面，就可以发现下面的介绍是这样写的：</p>
<p><img src="/images/14807358566249.jpg" alt=""></p>
<p>注意这个说法 “A terminal emulator for the GNOME desktop”，什么是 emulator 呢？中文翻译叫做仿真器，等于是说，这个程序是一个仿真终端的程序。与 emulator 相关的一个非常容易混淆的概念是 simulator（模拟器），他们的差别在于：</p>
<ul>
<li>仿真器。通过软件方式，精确地在一种处理器上仿真另一种处理器或者硬件的运行方式。其目的是完全仿真被仿真硬件在接收到各种外界信息的时候的反应。</li>
<li>模拟器。通过某种手段，来模拟某些东西。不一定要完全正确的原理，追求的只是尽可能的相像。</li>
</ul>
<p>我们找一个 Mac OS 上最流行的终端的介绍来看看，同样会发现，这是一个仿真器：</p>
<p><img src="/images/14807362345090.jpg" alt=""></p>
<p>所以可以这样理解，现代计算中的终端是一个用软件仿真的终端，我们在这上面输入输出的命令会传给具体执行这些命令的 shell 程序，再由 shell 程序执行对应的系统调用。重要的事情说三遍：终端不是 shell，终端不是 shell，终端不是 shell。</p>
<p>因为系统调用是操作系统的最小功能单位，所以一般来说提供的功能是非常零碎的，我们完成一个操作一般需要多个系统调用进行配合，于是 Linux 定义了一些 library（库），将常见的系统调用组合打包成各种功能。如果说系统调用是笔画的话，那么库函数大概就是偏旁部首了。一般来说 Linux/Unix 系统都会有 ISO C 标准库和 POSIX 标准库，用来保证不同平台的兼容性。</p>
<p>在 shell 和 library 的基础上，我们就可以构造各式各样强大的应用了，当然除了这两种方式外，也可以根据需要自己进行系统调用。</p>
<p>至此，我们就简单介绍了 Linux 架构中的各个层级：</p>
<ul>
<li>内核是软硬件的桥梁</li>
<li>系统调用是应用与内核的桥梁，一方面隐藏了内核的复杂性，另一方面提高了应用的可移植性</li>
<li>库实际上是系统调用组成的模块化功能</li>
<li>shell 实际上是一种方便我们操作计算机的机制</li>
</ul>
<p>在图形化界面出现之前，在命令行中输入命令是跟电脑交互的主要方式。而在图形化界面出现这么多年之后，命令行依然扮演者举足轻重的角色，一是因为简单粗暴，二是因为可以方便地自动化流程化。</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>简单来说，文件系统是 0 与 1 的逻辑组织形式，常见的抽象是文件和目录。在 Linux 中，文件系统是一个树结构，树的根就是我们常常能看到的根目录 <code>/</code>，每一个分叉表示一个文件夹，如下图所示：</p>
<p><img src="/images/14807377801394.jpg" alt=""></p>
<p>文件名加上从根目录到该文件所在目录的目录名就构成了一个路径。对于目录来说，里面至少会包含两个条目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.       指向当前目录</div><div class="line">..      指向父目录</div></pre></td></tr></table></figure>
<p>当一个文件被放入到目录中，实际上就是建立了一个到该文件的硬链接(hard link)，当对这个文件的硬链接数目为零的时候，文件实际上就被删除了。不过现在基本都使用软链接(soft link)，类似于 windows 中的快捷方式，不会影响链接数目。</p>
<p>我们能对文件进行三种操作：</p>
<ul>
<li>读取 Read: 获取数据</li>
<li>写入 Write: 创建新文件或在旧文件中写入数据</li>
<li>运行 Execute: 文件是可执行的二进制代码，那么会被载入内存进行执行</li>
</ul>
<p>但是三种操作都有各自的权限，我们使用 <code>ls -l filename</code> 就可以看到详情，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wdxtub@ubuntu:~/GO/bin$ ls -l -rwxrwxr-x 1 wdxtub wdxtub 11277064 Sep 14 10:35 bee</div><div class="line">wdxtub@ubuntu:~/GO$ ls -l bin</div><div class="line">drwxrwxr-x 2 wdxtub wdxtub 4096 Sep 14 10:35 bin</div></pre></td></tr></table></figure>
<p>这里简单介绍下各个字段的含义：</p>
<ul>
<li>第一个字符，如果是 <code>-</code> 表示常规文件，如果是 <code>d</code> 表示目录</li>
<li>后面的九个字符表示 owner, owner group 和 other 的权限，rwx 分别代表读取、写入和执行，如果是 <code>-</code> 则表示没有对应的权限</li>
<li>第二列的数字是 hard link 的数目</li>
<li>第三、四列是所属的用户和用户所在的用户组</li>
<li>第五列是文件大小，单位是字节 byte</li>
<li>最后的是上一次写入的时间</li>
</ul>
<p>文件系统的使用基本上就是这些内容，但是这样的一个文件系统到底是怎么实现的呢？这又要从存储设备说起了。前面提到，存储设备的前 512 字节是 MBR，用于开机启动，剩余的空间可能会被分为多个分区(partition)，每个分区有对应的分区表(partition table)来记录分区的相关信息（比如起始位置和分区大小）。需要注意的是，分区表并不保存在该分区中，不然万一分区挂了，连最关键的分区表都找不到了。</p>
<p>每个分区大概的样子是这样的：</p>
<p><img src="/images/14590056997684.jpg" alt=""></p>
<ul>
<li>Boot block 是为计算机启动而准备的，在 MBR 指定启动分区之后，就会把 Boot block 部分的程序读入内存执行。为了方便管理，即使该分区没有操作系统，仍然会预留 Boot block</li>
<li>Super block 存储文件系统的信息，比如类型、inode 数目和数据块的数目</li>
<li>inodes 是文件存储的关键，每个文件对应一个 inode，inode 中包含指向具体数据的指针，读取的时候根据这些指针进行数据读取即可</li>
<li>Data blocks 就是具体的数据了，我们通过 inode 中的指针来进行访问</li>
</ul>
<p>关于 inode 的具体实现细节这里因为篇幅所限就不展开了，会在系列后面的文章中进行介绍。</p>
<h2 id="管道与流"><a href="#管道与流" class="headerlink" title="管道与流"></a>管道与流</h2><p>在 Linux 中 “Everything is a stream of bytes”，用设计模式的话说其实这就是一个数据流导向的设计，信息在不同的应用之间流动，最终成为我们所需要的信息。Linux 在执行程序的时候，会自动打开三个流：</p>
<ul>
<li>标准输入(Standard Input)</li>
<li>标准输出(Standard Output)</li>
<li>标准错误(Standard Error)</li>
</ul>
<p>我们可以按需进行使用。而如果我们想把一个程序的标准输出作为另一个程序的标准输入，就需要使用管道(pipeline)了。而正是因为这样的机制，我们可以把诸多小功能组合成强大的应用，一个简单的例子是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">wdxtub@ubuntu:~$ cat hello.txt welcome to wdxtub.comwdxtub@ubuntu:~$ cat hello.txt | wc -w3</div></pre></td></tr></table></figure>
<h2 id="进程与进程组"><a href="#进程与进程组" class="headerlink" title="进程与进程组"></a>进程与进程组</h2><p>最基础的操作是指令，一堆指令在一起就是程序，而进程就是程序的具体实现，也就是把程序载入到内存中并执行的过程。操作系统的重要功能之一便是对进程进行从摇篮（分配内存空间）到坟墓（回收）的管理。我们先执行如下命令看看 <code>ps -eo pid,comm,cmd</code>（列出全部进程并展示 pid, command 和 cmd 信息）</p>
<p><img src="/images/14807437718754.jpg" alt=""></p>
<p>这里每一行都是一个进程，第一列是 pid，相当于身份证号；第二列是进程的简称；第三列是进程启动时候的命令。如果我们往上滚动，就会找到这样的一行 <code>1 init /sbin/init</code>，这个就是内核建立的唯一一个进程了，剩下的进程都是 init 通过 fork 方式创建的，也就是说，所有的其他进程都是 init 的子进程。</p>
<p>子进程终结的时候会通知父进程进行内存空间的回收，而如果父进程比子进程还早终结，那么这个子进程就会被过继给 init 进程，并由 init 进程通过调用 <code>wait</code> 函数进行回收。如果无法正确回收，那么这个子进程就成为了僵尸进程，所占据的内存空间就无法被访问了。</p>
<p>除了父子进程的关系外，还有一个进程组(process group)的概念：每个进程组中有多个进程，进程组的 pid 由进程组 leader 的 pid 决定。而多个进程组还可以组成一个会话(session)，会话使得前台和后台程序得以展示出来。当我们创建了多个终端窗口，实际上就创建了多个会话，每个会话都有其前台和后台进程。</p>
<h2 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h2><p>前面介绍了进程，但是进程之前如果想要交互怎么办？除了管道之外，有没有其他方法？当然有也必须要有。其中最简单的一种就是信号，所谓信号就是一个整数，一个由进程 A 发送给进程 B 的整数。因为一个整数所能携带的信息量有限，所以一般用于系统管理。</p>
<p>信号的传递机制也很简单，由内核，或者由其他进程经由内核往目标进程发送信号，实际上是在该进程对应的表中写入信号。当进程执行完系统调用退出内核的时候，就会查看这个信号，然后根据信号的不同执行不同的操作。</p>
<p>具体什么整数表示什么意思可以通过 <code>man 7 signal</code> 来查看，常见的有：</p>
<ul>
<li><code>SIGINT</code>: 当键盘按下 CTRL+C 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是中断(INTERRUPT)该进程</li>
<li><code>SIGQUIT</code>: 当键盘按下 CTRL+\ 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是退出(QUIT)该进程</li>
<li><code>SIGTSTP</code>: 当键盘按下 CTRL+Z 从 shell 中发出信号，信号被传递给 shell 中前台运行的进程，对应该信号的默认操作是暂停(STOP)该进程</li>
<li><code>SIGCONT</code>: 用于通知暂停的进程继续</li>
<li><code>SIGALRM</code>: 起到定时器的作用，通常是程序在一定的时间之后才生成该信号</li>
</ul>
<p>上面的介绍说『默认』操作，那么也就意味着我们是可以采取其他操作的，比方说直接无视掉，或者执行我们自定义的操作。</p>
<p>除了信号，消息队列(message queue)和共享内存(shared memory)也可以在进程间进行信息共享。不过因为这种机制比较复杂，尤其是涉及到同步的问题，所以在使用的时候需要多加注意。</p>
<h2 id="试一试"><a href="#试一试" class="headerlink" title="试一试"></a>试一试</h2><ol>
<li>试着自己安装一个 Linux 系统，尝试只使用终端来完成基本的文件夹查看操作</li>
<li>查看系统当前正在运行的进程</li>
<li>试着给某个进程发送一个信号</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这一讲中我们简单介绍了 Linux 系统中几个比较重要的概念，部分内容可能会比较难理解，这时候就要实际在电脑上试一试，配合关键词进行搜索咯。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://www.catb.org/~esr/writings/cathedral-bazaar/introduction/" target="_blank" rel="external">大教堂和市集(The Cathedral and the Bazaar)</a></li>
<li><a href="http://coolshell.cn/articles/2322.html" target="_blank" rel="external">Unix 传奇(上篇)</a></li>
<li><a href="http://coolshell.cn/articles/2324.html" target="_blank" rel="external">Unix 传奇(下篇)</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果说计算机科学的三大浪漫是操作系统、编译原理和计算机图形学的话，谈及操作系统，Linux 就一定是那个程序员对它又爱又恨的存在。本文带大家了解 Linux 中的基本概念和原理，正所谓知其然也要知其所以然。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="不周山" scheme="http://wdxtub.com/tags/%E4%B8%8D%E5%91%A8%E5%B1%B1/"/>
    
      <category term="Linux" scheme="http://wdxtub.com/tags/Linux/"/>
    
      <category term="概念" scheme="http://wdxtub.com/tags/%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>第二十五周 - 沧海一声笑</title>
    <link href="http://wdxtub.com/2016/12/02/roar-of-the-ocean/"/>
    <id>http://wdxtub.com/2016/12/02/roar-of-the-ocean/</id>
    <published>2016-12-02T13:32:57.000Z</published>
    <updated>2016-12-02T15:14:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>沧海一声笑，滔滔两岸潮，浮沉随浪只记今朝。苍天笑，纷纷世上潮，谁负谁胜出天知晓。</p>
<a id="more"></a>
<hr>
<p>为了给周记编链接地址，不得不求助词典来翻译『沧海一声笑』这个歌名，出来的结果也是颇让我哭笑不得，有 “See the world indifferently” - 冷眼看世界，有 “Laughter in the sea” - 海中的笑声，甚至还有 “The sea on voice laugh” - 绝对是机器翻译，最后只好选了一个稍微靠谱点的 “Roar of the Ocean”。</p>
<p>冬季运动计划进行中，因为天气变暖所以加上了跑步，于是继续浑身酸痛。跑了一段时间上坡，慢慢也已经习惯了，虽说是朝抵抗力最大的路径走，但蹬地的反作用力其实要比平地来得大，跑起来反而有另一种轻松。考虑到春节临近又要预备着每逢佳节胖三公斤，所以还是得先减一点，算是给自己多一些放纵的空间。</p>
<p>赶在十二月之前发布了博客的 Beta 版，基本上把自己之前所有的文章和资料进行了统一的梳理，把地基打牢了才好在这之上盖更宏伟的建筑。正像编辑所说的那样，编写著作要趁早，在这个过程中可以理清思路进而升华。不过在此之前还是要有一定的阅读量的，所以 kindle 这个东西嘛，早买早悟道呀。</p>
<p>自上个周末起沉浸在自己营造的牢笼中体验了好几天的矛盾与冲突，从前刻意去避免的情感波动在短短几天内似乎全都释放了出来。虽然这个释放的过程非常痛苦，但是起起伏伏反而激荡出了变化，也很高兴能在迷茫中找回自己。很多事情虽然没有那么好，但也没有那么糟。负能量这个东西大抵虚幻，不要做任何判断与决定，少些到处宣泄，其实该走的自然就会走。或者说，其实这样的体验才是最好的认识自己的机会。</p>
<p>睡前抽空看了一本书，叫《系统之美》，说的是输入、存量、输出、反馈这样的『系统』思维模式。换不同的角度去看待世界是蛮有意思的事情，如果用系统的思维来复盘自己的一天，那么早起对应于系统的预防机制，晚睡对应于系统的容错机制。这俩机制都很重要，预防的思路是事先把事情做好，尽量少出错；容错的思路是即使错了没关系，能有办法补救。很多时候在资源受限的情况下必须做出选择，不过我总是倾向于预防机制（看我的代码就更能体现出来了），但转过头来想想，容错也非常重要，以后还是要多多综合考虑。当然，一次就把事情做好是最好的。</p>
<p>临近年底，也开始在思考 2017 年的计划了，我本人是更倾向于去做人工智能相关应用的，毕竟做工程的东西虽然可以磨练技艺，但是说白了还就是几门编程语言几个框架罢了，真正能够对社会产生巨大价值的是激发智能本身。当然在这个过程中还要继续为计算机基础教育添砖加瓦，让更多的同学能找到最适合自己的学习道路。</p>
<p>我一直觉得，把自己想做的事情说出来，告诉身边的人，让更多的人知道，除了可以更好的鞭策自己外，还可能吸引到更多志同道合的人，也许别人的小小建议和不同角度的思考，就能发挥巨大的作用。随着项目的逐渐深入，也慢慢能够体会到高效团队的重要性，或者说，和脑子转得快的人共事其实是很幸福的事情，毕竟以肉眼可见的速度在提高完成度，是颇有成就感的。</p>
<p>很多东西，越是在乎，越会放大快乐和痛苦，这真是一个令人烦恼的问题呀，希望能慢慢找到解答。</p>
<p>江山笑，烟雨遥，涛浪淘尽红尘俗世几多娇。苍生笑，不再寂寥，豪情仍在痴痴笑笑。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;沧海一声笑，滔滔两岸潮，浮沉随浪只记今朝。苍天笑，纷纷世上潮，谁负谁胜出天知晓。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>wdxtub.com Beta 发布说明</title>
    <link href="http://wdxtub.com/2016/11/30/wdxtub-beta-release-notes/"/>
    <id>http://wdxtub.com/2016/11/30/wdxtub-beta-release-notes/</id>
    <published>2016-11-29T23:47:31.000Z</published>
    <updated>2016-12-01T13:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>经过一年多时间的筹备，终于能在今天发布 wdxtub.com 的首个 Beta 版本，包含三项我非常满意的重大改动！</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.11.30: wdxtub.com Beta 版正式发布</li>
</ul>
<h2 id="统计数字"><a href="#统计数字" class="headerlink" title="统计数字"></a>统计数字</h2><p>至北京时间 2016 年 11 月 30 日 21 时 15 分，关于我的博客 wdxtub.com 的统计数字大约有这些：</p>
<ul>
<li>博客数据<ul>
<li>书籍数量: 366</li>
<li>日志数量: 746</li>
<li>评论数量: 887</li>
<li>打赏数量: 78</li>
</ul>
</li>
<li>访问数据<ul>
<li>访问量: 241126</li>
<li>访问人次: 92714</li>
<li>访客来自中国 33 个省级行政区域（唯一少了一个省）</li>
<li>7 个访客中只有 1 个是使用移动设备的</li>
<li>2 个访客中就有 1 个是使用 Mac OS 的</li>
<li>访客中 Chrome 浏览器的使用率高达 68%</li>
<li>有 35% 的访客使用 1080p 的显示器</li>
<li>新老访客比例大约为 1 比 1</li>
<li>有将近一半的访客年龄在 18 到 24 岁之间</li>
<li>访问来源前五名为：广东省、美国、北京市、上海市、浙江省</li>
</ul>
</li>
<li>代码数据<ul>
<li>Github Repo Star 数量: 79</li>
<li>提交数量: 151 commits / 6,459,262 ++ / 3,439,925 –</li>
<li>最常提交时间: 周三/周四晚十点</li>
</ul>
</li>
</ul>
<h2 id="发布摘要"><a href="#发布摘要" class="headerlink" title="发布摘要"></a>发布摘要</h2><p>从半年多写书的过程中我真切理解了写作的几个关键技巧，即『分层』、『聚类』和『主题先行』。从这样的产品思路出发，博客被划分为三大板块，分别代表不同的主题。把目光放在导航栏，就可以看到『不周山』、『通天塔』和『好望角』三个全新的板块。</p>
<p><img src="/images/14805022102586.jpg" alt=""></p>
<p>名字的含义及主题分别是：</p>
<ol>
<li><strong>不周山</strong>：偏理论，用具体的例子来深入理解概念。学习知识就像不周山，永远不会有『周全』的一天，是为活到老，学到老。</li>
<li><strong>通天塔</strong>：偏实战，用具体的实践来打造完整产品。工程实践就像通天塔，需要不断添砖加瓦才能越盖越高。</li>
<li><strong>好望角</strong>：生活、思考、兴趣、观察、回忆、创作。好望角是寻找通往『黄金乐土』的海上通道，终年大风大浪，所谓生活，就是要乘风破浪冲向新大陆。</li>
</ol>
<p>另外两个值得提及的重大更新是：</p>
<ol>
<li>博客进入版本化时代，无论文章还是板块更新，均会有更新记录，方便大家查阅最新信息</li>
<li>正式采用 <a href="https://creativecommons.org/licenses/by-nc-nd/4.0/" target="_blank" rel="external">署名(BY)-非商业性(NC)-禁止演绎(ND)</a> 协议</li>
</ol>
<p>当然细小的更新还有很多，具体可以参见下面的版本注释。感谢大家一直以来的支持，我会努力越做越好。</p>
<h2 id="浏览指南"><a href="#浏览指南" class="headerlink" title="浏览指南"></a>浏览指南</h2><p>使用页面左上方的导航栏可以在首页以及其他板块之间切换。</p>
<p><img src="/images/14805022102586.jpg" alt=""></p>
<p>进入每个板块后，页面右边会出现目录，可以方便地进行导航：</p>
<p><img src="/images/14805100643249.jpg" alt=""></p>
<p>如果一篇文章属于某个系列，在文章的开头会有该系列的目录，以及更新时间：</p>
<p><img src="/images/14805102469086.jpg" alt=""></p>
<p>在书影音页面能看到改版后的展示效果：</p>
<p><img src="/images/14805104198419.jpg" alt=""></p>
<p>在关于页面中新增博客更新文档，后续的版本更新会在这里展现：</p>
<p><img src="/images/14805109563356.jpg" alt=""></p>
<p>还有很多比较小的改动，就留待大家慢慢挖掘啦！</p>
<h2 id="版本注释"><a href="#版本注释" class="headerlink" title="版本注释"></a>版本注释</h2><h3 id="Beta-2016-11-30"><a href="#Beta-2016-11-30" class="headerlink" title="Beta 2016.11.30"></a>Beta 2016.11.30</h3><ul>
<li>导航栏更新，用『不周山』『通天塔』和『好望角』取代了原来的『作品』『技术』和『生活』板块</li>
<li>导航栏更新，原来的『关于我』改为『关于』，增加了关于博客本身内容的信息</li>
<li>导航栏更新，原来的『书单』改为『书影音』，增加了关于电影、音乐和游戏部分的内容</li>
<li>每篇文章除了创建时间外，增加了『更新时间』，方便大家了解文章更新状况</li>
<li>为了配合全新的板块设计，对大部分文章内容进行了调整，之后所有的文章都会隶属于某一板块的某一系列，更加清晰</li>
<li>书单部分由原来的表格切换成了无序列表，并根据内容进行了更加详细的分类</li>
<li>感谢网友 keli 的建议，导航栏图标进行了更换（虽然没有找到山和塔的图标）</li>
</ul>
<p>Beta2 预计更新内容</p>
<ul>
<li>全新的原创网站图标</li>
<li>新系列逐步上线</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经过一年多时间的筹备，终于能在今天发布 wdxtub.com 的首个 Beta 版本，包含三项我非常满意的重大改动！&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="wdxtub" scheme="http://wdxtub.com/tags/wdxtub/"/>
    
      <category term="beta" scheme="http://wdxtub.com/tags/beta/"/>
    
      <category term="release" scheme="http://wdxtub.com/tags/release/"/>
    
  </entry>
  
</feed>
