<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小土刀</title>
  <subtitle>Agony is my triumph</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wdxtub.com/"/>
  <updated>2016-09-25T15:32:08.000Z</updated>
  <id>http://wdxtub.com/</id>
  
  <author>
    <name>wdxtub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Web 之旅】I Web 应用开发入门指南</title>
    <link href="http://wdxtub.com/2016/09/25/web-app-development-guide/"/>
    <id>http://wdxtub.com/2016/09/25/web-app-development-guide/</id>
    <published>2016-09-24T23:49:11.000Z</published>
    <updated>2016-09-25T15:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>虽然我是原生应用的坚定粉，但是随着微信小程序的出现，还是得了解一下 Web 应用的开发。本文结合 CMU 15417 Web Application Development 这门课，大致梳理一下入门 Web 开发的必备知识及思维方式上需要转变的地方。</p>
<a id="more"></a>
<hr>
<h2 id="Web-之难"><a href="#Web-之难" class="headerlink" title="Web 之难"></a>Web 之难</h2><p>对于大多数同学来说，如果没有业余做一些小项目，其实是很难理解 Web 到底是怎么回事儿的，至少我当年就因为『觉得』 Web 很难所以『抗拒』Web 和网络相关的开发。虽然课堂上学过计算机网络，甚至也去实验室捣鼓过路由器交换机，但是真到自己开发的时候，真的是一脸懵逼。现在回过头来看，发现主要有以下原因：</p>
<ul>
<li>教学内容僵硬，硬件部分只讲硬件，软件部分只讲软件，没有联系起来</li>
<li>实验设计不接地气，为了实验而实验，没有结合具体的场景来复制相关概念的理解</li>
</ul>
<p>当然，最重要的原因还是在自己的『好奇心』不足，没有追根溯源把事儿弄明白。底层原理和上层应用的有机结合本来就是非常需要花功夫的，以目前国内高校的现状来看，甚至是『吃力不讨好』的。如果体制内没有变革的动力，那不妨通过外部努力进行自下而上的改变。</p>
<p>看到越来越多非常走心的教程以开源的方式出现在网上，我特别开心。这种开放和分享的精神在中文（互联网）世界里生根发芽，信息流动的过程本身就是一种平等。只要有网络和一颗想要学习的心，不需要缴纳高昂的学费，同样可以学到本领。程序员有程序员改变世界的方式，这就是我开博客写文章的初心了。</p>
<p>Web 之难，主要是简单操作背后所隐藏着的复杂体系，需要有比较完善的计算机及网络相关的知识积累，既需要大局观，也需要懂细节，这对于初学者来说可能就像无法逾越的大山，很多东西只知道怎么做，却不知道为什么要这样做。与此同时，遇到问题也没有解决的思路，就很容易有挫败感。（心疼当年的自己一秒）</p>
<p>希望本文能给在困惑中的同学一点帮助，虽然不能面面俱到，但至少能给出一些有用的提示和方法，出了问题不至于束手无策。</p>
<h2 id="一次点击背后"><a href="#一次点击背后" class="headerlink" title="一次点击背后"></a>一次点击背后</h2><p>之前在 caoz 的公众号中看到过，他喜欢出的一道面试题是：</p>
<blockquote>
<p>从浏览器地址栏输入网址，到网页彻底打开，中间都发生了什么？</p>
</blockquote>
<p>这道题看起来很简单，但其实需要答题者对 Web 的工作过程有整体认识。与此同时，面试官也可以根据具体情况选择一到两个细节进行深入的讨论。只有明白了整个系统运行的机制，之后的调试、测试、优化才不是无源之水。而弄懂这些问题本身，也能体现一个人学习的习惯和对技术的追求，这才是面试最需要体现的东西。</p>
<p>我一直认为，即使是做一个小的模块，也应该把自己放到更大的场景中去思考，这个模块在系统中所处的位置，与其他模块的关系与交互方式等等都是需要去思考的，这样才能写出最有价值的代码，并从中找到之后改进的方向。如果让我去面试，具体的技术细节我反而不会去拘泥太多，毕竟聪明的人很快就能学会，我在意的是候选人能不能真正以网络和计算机的方式去思考问题，这才是最重要的。（原文可以在<a href="http://chuansong.me/n/1795517" target="_blank" rel="external">caoz 的梦呓</a>中查看）</p>
<p>仔细读题，我们应该想到的细节问题是：</p>
<ul>
<li>为什么我们要输入网址而不是其他什么东西？</li>
<li>浏览器做了什么事情？</li>
<li>网址最后去了哪里？</li>
<li>服务器是怎么收到网址的？</li>
<li>服务器做了什么事情？</li>
<li>不同的页面效果是怎么出来的？</li>
</ul>
<p>化简一下，就是『客户端』、『网络』和『服务端』。每个部分都有各自相关的技术体系，学习的时候一定要弄清楚自己处于哪一块，比如上面几个问题涉及的相关知识点是：</p>
<ul>
<li>为什么我们要输入网址而不是其他什么东西？<ul>
<li>DNS 服务器的工作原理。具体每个部分的缓存机制，如何依次更新？</li>
<li>CDN 的工作原理。如何在硬件条件限制的情况下提供最佳服务质量？</li>
</ul>
</li>
<li>浏览器做了什么事情？<ul>
<li>Host 文件的作用。应用扩展与劫持。</li>
</ul>
</li>
<li>网址最后去了哪里？<ul>
<li>不同层的网络协议(HTTP, TCP, UDP)</li>
<li>路由规则，传播路径，tracert</li>
</ul>
</li>
<li>服务器是怎么收到网址的？<ul>
<li>端口监听</li>
<li>静态资源</li>
<li>动态请求处理</li>
</ul>
</li>
<li>服务器做了什么事情？<ul>
<li>防火墙</li>
<li>缓存</li>
<li>数据库</li>
<li>负载均衡</li>
<li>集群</li>
</ul>
</li>
<li>不同的页面效果是怎么出来的？<ul>
<li>javascript</li>
<li>css/html </li>
</ul>
</li>
</ul>
<p>一个网址请求背后就有这么多的东西，基本上每一个都可以开一门一学期的课程，初学者忽然面对这样概念饱和的轰炸，真的是九死一生。而这么多知识点，真的要样样精通，不太可能，不过如果有一个完整的概念，学习或工作中涉及具体的某个领域，再根据需要深挖，就能逐步触类旁通，找到技术的感觉。</p>
<p>可能前面说的都比较虚，了解系统原理最直接的好处是：出了问题知道怎么排查。比如前一阵子我的博客访问忽然变慢，我做了什么呢？</p>
<ol>
<li>梳理架构及流程。我的博客是静态博客，评论系统采用第三方服务，页面部署在 Github 和 Coding 双平台。因为是第三方托管，所以服务器的部分我不需要操心，而客户端的话我在手机和电脑都测试过，也并没有表现出设备相关的特性，于是把问题锁定在网络传输层面。</li>
<li>因为是静态网站，静态本身已经帮我缩小了可能出现问题的范围，无非是几个可能：页面内容传输、图片传输、字体渲染、图标显示和评论系统加载，逐个进行排查。</li>
<li>切换 VPN 确定 Github 和 Coding 没有问题后（即页面内容和图片的传输正常），发现字体渲染卡住了，检查后是因为所用的字体库不稳定（为了照顾国内使用了 360 的源），所以切换到了中科大的源。</li>
<li>问题解决。另外，几天后，360 官方也给出通告，停止了该源的维护，所以我也经历了一次『春江水暖刀先知』了</li>
</ol>
<p>平时遇到的问题大多是模糊的，只有对系统运行的机制有基本的理解，才能快速找到问题的关键所在，而这就是个人价值的体现。</p>
<h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>这部分施工中….</p>
<h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>Django</p>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h3><h3 id="Sessions"><a href="#Sessions" class="headerlink" title="Sessions"></a>Sessions</h3><h3 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h3><h3 id="Forms"><a href="#Forms" class="headerlink" title="Forms"></a>Forms</h3><p>(交互相关，函数参数）</p>
<h3 id="Templates"><a href="#Templates" class="headerlink" title="Templates"></a>Templates</h3><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>包括 Images</p>
<h3 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h3><h3 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h3><h3 id="云部署"><a href="#云部署" class="headerlink" title="云部署"></a>云部署</h3><h3 id="Email"><a href="#Email" class="headerlink" title="Email"></a>Email</h3><h3 id="云数据库"><a href="#云数据库" class="headerlink" title="云数据库"></a>云数据库</h3><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><h3 id="扩展性"><a href="#扩展性" class="headerlink" title="扩展性"></a>扩展性</h3><h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><h3 id="国际化与本地化"><a href="#国际化与本地化" class="headerlink" title="国际化与本地化"></a>国际化与本地化</h3><h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然我是原生应用的坚定粉，但是随着微信小程序的出现，还是得了解一下 Web 应用的开发。本文结合 CMU 15417 Web Application Development 这门课，大致梳理一下入门 Web 开发的必备知识及思维方式上需要转变的地方。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="开发" scheme="http://wdxtub.com/tags/%E5%BC%80%E5%8F%91/"/>
    
      <category term="Web" scheme="http://wdxtub.com/tags/Web/"/>
    
      <category term="入门" scheme="http://wdxtub.com/tags/%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>三学 - 写给转计算机专业的同学们</title>
    <link href="http://wdxtub.com/2016/09/24/siksa/"/>
    <id>http://wdxtub.com/2016/09/24/siksa/</id>
    <published>2016-09-24T07:20:48.000Z</published>
    <updated>2016-09-24T11:19:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>我曾不止一次被问过，本科非计算机相关专业毕业的同学，要如何在读研究生的一到两年中平衡生活和学习，并找到一份软件工程师的工作。本文是我的回答。</p>
<a id="more"></a>
<hr>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>在 CMU 读研究生的日子里，我见证来自不同学校不同专业的同学们，如何凭借自己的努力，以软件工程师的身份拿到各个公司门票的历程。对于本科并非计算机相关专业的同学来说，这个过程并不轻松。除了要学的东西太多外，怎么学，学习顺序是什么，如何平衡生活、学习和求职，诸如此类层出不穷的问题所带来的困惑、迷茫和挣扎，同样让人煎熬。</p>
<p>希望本文这点微小的工作，能给日夜兼程的同学们一些鼓励与支持。</p>
<p>佛教术语中的<a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E5%AD%B8" target="_blank" rel="external">『三学(śikṣā)』</a>，指的是『增上戒学(adhisīla-sikkhā)』、『增上意学(adhicitta-sikkhā)』和『增上慧学(adhipaññā-sikkhā)』，也就是我们常说的『戒』『定』『慧』，是达到解脱三界生死结䌸烦恼、得到漏尽通的修行之道。</p>
<p>虽然我们的境界不需要到超脱生死，但是『三学』的方法本身，给出了针对佛教中『三毒』- 『贪』『嗔』『痴』的应对方法，无疑是值得借鉴的。『三学』的具体修行称为<a href="https://zh.wikipedia.org/wiki/%E5%85%AB%E8%81%96%E9%81%93%E5%88%86" target="_blank" rel="external">『八正道』</a>，正语、正业、正命为戒学，正精进、正念、正定为定学，正见、正思维为慧学。我本人并不是佛教徒，在接下来的写作中也不会拘泥于教义指定的理解，而是会根据具体情况展开，这里先提前说明一下。</p>
<p>网游中的『转生』和『渡劫』是简单的，但是在现实生活中，系统性转变总是困难的，尤其对于异国他乡的学子，忽然面对如此大的变化，难免彷徨。我想说的其实是：没有什么过不去的坎儿，遇到困难要学会寻求帮助，最好找几个交心的好朋友，总而言之别都憋在心里。大家相遇相知就是缘分，可能的话，互相拉一把。</p>
<h2 id="持戒-由戒生定"><a href="#持戒-由戒生定" class="headerlink" title="持戒 - 由戒生定"></a>持戒 - 由戒生定</h2><p>『戒』可以认为是节制和取舍，正如古希腊的孩子们从小接受的教导那样：缺少适度和节制，完美便如镜中花、水中月，永不能企及。对于很多同学来说，各种烦恼的因，其实在一开始就种下了，比如：</p>
<ul>
<li>选课的时候贪多<ul>
<li>知识密度超过了自己的学习能力，只能牺牲质量，到最后似懂非懂，而且因为各种熬夜，把身体也弄垮了</li>
<li>作业量过大，每天处于 deadline 的高压状态，只能『完成』而非『做好』，也没有时间进行反思，为了做作业而做作业</li>
</ul>
</li>
<li>诱惑太多欲望太多<ul>
<li>各种各样的活动都想凑凑热闹，除了成为吃瓜群众，没有任何有价值的输入</li>
<li>为了免费食物东跑跑西转转，省了点钱却不在意极高的时间成本</li>
</ul>
</li>
<li>找工作的时候目标太多且不定<ul>
<li>不同的职位不同的公司一股脑全投简历，平均到每次面试，准备时间都很少</li>
<li>因为目标太分散，漫长的求职季让本就不宽裕的时间捉襟见肘，最后顾此失彼</li>
</ul>
</li>
</ul>
<p>之所以会出现这些问题，归根结底是犯了『戒』，给自己定下了不切实际的目标，既要鱼又要熊掌还要自行车，毕竟咱也不是哆啦a梦，还是要学会取舍，尤其对于没有太多计算机基础的同学而言，很容易落入『矫枉过正』的陷阱中。先给自己定一个小目标，至于这个小目标要怎么定就因人而异了，不同的人不同的目标不同的背景不同的基础不同的习惯。在这里我只能说一定要想清楚自己到底要什么，大处着眼小处着手目标明确。根据不同人的情况提供具体的计划和建议一直是我的收费服务，这里就不再展开。</p>
<p>前面提到，正语、正业、正命为戒学。</p>
<p>所谓『正语』，在佛教中指不妄语、不慢语、不恶语、不谤语、不绮语、不暴语，远离一切戏论。对于我们来说则是为人真实，对他人有益，这样不但自己没有太多包袱，也会有更多的人愿意在我们困难时伸出援手。</p>
<p>所谓『正业』，在佛教中指不杀生、不偷盗、不邪淫，不作一切恶行。对于我们来说则是为人正直，不因为时间短而抄袭或作弊（可以跟老师说明情况申请缓期），不把他人的帮助视为理所当然（除了几句感谢外，还要意识到别人为了帮助你所付出的时间成本）。</p>
<p>所谓『正名』，在佛教中指远离一切不正当的职业。对于我们来说则是遵纪守法，不在规章制度或法律面前动歪脑筋，以欺诈、胁迫等手段牟利的事情不要参与，也不要故意去破坏可能并非那么完善的制度（ICC, CCC）</p>
<p>对于大部分同学来说，即使是第一步，很多时候也并不简单。我能理解想让自己快速变强的心情，但是如果不加节制，好心就常常导致坏事儿。饭要一口一口吃，路要一步一步走，实话说，看到同学们这么着急，我就很替他们的着急而着急。</p>
<p>跑五公里，最快的方式是合理安排体力保持基本恒定的速度，一开始拼尽全力后面就很痛苦，太晚发力又来不及，难就难在找到合适的节奏，而秘诀，就是『戒』。</p>
<h2 id="禅定-因定发慧"><a href="#禅定-因定发慧" class="headerlink" title="禅定 - 因定发慧"></a>禅定 - 因定发慧</h2><p>『定』可以认为是心中一种平衡稳定的状态，英雄联盟里有个忍者英雄叫做凯南，他的口头禅是『均衡，存乎万物之间』，而找到这种『均衡』，就是在『戒』的基础上，可以追寻的更高的目标了。比方说：</p>
<ul>
<li>生活与课程的平衡：努力学习少点玩，留学在外需要操心的事情很多，尽量减少琐事所占用的精力和时间，不要为了省几个小钱而多花数倍的时间。本身在起跑线上就已经落后一截了，跑的时候就少歇几次吧。有的时候真的会很辛苦，既要补基础又要学新东西，的的确确要多花很多时间，提高效率，一点一点进步，真的也没有特效药。</li>
<li>课程与求职的平衡：大部分同学转计算机都是为了更好找到工作留在美国，求职所需要的能力和在学校中虽有交集，但并不大，很多东西都需要从头学起。我的建议是尽量利用学校的资源，跟着公司招聘的节奏，提前一两个月准备，极端情况下，课程甚至可以放一放。但是也不要孤注一掷，毕竟 CMU 的教育资源过了这村就没这店了（网课的体验还是有差距），要把长期目标和短期目标有机结合起来。</li>
</ul>
<p>在生活、课程与求职的三方拉锯中，一个好的心态是非常重要的</p>
<ul>
<li>积极：前进的道路上难免摔跟头，爬起来拍一拍灰，继续上路就是了，挫折只是对过去的当时的你的不肯定，不要因为过去而放弃将来。一次成绩不好，下次考好就是了；一次面试挂了，找到原因下次改进就是了。考卷和面试官都不知道你的过去，现在的你是怎么样，你就是怎么样。</li>
<li>不比较：有些时候，可能感觉平时还不如自己的同学表现得比自己好，就不要心里不平衡了，每个人背后都有旁人看不见的努力，纠结这些毫无意义，把该做的事情做好，比什么都重要。</li>
<li>踏实：遇到比较困难的问题，要踏踏实实把硬骨头努力啃下去，当然，如果时间安排太紧就没有这个时间了，解决难题才是进步的最佳方式，不然只是训练熟练度而已。</li>
</ul>
<p>当人真正『定』下来之后，才可能产生真正的智慧。就我个人的经验来说，写周记记录自己的心路历程是特别好的监督和安抚自己的方式，感兴趣的同学可以在博客中的<a href="http://wdxtub.com/1990/09/11/life-page/">生活栏目</a>中看到我两个学期的周记。还是和前面说的一样，有什么问题，多多找朋友和同学分担一下，年轻人，哪有什么过不去的坎儿嘛。</p>
<p>前面提到，正精进、正念、正定为定学。</p>
<p>所谓『正精进』，佛教中指正确的努力，止恶修善、去恶从善，自觉努力。对我们来说，路途漫漫，可以放慢速度，但千万不要停下，不要懈怠。毕竟一鼓作气，再而衰，三而竭。</p>
<p>所谓『正念』，佛教中指四念住，即随念于身、受、心、法四种所缘。对我们来说，是要积极调整心态，坚持锻炼，让身心都处于比较好的状态。</p>
<p>所谓『正定』，佛教中指正身端作，专心一志，身心寂静，深入一心。对我们来说，则是『因定发慧』的前提条件。</p>
<p>到了这一阶段，烦恼也会少很多，才更能专注把自己想要完成的事情做好。跑五公里，最好的状态就是只去想这一步和下一步，摒除杂念，回归事物本身。</p>
<h2 id="智慧-由慧起修"><a href="#智慧-由慧起修" class="headerlink" title="智慧 - 由慧起修"></a>智慧 - 由慧起修</h2><p>『慧』可以看作是『三学』的最终目标，但从更长远的修行来说，拥有『戒』『定』『慧』只不过是基础，就像魔兽世界中，满级之后，游戏才真正开始。</p>
<p>可惜的是，这一部分我也在努力求索中，只能以同路人的角度给一些自己的想法了：</p>
<ul>
<li>做一件事情，需要思考的除了事情本身，还要努力以更大的尺度去看待。比方说面对基础课和应用课的选择，基础课短期收益小长期收益大，需要积累的时间也更多，所以要早学，勤学；应用课短期收益大长期收益小，可以快速突击，可以根据自己的节奏与基础课配合着学习。</li>
<li>困难本身就是线索，能够一针见血指出自己一直以来学习或者工作的弱点及考虑不周之处，这才是真正需要花时间去提高的地方，也是一旦提高最有效果的地方（木桶理论）。不要出了问题找到答案就完事儿了，答案其实是最不重要的，不要捡了芝麻丢了西瓜。</li>
<li>一定要意识到时间的重要性，这是真正的稀缺且不可再生的资源。</li>
</ul>
<p>前面提到，正见、正思维为慧学。所谓『正见』，在佛教中指的是正确的佛理知见。所谓『正思维』，在佛教中指的是正确思维，以引导生如理如实的智慧。</p>
<p>生活是现实的，但是我们不能因为现实的生活而放弃了对『慧』的追求，这是旧世界的最后一扇门，也是新世界的第一扇门。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>虽说是写给转专业同学的文章，但其实做事儿的道理就这么多，其中的建议，或多或少哪里都能用上。写了这么多佛教，就以道德经中的一句话来结束吧：</p>
<p>上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我曾不止一次被问过，本科非计算机相关专业毕业的同学，要如何在读研究生的一到两年中平衡生活和学习，并找到一份软件工程师的工作。本文是我的回答。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="CMU" scheme="http://wdxtub.com/tags/CMU/"/>
    
      <category term="计算机" scheme="http://wdxtub.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="转专业" scheme="http://wdxtub.com/tags/%E8%BD%AC%E4%B8%93%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>大河与大坝 - 也谈知识输入输出</title>
    <link href="http://wdxtub.com/2016/09/24/big-river-and-dam/"/>
    <id>http://wdxtub.com/2016/09/24/big-river-and-dam/</id>
    <published>2016-09-23T22:33:40.000Z</published>
    <updated>2016-09-24T02:05:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>前些天有朋友在博客里问我如何进行高效率的输出，如果你在写作的时候也遇到过无从下笔、不知所云的问题，那么这篇博客也许值得一读。</p>
<a id="more"></a>
<hr>
<p>用大河和大坝来解释高效输出这个问题特别贴切，很多现成的名言警句都可以直接派上用场，比如『不积跬步无以至千里，不积小流无以成江海』以及『飞流直下三千尺，疑是银河落九天』。输出的源头是输入，平时的积累就是细流汇聚成江河的过程；而输出的方式则更类似大坝，让水的势能积累到一定程度，再根据需要进行释放，可以汹涌，可以平静。</p>
<p>所以我们就来聊聊大河（输入）和大坝（输出）。这俩事儿整清楚了，剩下的细节问题就可以在实践中找到最适合自己的答案了。</p>
<h2 id="一条大河"><a href="#一条大河" class="headerlink" title="一条大河"></a>一条大河</h2><p>关于如何高效学习这个话题，畅销书和网络中的各种大道理已经过于泛滥了，各种各样的理论（象限、金字塔），各种各样的规则（番茄、GTD），各种各样的技巧（康奈尔笔记、思维导图），说句不好听的，没太多用处，或者说是成本比收益高太多的赔本买卖。刚开始用来培养习惯锻炼思维能力是挺好的，但是拐杖用得再好也不是正常行走。领会精神之后就没必要再按图索骥了，形式主义的歧途，走两步看看就足够了。</p>
<p>厚着脸皮说一句，论输入，我的豆瓣有已读 1532 本，我的书摘早已过了两百万字。论输出，我的 lofter 有文章 754 篇，我的独立博客有文章 622 篇。兜兜转转才发现，大道至简。</p>
<p>输入输出的本质其实特别简单，就是『Garbage IN, Garbage OUT』，<strong>只有高质量的输入才可能有高质量的输出</strong>。我当然可以写一堆冠冕堂皇的话，拼上各种让人心生欢喜的字眼：比如知识输出是记忆固化/思维训练/自我体验。但是再怎么样也是没用的鸡汤，就和我这篇文章一样，所以还是少谈些主义，直接上干货。</p>
<ul>
<li>水至清则无鱼。平时的信息获取要多元，交叉验证，不要一根筋听到啥看到啥就是啥。先入为主是偏见的主要来源。</li>
<li>不良的信息源是水污染，不及时控制住和处理好，会臭了一条河。</li>
<li>河道及路线无须刻意，但有一个基本的框架还是重要的，这样才能滋养一大片土地。不然动不动洪水泛滥，损失很大的。这里的框架即自己的知识体系。</li>
<li>河道的上中下游都需要有一定的过滤，不然杂质会越积越多。比方说，我订阅了不少公众号，只有当下我觉得有价值的才会发送的 kindle 细看，而发送到 kindle 的文章我又会隔一周左右看，这样又利用了时间进行过滤，可以去掉很多『当时觉得有用但其实并没有任何用』的信息。</li>
<li>尽量形成水系，比方说主题式阅读和在维基中『顺藤摸瓜』，从问题触发，找背后的理念以及问题和解法本身的进化过程。</li>
<li>小溪流也不可忽视，零碎时间做基本的筛选或构思字句，重要的是一种积累并利用的习惯，从小事儿做起是成本最低最无痛的方式。</li>
<li>逆势而行会很累，毕竟水往低处流。不要太依赖自己的记忆力，好记性不如烂笔头，尤其是时间和动作相关的信息，记下来准没错。</li>
</ul>
<h2 id="一座大坝"><a href="#一座大坝" class="headerlink" title="一座大坝"></a>一座大坝</h2><p>大坝的功能，一是积累，二是控制。水位越高，所积累的能量也就越大，但反过来对大坝本身的要求也就更高。蕴藏巨大能量之后，如何使用也需要精心控制，用牛刀还是施小计，都可以根据具体情况进行调整。一些大坝的施工技巧是：</p>
<ul>
<li>设计很重要。确定要表达的主题，学会问自己问题，通过回答相关问题，围绕主题展开构思和写作，列提纲，多思考，逻辑上要自洽。</li>
<li>建材质量要高。从经典中获取原料，精细深入思考进行合成与锻造。思考是填充零碎时间的法宝，等待是可以思考，焦虑时同样可以思考。</li>
<li>他山之石。看看别人的思路，如果可能的话，就写得再深入一些。</li>
<li>先攻克难点。本质是什么，基本定理是什么（比方说热力学三定律），整体的架构是如何围绕基本定理组成的。</li>
<li>枢纽的重要性。找到不同事物的联系，如果只写一件事情，那么很受限制，联系到其他事物的话，不仅可以写其他事物，联系本身也可以去探究（比较与异同）</li>
<li>从最基础的做起。只假设读者有最基本的知识，用构建完整体系的思路去写作，通常就能够找到其中的『势』</li>
<li>写作的局限大约是思维的局限，大坝不够高，水位攒不高，还可能崩塌。</li>
</ul>
<p>其实还是那句话：大处着眼，小处着手，目标清晰。输出困难，大约是因为输入不够。输入的时候思考一下别人是如何进行输出的，其实就能发现很多有趣的事情了。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>我很不喜欢现在流行的某些所谓『知识类』节目所流露出来的观念，所有想帮别人思考和成长的人，不是呆就是坏；所有想让别人代替自己读书和成长的人，不是蠢就是懒。愿我们都不要成为自己讨厌的那种人。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前些天有朋友在博客里问我如何进行高效率的输出，如果你在写作的时候也遇到过无从下笔、不知所云的问题，那么这篇博客也许值得一读。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="思考" scheme="http://wdxtub.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="写作" scheme="http://wdxtub.com/tags/%E5%86%99%E4%BD%9C/"/>
    
      <category term="知识" scheme="http://wdxtub.com/tags/%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>第十五周 - A Star Is Born</title>
    <link href="http://wdxtub.com/2016/09/23/a-star-is-born/"/>
    <id>http://wdxtub.com/2016/09/23/a-star-is-born/</id>
    <published>2016-09-23T11:27:05.000Z</published>
    <updated>2016-09-23T12:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>It’s a time for pulling out the stops. Come blow your horn. Gonna shout it from the mountaintops - A star is born.</p>
<a id="more"></a>
<hr>
<p>漫长的一周终于结束了，即使想到国庆后要连续上七天班，也丝毫没有让连续上六天班的本周变得好过一些。</p>
<p>大约是平淡且身体被掏空的一周，除了给同事过生日以及和同事一起跑步回家，似乎并没有太多不一样的事情发生。</p>
<p>转正之后的工作除了更加多了之外并没有太多的不同，因为同事出去旅游临时接下的摊子总算渡过了一半，虽然事儿是有趣，但是忙不过来就不有趣了。就拿数据平台来说，背靠数据挖掘和机器学习这两个领域，其实有很多值得探索的地方。和知识产权部门以及市场部门的合作中我也学到了不少东西，因为基础知识的限制，主要能学到的是思考问题的角度。</p>
<p>当然好消息也是有的，我负责的项目的第一期开发预计下周能够结束，也算是一个小小的里程碑，无论是美国的同事还是我都很开心，能在各种事务缠身的情况下按时完成开发，感觉还有点小激动。</p>
<p>除工作外也有好消息，新书的写作也终于结束了目录编排和资料整理的部分，可以进入下一阶段了。不过和工作一样，一山放过一山拦，还是要做好打持久战的准备，广积粮缓称王，闷声发大财。</p>
<p>闲暇时间看了三场电影：《追凶者也》看刘烨，《我的战争》看刘烨和王珞丹，《一次邂逅》看苏菲玛索。有黑色幽默，有女神，有绝妙的配乐，其实也就足够了。不由得想起《一次邂逅》全片高潮时候的配乐 For Once in My Life:</p>
<blockquote>
<p>For once in my life, I have someone who needs me. Someone I’ve needed so long.<br>For once unafraid, I can go where life leads me. Somehow I know, I’ll be strong.<br>For one, I can touch what my heart used to dream of. Long before I knew.</p>
</blockquote>
<p>这样想想，其实歌词里描述的状态，还真是特别美好。很多事情都是现在不做以后就不再有机会去做，所以忘掉『以后』吧，就是『现在』。趁着中秋节撺掇着把家里的网换成了 100M 的光纤，又给爸妈买了个电视盒子，你别说，还确实是挺方便的。</p>
<p>可能因为最近生活终于慢慢稳定了下来，又开始思索自己到底想要什么样的生活了，也许要勇敢多迈出一两步，用另一种打开方式开启生活。</p>
<p>Just remember in the darkest hour. Within your heart is the power. For making you a HERO too. So don’t lose hope when you’re forlorn. Just keep your eyes upon the skies.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;It’s a time for pulling out the stops. Come blow your horn. Gonna shout it from the mountaintops - A star is born.&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>接口、系统、管理与熵</title>
    <link href="http://wdxtub.com/2016/09/22/interface-system-management-and-entropy/"/>
    <id>http://wdxtub.com/2016/09/22/interface-system-management-and-entropy/</id>
    <published>2016-09-22T12:45:41.000Z</published>
    <updated>2016-09-22T15:20:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近无论是写书还是设计系统都攒了不少思考，有(fei)些(chang)凌乱，但是还是想写一写。</p>
<a id="more"></a>
<hr>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>回国之后，工作强度还是比较大的。好在经过一段时间的适应和磨合，总算慢慢找到了节奏。思考和总结的好处有很多，对我来说最重要的有两个方面：一是能够从实践中萃取最多的养分让自己快速成长；二是针对暴露出的问题进行定向改进，能极大提高工作效率。</p>
<p>原则上我是希望在博客中尽量保持某种意义上的中立的，但是在这里，我依然想感谢公司给予我极高的自由度，职位或者项目并没有成为桎梏，我因此得以把触角伸向各个领域。接触各个项目的好处不言而喻，除培养大局观外，学会以不同的角色站在不同部门不同角度去思考问题，也是极好的。更有意思的是，之前看的诸多『闲书』，现在竟以各种各样的方式发挥着作用，果真『功不唐捐』。</p>
<p>今天早上正好跟同学聊起留美还是回国，抛开各种外在因素不说，回国最吸引我的就一点——一个验证自己可能性的机会。从小就听老爸说要『在广阔天地里大有作为』，真的离开学校之后，发现很多同学早已把『星辰大海』抛诸脑后。也许每个理想主义者终究要落地，但是我想在这之前去看看天有多高，地有多厚。</p>
<p>如果有缘能看到，这也是我最想对还在学校的同学们说的，每一次选择在当时看起来不过如此，但是回过头来看，很多巨变在那一刻就已经开始了。不要想着『以后我要怎样怎样』，如果真的想，就『现在』去做。</p>
<p>回到主题，既然名义上我还是工程师，就从工程师的工作来说起吧。</p>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>最近在做的主要工作之一是设计接口，作为应用程序对外的『门面』，接口的设计很多时候比具体实现要重要得多，这也是为什么我花了大量时间和精力去尝试和构思。虽然大家都知道要 RESTful 要正交，但有的时候这种灵活性带来的副作用是复杂。耦合虽说不容易修改，但一旦在精心设计之后形成一股合力，本身紧密的作用力带来的好处可能要比得到一定程度的灵活性要大得多。这些内容其实任何一本经典的计算机书籍都会涉及，但是具体的度，和细节中的推敲，就需要一定的工程实践以及实际检验才能给出答案了。</p>
<p>设计系统是如此，写书亦是如此，甚至更要精细打磨，因为程序能够修改，书印出来了，白纸黑字就没法改了。接口之于应用，就好比目录之于书籍，新书目录的确定真真切切是非常痛苦的事情，在一个多月的时间内至少变动了几十次，终于达到了令自己满意的状态。这些改动其实是随着准备工作的进行而不断发生的，在参阅了大量经典书籍和课程后，在不断的切磋中，才终于找到了自己的方向。但其实这才是万里长征的第一步，后面还有很多艰巨的工作在等着我。虽然是初出茅庐，但依然得假扮老司机，相信假着假着，就成真了。</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>系统是复杂的，哪怕是一个小的社区，其实往深处想，也有很多门道。如何去梳理整体的逻辑？三点：大处着眼，小处着手、目标清晰。从这里出发，可以给自己提出很多问题，比如：</p>
<ul>
<li>社区的历史包袱是什么？能不能找到一种方式，尽可能无痛甩开包袱？</li>
<li>社区的目标群体的层次是什么？现在主要需要抓住哪一类用户，如何去发现并抓住这些用户？</li>
<li>社区的推荐系统以及能量流动是怎样的规则，用户能从中获得什么，机制如何去影响用户？</li>
<li>社区的定位是什么，长中短期目标是什么？</li>
<li>能否参考不同领域的做法，比方说游戏中的常见玩法（工会、赛季、攻擂守擂等等）</li>
</ul>
<p>如果这些问题都想清楚了，恐怕社区下一步的目标就足够清晰了。而转念一想，写书同样要考虑清楚类似的问题：读者群体是什么、内容编排怎么做、能给读者提供什么、在整个阅读过程中的长中短期目标是什么等等。</p>
<h2 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h2><p>先提一句，这里的管理是从自我管理出发，慢慢延伸到更广义的管理的。自我管理的核心是效率，也就是说管理的终极目的是用更少的资源做成更多的事情。那么，对于我来说，自我管理就包含了一个巨大的矛盾：我需要以不同的角色参与到不同的项目中，但与此同时我们都知道『任务单一时效率最高』。</p>
<p>就像软件工程中没有银弹一样，这个矛盾同样没有完美的解法，只能在现有的框架中找寻最合理的解决方案。比方说我现在需要扮演的角色除了开发人员，还有产品经理、项目管理、沟通协调和部门对接，要处理的任务必然是持续且无序的。如果来一个做一个，频繁切换上下文，效率就很低。</p>
<p>目前的做法就是尽量把不同角色任务凑到一起，一次解决一系列问题，尽量减少切换次数，具体编排的依据就是那些不能变动的会议了，这样一口气解决，无论是状态还是具体的准备工作都能达到较好的程度。不过有的时候还是不可避免会『撞车』，今天以三个角色开完三个会之后我真的感觉自己已经是一个废人了，缓了好一阵才把各种事情梳理清晰，加入到之后的待办事项中。</p>
<p>解决了任务切换过多的问题，接下来就是时间控制和优先级设置的问题了，这个就我目前的经验来看，按照自己预估的完成时间乘以二或者三大概就是实际完成的时间，这样既考虑了难以预计的突发事件（比方说同事请假出去玩半个月），也照顾了需求临时变动所导致的时间变化。</p>
<p>个人尚且如此，如果是一个团队，则需要面对更复杂的多样性，难度是指数级增加的，关于这个问题，我自己也在慢慢摸索，这里就不妄下结论了。</p>
<h2 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h2><p>熵是一个足够伟大的定义。考虑到热力学在一定程度上的普适性，很多风马牛不相及的事情背后，都能看到熵的影子。简单来说，熵越大，有效能量就越小，系统也就越无序。但热力学第二定律告诉我们，熵的增加从总体来看是不可逆的。就像人固有一死一样，我们的目标就是重于泰山，而不是轻于鸿毛。</p>
<p>就拿写代码来说，如果随着业务需求不断增补，整个工程的熵就会快速增加，直到有一天再也无法维护，所以我的做法是一边写一边重构，尽量让熵增加的量最少。而好的架构设计使得一开始的基础熵值很小，并且架构本身也抑制了熵的快速增长；而坏的架构则是『助纣为虐』，最后变成谁都不愿意接的烂摊子。</p>
<p>项目管理和人员管理同样也是这个道理，不过有意思的是，团队并不是热力学中的『隔离系统』，是有机会发展成『自组织系统』的。所谓『自组织系统』，要点在于内部的有序结构，以及形成这种有序结构的推动力。自组织的程度越高，创新的能力就越强。与传统的他组织系统（需要依靠外部指令维持）相比，自组织系统能够各尽其责而又协调地自动地形成有序结构，是管理者梦寐以求的。</p>
<p>从维基中的介绍中我们能从不同的角度感受到自组织系统的魅力：</p>
<ul>
<li>从系统论的观点来说，”自组织”是指一个系统在内在机制的驱动下，自行从简单向复杂、从粗糙向细致方向发展，不断地提高自身的复杂度和精细度的过程</li>
<li>从热力学的观点来说，”自组织”是指一个系统通过与外界交换物质、能量和信息，而不断地降低自身的熵含量，提高其有序度的过程</li>
<li>从统计力学的观点来说，”自组织”是指一个系统自发地从最可几状态向几率较低的方向迁移的过程</li>
<li>从进化论的观点来说，”自组织”是指一个系统在”遗传”、”变异”和”优胜劣汰”机制的作用下，其组织结构和运行模式不断地自我完善，从而不断提高其对于环境的适应能力的过程</li>
<li>从结构论-泛进化理论的观点来说，”自组织”是指一个开放系统的结构稳态从低层次系统向高层次系统的构造过程，因系统的物质、能量和信息的量度增加，而形成比如生物系统的分子系统、细胞系统到器官系统乃至生态系统的组织化度增加，基因数量和种类自组织化和基因时空表达调控等导致生物的进化与发育（Evo-Dev）过程</li>
</ul>
<p>更多的介绍可以自行搜索『自组织』。</p>
<p>对我来说，自组织其实是应对熵增加的法宝，也给前面提到的『自我管理』指出了一个不一样的方向。不过具体还需要一段时间的磨练，只能希望自己早点『悟道』了。不过这个跟禅修一样，勉强不来，还是顺其自然，水到渠成就好。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>学 SIFT 算子的时候就深深意识到同一个东西，从不同的尺度去观察，就能看到不同的东西。从『看山不是山，看水不是水』到『看山还是山，看水还是水』也是这么个理儿。</p>
<p>不要限定自己，敢于跳出框架思考，在不同的领域和学科间游走，融会贯通后，去创造新世界。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近无论是写书还是设计系统都攒了不少思考，有(fei)些(chang)凌乱，但是还是想写一写。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="思考" scheme="http://wdxtub.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="系统" scheme="http://wdxtub.com/tags/%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="自洽" scheme="http://wdxtub.com/tags/%E8%87%AA%E6%B4%BD/"/>
    
  </entry>
  
  <entry>
    <title>Byobu 指南</title>
    <link href="http://wdxtub.com/2016/09/21/byobu-guide/"/>
    <id>http://wdxtub.com/2016/09/21/byobu-guide/</id>
    <published>2016-09-21T12:21:56.000Z</published>
    <updated>2016-09-21T12:23:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你觉得 tmux 或者 screen 的快捷键设置反人类，那么 Byobu 就是一个让你重新热爱终端的理由。</p>
<a id="more"></a>
<hr>
<p>作为一个黄金分段的 tmux 选手，在背熟了各种快捷键之后，就形成了一种惰性，懒得尝试新工具了。但是 byobu 绝对是一个值得尝试的『神器』，可以认为是 tmux 加上了一个靠谱的产品经理，各种功能和界面的设计都友好了很多，接下来就简要来说说如何使用。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>借助包管理器，安装 byobu 是非常简单的事情：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># Mac</span></div><div class="line">brew install tmux</div><div class="line">brew install byobu</div><div class="line"></div><div class="line"><span class="comment"># Ubuntu</span></div><div class="line">sudo apt install tmux</div><div class="line">sudo spt install byobu</div></pre></td></tr></table></figure>
<p>打开终端，键入 <code>byobu</code>，就可以看到完整界面了，如果之前有使用 tmux 的话，需要输入 <code>tmux kill-server</code> 关闭所有会话，然后再输入 <code>byobu</code>，不然看到的仍然是 tmux 的界面。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们先来简单了解一下 Byobu 的界面，Mac 的界面如下：</p>
<p><img src="/images/14744606094223.jpg" alt=""></p>
<p>而 Ubuntu 的界面如下：</p>
<p><img src="/images/14744605905498.jpg" alt=""></p>
<p>命令行的部分和正常的终端没任何差别，主要的变化是下面的状态栏，集成了窗口管理和系统重要信息显示等功能。比如说：启动时间、系统负载、核心数目、核心频率、内存大小、内存占用率、日期时间等等（这些都可以配置，具体参考文档）</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>如果是纯新手，那么上来先按一下 <code>F9</code>，就会进入 Byobu 的配置界面，这里包括了快速帮助和基本的配置调整，如下图所示：</p>
<p><img src="/images/14744605754279.jpg" alt=""></p>
<p>我们先跟着快速入门指南来学习一下基本的操作（这里只列出最常用的，具体的大家可以自己查阅）：</p>
<ul>
<li><code>Shift-F1</code> 在一个新窗口中显示帮助。有什么操作忘记的话，这是最快捷的方法</li>
<li><code>F2</code> 创建一个新窗口。跟 F2 相关的操作都是跟界面相关的（其中 Session 部分因为不太直观，这里不介绍）<ul>
<li><code>Shift-F2</code> 水平切分窗口</li>
<li><code>Ctrl-F2</code> 垂直切分窗口</li>
</ul>
</li>
<li><code>F3/F4</code> 用来切换窗口。<ul>
<li><code>Alt-Left/Right</code> 切换窗口</li>
<li><code>Shift-Left/Right/Up/Down</code> 在切分的窗口间切换</li>
<li><code>Shift-F3/F4</code> 在切分的窗口间切换</li>
</ul>
</li>
<li><code>F5</code> 重载 profile，刷新数据</li>
<li><code>F6</code> 关闭会话，但是在 Mac 上键盘是冲突的</li>
<li><code>F7</code> 进入滚动模式，用来查看历史记录</li>
<li><code>F8</code> 给当前的窗口重命名，方便以后辨认</li>
<li><code>F9</code> 启动 byobu 配置窗口<ul>
<li><code>Ctrl-F9</code> 输入命令，并且在所有的窗口中执行</li>
<li><code>Shift-F9</code> 输入命令，并且在所有的切分面板中执行</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>就我个人的使用体验来说，byobu 在 tmux 的基础上把一些常用操作的逻辑和按键进行了优化，比方说窗口切换就从原来的两组按键变成了一个。不过工具这个东西，还是要按照个人喜好，见仁见智了，不过更多选择更多欢笑，至少 byobu 好看呀。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://byobu.co/" target="_blank" rel="external">Byobu 官网</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你觉得 tmux 或者 screen 的快捷键设置反人类，那么 Byobu 就是一个让你重新热爱终端的理由。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="终端" scheme="http://wdxtub.com/tags/%E7%BB%88%E7%AB%AF/"/>
    
      <category term="Byobu" scheme="http://wdxtub.com/tags/Byobu/"/>
    
  </entry>
  
  <entry>
    <title>【Redis 实战】读书笔记</title>
    <link href="http://wdxtub.com/2016/09/20/redis-in-action-clip/"/>
    <id>http://wdxtub.com/2016/09/20/redis-in-action-clip/</id>
    <published>2016-09-20T13:14:40.000Z</published>
    <updated>2016-09-20T13:18:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Redis 是一个速度非常快的非关系型数据库，可以将存储在内存的键值对数据，可以使用复制特性来扩展性能，还可以使用客户端分片来扩展写性能。这本书从消灭瓶颈、简化代码、收集数据、分发数据、构建实用程序出发，并最终帮助读者更轻松地完成构建软件的任务。</p>
<a id="more"></a>
<hr>
<p>Redis 是一个速度非常快的非关系型数据库，可以将存储在内存的键值对数据，可以使用复制特性来扩展性能，还可以使用客户端分片来扩展写性能。</p>
<p>与 memcached 的不同：memcached 只能存储普通的字符串键，而 Redis 因为有不同的数据结构，能解决更广泛的问题，并且既可以用作主数据库使用，又可以作为其他存储系统的辅助数据库使用</p>
<p>Redis 每种数据类型都有自己的专属命令，另外还有批量操作(bulk operation)和不完全(partial)的事务支持。发布与订阅、主从复制、持久化、脚本</p>
<p>使用 Redis 而不是关系数据库或者其他硬盘存储数据库，可以避免写入不必要的临时数据，也免去了对临时数据进行扫描或者删除的麻烦，并最终改善程序的性能。</p>
<p>消灭瓶颈、简化代码、收集数据、分发数据、构建实用程序，并最终帮助读者更轻松地完成构建软件的任务</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>类型 - 结构存储的值 - 结构的读写能力</p>
<p>STRING - 可以是字符串、整数或者浮点数 - 对整个字符串或者字符串的其中一部分执行操作；对整数和浮点数执行自增或者自减操作</p>
<p>LIST - 一个链表，链表上的每个借点都包含了一个字符串 - 从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值查找或者移除元素</p>
<p>SET - 包含字符串的无序收集器(unordered collection)，并且被包含的每个字符串都是独一无二、各不相同的 - 添加、获取、移除单个元素；检查一个元素是否存在于集合中；计算交集、并集、差集；从集合里面随机获取元素</p>
<p>HASH - 包含键值对的无序散列表 - 添加、获取、移除单个键值对；获取所有键值对</p>
<p>ZSET - 字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定 - 添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</p>
<h2 id="文章投票"><a href="#文章投票" class="headerlink" title="文章投票"></a>文章投票</h2><p>根据文章的发布时间、投票数量计算出一个评分，然后按照这个评分来决定如何排序和展示文章。</p>
<p>一些规则</p>
<ul>
<li>一篇文章如果获得了至少 200 张支持票，就认为是有趣的文章</li>
<li>有趣的文章需要放到前 100 位至少一天</li>
<li>评分是随时间流逝不断减少的</li>
<li>使用 Unix 时间</li>
<li>计算评分需要乘以一个常量，这个常量是 432，因为一天的秒数 86400 除以所需要的支持票 200 就是 432</li>
<li>每篇文章会使用一个散列来存储文章的标题、指向文章的网址、发布文章的用户、文章的发布时间、文章得到的投票数量等信息</li>
</ul>
<p>命名空间的构建一般可以用类别和编号来构成，可以用 <code>:</code>, <code>.</code>, <code>/</code>, <code>|</code> 之类的来做分隔符，主要要保证分隔符的一致性。</p>
<p>注意使用冒号创建嵌套命名空间的方法</p>
<p>使用两个有序集合来有序地存储文章：第一个有序集合的成员为文章 ID，分值为文章的发布时间；第二个有序集合的成员同样为文章 ID，而分值则为文章的评分。通过这两个有序集合，网站既可以根据文章发布的先后顺序来展示文章，又可以根据文章评分的高低来展示文章。</p>
<p>为了防止用户对同一篇文章进行多次投票，网站需要为每篇文章记录一个已投票用户名单。为此，程序将为每篇文章创建一个集合，并使用这个集合来存储所有已投票用户的 ID</p>
<p>为了尽量节约内存，我们规定当一篇文章发布期满一周之后，用户将不能对它进行投票，文章的评分将被固定下来，而记录文章已投票用户名单的集合也会被删除</p>
<p>群组功能由两个部分组成，一个部分负责记录文章属于哪个群组，另一个部分负责取出群组里面的文章。为了记录各个群组都保存了哪些文章，网站需要为每个群组创建一个集合，并将所有同属一个群组的文章 ID 都记录到那个集合里面</p>
<p>然后可以使用这个群组集合与分值的有序集合做 <code>ZINTERSTORE</code> 操作，就可以得到该群组里面文章的对应分值。这里最好把每次计算的结果保存 60 秒，避免短时间内大量的重复计算</p>
<h2 id="Web-应用中的-Redis"><a href="#Web-应用中的-Redis" class="headerlink" title="Web 应用中的 Redis"></a>Web 应用中的 Redis</h2><ul>
<li>基于令牌 cookie 和 Redis 一起实现的登录功能</li>
<li>利用 Redis 保存购物车信息，每个购物车都是一个散列，存储了商品 ID 与商品订购数量</li>
<li>缓存网页（不需要每次都进行渲染）</li>
<li>缓存数据行（尽量减少直接访问数据库的机会）</li>
<li>自动补全程序的数据源</li>
<li>构建分布式锁来提高性能（锁本身也可以带有超时）</li>
<li>开发计数信号量来控制并发</li>
<li>任务队列</li>
<li>消息拉取系统来实现延迟消息传递</li>
<li>文件分发</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>要在 Redis 里面执行事务，我们首先需要执行 MULTI 命令，然后输入那些我们想要在事务里面执行的命令，最后再执行 EXEC 命令。当 Redis 从一个客户端那里接收到 MULTI 命令时，Redis 会将这个客户端之后发送的所有命令都放入到一个队列里面，直到这个客户端发送 EXEC 命令为止，然后 Redis 就会在不被打断的情况下，一个接一个地执行存储在队列里面的命令。从语义上来说，Redis 事务在 Python 客户端上面是由流水线实现的：对连接对象调用 pipeline() 方法将创建一个事务，在一切正常的情况下，客户端会自动地使用 MULTI 和 EXEC 包裹起用户输入的多个命令。此外，为了减少 Redis 与客户端之间的通信往返次数，提升执行多个命令时的性能，Python 的 Redis 客户端会存储起事务包含的多个命令，然后在事务执行时一次性地将所有命令都发送给 Redis。</p>
<p>MULTI 和 EXEC 事务的一个主要作用是移除竞争条件。</p>
<h2 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h2><p>只有少数几个命令可以原子地为键设置过期时间，并且对于列表、集合、散列和有序集合这样的容器来说，键过期命令只能为整个键设置过期时间，而没办法为键里面的单个元素设置过期时间（为了解决这个问题，本书在好几个地方都使用了存储时间戳的有序集合来实现针对单个元素的过期操作）</p>
<p>这部分需要深挖一下</p>
<h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>Redis 可以通过创建快照来获得存储在内存里面的数据在某个时间点上的副本。在创建快照之后，用户可以对快照进行备份，可以将快照复制到其他服务器从而创建具有相同数据的服务器副本，还可以将快照留在原地以便重启服务器时使用。</p>
<p>根据配置，快照将被写入 dbfilename 选项指定的文件里面，并存储在 dir 选项指定的路径上面。如果在新的快照文件创建完毕之前，Redis、系统或者硬件这三者之中的任意一个崩溃了，那么 Redis 将丢失最近一次创建快照之后写入的所有数据</p>
<p>在个人开发服务器上面，主要考虑的是尽可能地降低快照持久化带来的资源消耗。基于这个原因以及对自己硬件的信任，我只设置了 <code>save 900 1</code> 这一条规则。其中 <code>save</code> 选项告知 Redis，它应该根据这个选项提供的两个值来执行 <code>BGSAVE</code> 操作。在这个规则设置下，如果服务器距离上次成功生成快照已经超过了 900 秒，并且在此期间执行了至少一次写入操作，那么 Redis 就回自动开始一次新的 <code>BGSAVE</code> 操作。</p>
<p>如果你打算在生产服务器中使用快照持久化并存储大量数据，那么你的开发服务器最好能够运行在与生产服务器相同或者相似的硬件上面，并在这两个服务器上使用相同的 <code>save</code> 选项、存储相似的数据集并处理相近的负载量。把开发环境设置得尽量贴近生产环境，有助于判断快照是否生成得过于频繁或者过于稀少。</p>
<p>当 Redis 存储的数据量只有几个 GB 的时候，使用快照来保存数据是没有问题的。Redis 会创建子进程并将数据保存到硬盘里面，生成快照所需的时间比你读这句话所需的时间还要短。但随着 Redis 占用的内存越来越多，<code>BGSAVE</code> 在创建子进程时耗费的时间也会越来越多。如果 Redis 的内存占用量达到数十个 GB，并且剩余的空闲内存并不多，或者 Redis 运行在虚拟机上面，那么执行 <code>BGSAVE</code> 可能会导致系统长时间地停顿，也可能引发系统大量地使用虚拟内存，从而导致 Redis 的性能降低至无法使用的成都</p>
<p>执行 <code>BGSAVE</code> 而导致的停顿时间有多长取决于 Redis 所在的系统：对于真实的硬件、VMWare 虚拟机或者 KVM 虚拟机来说，Redis 进程每占用一个 GB 的内存，创建该进程的子进程所需的时间就要增加 10-20 毫秒；而对于 Xen 虚拟机来说，根据配置的不同，Redis 进程每占用一个 GB 的内存，创建该进程的子进程所需的时间就要增加 200-300 毫秒。</p>
<p>因此，如果我们的 Redis 进程占用了 20GB 的内存，那么在标准硬件上运行 <code>BGSAVE</code> 所创建的子进程将导致 Redis 停顿 200-400 毫秒；如果我们使用的是 Xen 虚拟机（亚马逊 EC2 和其他几个云计算供应商都使用这种虚拟机），那么相同的创建子进程操作将导致 Redis 停顿 4-6 秒。用户必须考虑自己的应用程序能否接受这种停顿。</p>
<p>为了防止 Redis 因为创建子进程二出现停顿，我们可以考虑关闭自动保存，转而通过手动发送 <code>BGSAVE</code> 或者 <code>SAVE</code> 来进行持久化。手动发送 <code>BGSAVE</code> 一样会引起停顿，唯一不同的是用户可以通过手动发送 <code>BGSAVE</code> 命令来控制停顿出现的时间。另一方面，虽然 <code>SAVE</code> 会一直阻塞 Redis 直到快照生成完毕，但是因为它不需要创建子进程，所以就不会像 <code>BGSAVE</code> 一样因为创建子进程而导致 Redis 停顿；并且因为没有子进程在争抢资源，所以 <code>SAVE</code> 创建快照的速度回避 <code>BGSAVE</code> 创建快照的速度要来得更快一些。</p>
<p>根据我的经验，在一台拥有 68GB 内存的 Xen 虚拟机上面，对一个占用 50GB 内存的 Redis 服务器执行 <code>BGSAVE</code> 命令的话，光是创建子进程就需要花费 15 秒以上，而生成快照则需要花费 15-20 分钟；蛋使用 <code>SAVE</code> 只需要 3-5 分钟就可以完成快照的生成工作。因为我的应用程序只需要每天生成一次快照，所以我写了一个脚本，让它在每天凌晨 3 点停止所有客户端对 Redis 的访问，调用 <code>SAVE</code> 命令并等待该命令执行完毕，之后备份刚刚生成的快照文件，并通知客户端继续执行操作。</p>
<p>如果用户能够妥善地处理快照持久化可能会带来的大量数据丢失，那么快照持久化对用户来说将是一个不错的选择，但对于很多应用程序来说，丢失 15 分钟的数据都将是不可接受的，在这种情况下，我们可以使用 AOF 持久化来存储在内存里面的数据尽快地保存到硬盘里面。</p>
<h3 id="AOF-持久化"><a href="#AOF-持久化" class="headerlink" title="AOF 持久化"></a>AOF 持久化</h3><p>简单来说，AOF 持久化会将被执行的写命令写到 AOF 文件的末尾，以此来记录数据发生的变化。因此，Redis 只要从头到尾执行一次 AOF 文件包含的所有写命令，就可以恢复 AOF 文件所记录的数据集。</p>
<p>在向硬盘写入文件时，至少会发生 3 件事。当调用 <code>file.write()</code> 方法对文件进行写入时，写入的内容首先会被存储到缓冲区，然后操作系统会在将来的某个时候将缓冲区存储的内容写入硬盘，而数据只有在被写入硬盘之后，才算是真正地保存到了硬盘里面。用户可以通过调用 <code>file.flush()</code> 方法来请求操作系统尽快地将缓冲区存储的数据写入硬盘里，但具体何时执行写入操作仍然由操作系统决定。除此之外，用户还可以命令操作系统将文件同步(sync)到硬盘，同步操作会一直阻塞直到指定的文件被写入硬盘为止。当同步操作执行完毕之后，即使系统出现故障也不会对被同步的文件造成任何影响。</p>
<p>如果用户使用 <code>appendfsync always</code> 选项的话，那么每个 Redis 写入命令都会被写入硬盘，从而将发生系统崩溃时出现的数据丢失减到最少。不过遗憾的是，因为这种同步策略需要对硬盘进行大量写入，所以 redis 处理命令的速度会受到硬盘性能的限制：机械硬盘在这种同步频率下每秒智能处理大约 200 个写命令，而固态硬盘每秒大概也只能处理几万个写命令。</p>
<p>使用固态硬盘的用户请谨慎使用 <code>appendfsync always</code> 选项，因为这个选项让 Redis 每次只写入一个命令，这种不断写入少量数据的做法可能会引发严重的写入放大(write amplification) 问题，在某些情况下甚至会将固态硬盘的寿命从原来的几年降低为几个月。</p>
<p>为了兼顾数据安全和写入性能，用户可以考虑使用 <code>appendfsync everysec</code> 选项，让 Redis 以每秒一次的频率对 AOF 文件进行同步。Redis 每秒同步一次 AOF 文件时的性能和不使用任何持久化特性时的性能相差无几。</p>
<p>为了解决 AOF 文件体积不断增大的问题，用户可以向 Redis 发送 <code>BGREWRIEAOF</code> 命令，这个命令会通过移除 AOF 文件中的冗余命令来重写 AOF 文件，使其体积尽可能小。</p>
<hr>
<p>使用复制和 AOF 持久化可以极大地保障数据安全；在多个客户端同时处理相同的数据时，可以使用 <code>WATCH</code>, <code>MULTI</code>, <code>EXEC</code> 等命令来防止数据出错。</p>
<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>通过 Redis 自带的性能测试程序 <code>redis-benchmark</code> 来了解 Redis 的性能特征</p>
<p><code>redis-benchmark -c 1 -q</code> 利用 <code>-q</code> 简化输出结果，给定 <code>-c 1</code> 让程序只使用一个客户端来进行测试</p>
<ul>
<li>单个客户端的性能达到了 redis-benchmark 的 50%~60% - 不使用流水线时的预期性能</li>
<li>单个客户端的性能达到了 redis-benchmark 的 25%~30% - 对于每个命令或者每组命令都创建了新的连接 - 通过重用已有的 Redis 连接解决</li>
<li>客户端返回错误 Cannot assign requested address - 对于每个命令或者每组命令都创建了新的连接 - 通过重用已有的 Redis 连接解决</li>
</ul>
<p>大部分 Redis 客户端都提供了某种级别的内置连接池（需要看看是否支持）</p>
<h2 id="基于搜索的应用程序"><a href="#基于搜索的应用程序" class="headerlink" title="基于搜索的应用程序"></a>基于搜索的应用程序</h2><ul>
<li>预处理：反向索引，parsing, tokenization, token, word</li>
<li>去 stop words</li>
<li>用户给出多个单词，就在多个单词对应的集合中求交集即可</li>
</ul>
<h2 id="广告定向"><a href="#广告定向" class="headerlink" title="广告定向"></a>广告定向</h2><p>广告服务器是一种小而复杂的技术。每当用户访问一个带有广告的 Web 页面时，Web 服务器和用户的 Web 浏览器都会向远程服务器发送请求以获取广告，广告服务器会接收各种各样的信息，并根据这些信息找出能够通过点击、浏览或动作获得最大经济收益的广告。</p>
<p>广告服务器需要接受一系列定向参数以便挑选出具体的广告，这些参数至少需要包含浏览者的基本位置信息（通常来源于 IP 地址）、浏览者使用的操作系统以及 Web 浏览器、可能还有浏览者正在浏览的页面的内容，甚至浏览者在当前网站上最近浏览过的一些页面。</p>
<p>广告预算：在典型的定向广告平台上面，每个广告通常都会带有一个随着时间减少的预算。一般来说，广告预算应该被分配到不同的时间上面，我发现的一种实用且有效的方法，就是基于小时数对广告的总预算进行划分，并在同一个小时的不同时间段把预算分配给不同的广告。</p>
<p>针对广告的索引操作和针对其他内容的索引操作并没有太大的不同。广告索引操作的特别之处在于它返回的不是一组广告或者一组搜索结果，而是单个广告；并且被索引的广告通常都拥有像位置、年龄或性别这类必须的定向参数。</p>
<p>接下来介绍的是基于位置和内容对广告进行索引的方法。我们先了解如何以一致的方式评估广告的价格。</p>
<h3 id="计算广告的价格"><a href="#计算广告的价格" class="headerlink" title="计算广告的价格"></a>计算广告的价格</h3><p>Web 页面上展示的广告主要有 3 种方式：按展示次数计费(cost per view)、按点击次数计费(cost per click)和按动作执行次数计费(cost per action)。按动作执行次数计费又称按购买次数计费(cost per acquisition)。按展示次数计费的广告又称 CPM 广告或按千次计费(cost per mille)广告，这种广告每展示 1000 次就需要收取固定的费用。按点击计费的广告又称 CPC 广告，这种广告根据被点击的次数收取固定的费用。按动作执行次数计费的广告又称 CPA 广告，这种广告根据用户在广告目的地网站上执行的动作收取不同的费用。</p>
<h3 id="让广告的价格保持一致"><a href="#让广告的价格保持一致" class="headerlink" title="让广告的价格保持一致"></a>让广告的价格保持一致</h3><p>为了尽可能地简化广告的计算方式，程序将对所有类型的广告进行转换，使得它们的价格可以基于每千次展示进行计算，产生出一个估算 CPM(estimated CPM)，简称 eCPM。对于 CPM 广告来说，因为这种广告已经给出了 CPM 价格，所以程序只要直接把它的 CPM 用作 eCPM 就可以了。至于 CPC 广告和 CPA 广告，程序则需要根据相应的规则为它们计算出 eCPM。</p>
<h3 id="计算-CPC-广告的-eCPM"><a href="#计算-CPC-广告的-eCPM" class="headerlink" title="计算 CPC 广告的 eCPM"></a>计算 CPC 广告的 eCPM</h3><p>对于 CPC 广告，程序只要将广告的每次点击架构乘以广告的点击通过率(click-through rate, CTR)，然后再乘以 1000，得出的结果就是广告的 eCPM（其中点击通过率可以用广告被点击的次数除以广告展示的次数计算得出）。举个例子，如果广告的每次点击价格为 0.25 美元，通过率为 0.2%(即0.002)，那么广告的 eCPM 为 0.25x0.002x1000=0.5 美元</p>
<h3 id="计算-CPA-广告的-eCPM"><a href="#计算-CPA-广告的-eCPM" class="headerlink" title="计算 CPA 广告的 eCPM"></a>计算 CPA 广告的 eCPM</h3><p>CPA 广告计算 eCPM 的方法和 CPC 广告计算 eCPM 的方法在某种程度上是相似的。程序只需要将广告的点击通过率、用户在广告投放者的目标页面上执行动作的概率、被执行动作的价格这三者相乘起来，然后再乘以 1000，得出的结果就是广告的 eCPM。举个例子，如果广告的点击通过率为 0.2%，用户执行动作的概率为 10%（即 0.1)，而广告的 CPA 为 3 美元，那么广告的 eCPM 为 0.002x0.1x3x1000=0.60 美元</p>
<h3 id="将广告插入索引"><a href="#将广告插入索引" class="headerlink" title="将广告插入索引"></a>将广告插入索引</h3><p>对广告进行定向需要用到一组定向参数，其中既有可选的参数，也有必须的参数。为了正确地进行广告定向，广告的索引必须考虑定向的需求。本节要实现的广告系统接受两个定向选项：位置和内容。其中位置选项（包括城市、州和国家）是必须的，而广告与页面内内容之间的任何匹配单词则是可选的，并且只作为广告的附加值存在。</p>
<h3 id="执行广告定向操作"><a href="#执行广告定向操作" class="headerlink" title="执行广告定向操作"></a>执行广告定向操作</h3><p>当系统收到广告定向请求的时候，它要做的就是在匹配用户所在位置的一系列广告里面，找出 eCPM 最高的那一个广告。除了基于位置对广告进行匹配之外，程序还会记录页面内容与广告内容的匹配程度，以及不同匹配程度的那些内容就回作为附加值被计入由 CPC 和 CPA 计算出的 eCPM 里面，使得哪些包含了匹配内容的广告能够更多地被展示出来。</p>
<p>在展示广告之前，系统不会为 Web 页面的任何内容设置附加值。但是当系统开始展示广告的时候，它就会记录下广告中包含的哪个单词改善或者损害了广告的预期效果，并据此修改各个可选的定向单词的相对价格。</p>
<h2 id="构建简单的社交网站"><a href="#构建简单的社交网站" class="headerlink" title="构建简单的社交网站"></a>构建简单的社交网站</h2><p>在用户与 Twitter 进行交互时，用户和状态消息这两类对象是最为重要的。用户对象存储了用户的基本身份标识信息、用户的关注者人数、用户已发布的状态消息数量等信息。用户对象对于社交网站来说非常重要，因为它是构建其他可用并且有趣的数据的起点。除了用户对象以外，状态消息也同样重要，因为它记录了不同的用户都说了些什么，以及不同用户之间进行了什么交互，这些由用户创建的状态消息是社交网站真正的内容。</p>
<p>用散列来存储用户信息，这些信息包括用户的用户名、用户拥有的关注者人数、用户正在关注的人的数量、用户已经发布的状态消息的数量、用户的注册日期以及其他一些元信息。</p>
<p>当一个新用户进行注册的时候，程序需要做的就是根据用户指定的用户名以及当时的时间戳，创建一个正在关注数量、关注者数量、已发布状态消息数量都被设置为 0 的对戏那个。</p>
<p>创建新用户的函数除了会对存储用户信息的散列进行初始化之外，还会对用户的用户名进行加锁，这个加锁操作是必须的，它可以防止多个请求在同一时间使用相同的用户名来创建新用户。在对用户名进行加锁之后，程序会检查这个用户名是否已经被其他用户抢先占用了，如果这个用户名尚未被占用的话，那么程序会为这个用户生成一个独一无二的 ID，并将用户名与用户 ID 进行关联，最后将这个用户信息存储到新创建的散列里面。</p>
<p>敏感的用户信息：因为程序会频繁地取出存储用户信息的散列用于渲染模板，或者直接用作 API 请求的回复，所以程序不能将散列吼的密码、邮件地址等敏感信息存储在这个用户信息散列里面。</p>
<p>程序既会将用户的个人信息存储到用户简介里面，又会将用户所说的话记录到状态消息里面，并且和存储用户个人信息时的方法一样，程序也使用散列结构来存储状态消息。</p>
<p>用户在已登录的情况下访问 Twitter 时，首先看到的是他们自己的主页时间线，这个时间线是一个列表，它由用户以及用户正在关注的人所发布的状态消息组成。因为主页时间线是用户访问网站时的主要入口，所以这些数据必须尽可能地易于获取。</p>
<p>我们希望能够尽快地获取展示一个页面所需的全部数据，因此我们决定使用有序集合来实现主页时间线，并使用有序集合的成员来记录状态消息的 ID，而有序集合的分值则用于记录状态消息发布时的时间戳。</p>
<p>因为主页时间线只存储了状态消息的 ID 而不是状态消息本身，所以负责获取最新发布的状态消息的函数除了要获取状态消息的 ID 之外，还需要根据所得的 ID 获取相应的状态消息数据。</p>
<p>用户的主页时间线和个人时间线都是由有序集合存储的，这些有序集合存储着状态消息的 ID 以及状态消息发布时的时间戳。用户的正在关注列表以及关注者列表同样由有序集合存储，其中有序集合的成员为用户 ID，而分值则记录了用户开始关注某人或者被某人关注时的时间戳。</p>
<p>当用户开始关注或者停止关注另一个用户的时候，程序就需要对这两个用户的正在关注有序集合以及关注者有序集合进行更新，并修改他们在用户信息散列里面记录的关注数量和被关注数量。如果用户执行的是关注操作，那么程序在对以上提到的有序集合和散列进行更新之后，还需要从被关注用户的个人时间线里面，复制一些状态消息 ID 到执行关注操作的用户的主页时间线里面，从而使得用户在关注另一个用户之后，可以立即看见被关注用户所发布的状态消息。</p>
<p>在关注某个人并阅读他的状态消息一段时间之后，用户可能会想要取消对那个人的关注。实现取消关注操作的方法和实现关注操作的方法正好相反：程序会从正在关注有序集合以及关注者有序集合里面移除关注者和被关注者双方的用户 ID，并从执行取消关注操作的用户的主页时间线里面移除被取消关注的人所发布的状态消息，最后对两个用户的正在关注数量以及关注者数量进行更新。</p>
<p>前面已经介绍了程序是如何创建新的状态消息的，而在此之后，程序要做的就是想办法把新状态消息的 ID 添加到每个关注者的主页时间线里面。具体的添加方式会根据消息发布人拥有的关注者数量的多少而有所不同。如果用户的关注者数量相对比较少，那么程序可以立即更新每个关注者的时间线。但是，如果用户的关注者数量非常庞大，那么直接执行添加操作将导致发布消息的用户需要长时间地进行等待，超出合理的等待时间。</p>
<p>为了让发布操作可以尽快地返回，程序需要做两件事情。首先，在发布状态消息的时候，程序会将状态消息的 ID 添加到前 1000 个关注者的主页时间线里面。剩余的会放到任务队列中进行执行延迟执行。</p>
<p>在开发社交网站的过程中，我们可能会想要知道更多网站上正在发生的事情——比如网站每个小时会发布多少条新的状态消息，网站上最热门的主题是什么，诸如此类。我们可以构建一些函数来广播简单的事件，然后由负责进行数据分析的事件监听器来接收并处理这些事件。</p>
<p>流 API 跟我们前面为了仿制 Twitter 而构建的其他部分完全不同，前面几节实现的 Twitter 典型操作都需要尽快地执行并完成，而流 API 请求则需要在一段比较长的时间内持续地返回数据。</p>
<p>在构建流 API 的过程中需要进行各种各样的决策，主要和以下三个问题有关：</p>
<ul>
<li>流 API 需要对外公开哪些事件</li>
<li>是否需要进行访问限制？如果需要的话，采取何种方式实现？</li>
<li>流 API 应该提供哪些过滤选项？</li>
</ul>
<p>我们的社交网站提供的过滤选项(filtering option)在特性和功能方面与 Twitter 为公开流(public stream)提供的 API 非常相似：用户既可以通过关注过滤器（基于用户进行过滤）、监测过滤器（基于关键字进行过滤）以及位置过滤器来获取过滤后的消息，又可以通过类似 Twitter 的消防水管(firehose)和样本(sample)这样的流来获取一些随机的消息。</p>
<p>每当新诞生的状态消息与过滤器相匹配的时候，流 APi 就会将这条消息返回给客户端。尽管 WebSockets 和 SPDY 这样的新技术可以以增量的方式不断地生成数据，甚至进行服务器端的消息推送，但是这些技术的相关协议并未完全制定好，而且很多编程语言的客户端也未能完全地支持这些新技术。幸运的是，只要使用分块(chunked)传输编码，我们就可以使用 HTTP 服务器生成并发送增量式数据。</p>
<h2 id="进阶内容"><a href="#进阶内容" class="headerlink" title="进阶内容"></a>进阶内容</h2><p>降低 Redis 内存占用的三种方法：</p>
<ul>
<li>短结构(short structure)</li>
<li>分片结构(shared structure)</li>
<li>打包存储二进制位和字节</li>
</ul>
<h3 id="短结构"><a href="#短结构" class="headerlink" title="短结构"></a>短结构</h3><p>Redis 为列表、集合、散列和有序集合提供了一组配置选项，这些选项可以让 Redis 以更节约空间的方式存储长度较短的结构。</p>
<p>在列表、散列和有序集合的长度较短或者体积较小的时候，Redis 可以选择使用一种名为压缩列表(ziplist)的紧凑存储方式来存储这些结构。压缩列表是列表、散列和有序集合这 3 种不同类型的对象的一种非结构化(unstructured)表示：与 Redis 在通常情况下使用双链表表示列表、使用散列表表示散列、使用散列表加上跳跃表(skiplist) 表示有序集合的做法不同，压缩列表会以序列化的方式存储数据，这些序列化数据每次被读取的时候都要进行解码，每次被写入的时候也要进行局部的重新，并且可能需要对内存里面的数据进行移动。</p>
<p>让键名保持简短！</p>
<h3 id="分片结构"><a href="#分片结构" class="headerlink" title="分片结构"></a>分片结构</h3><p>分片本质上就是基于某些简单的规则将数据划分为更小的部分，然后根据数据所属的部分来决定将数据发送到哪个位置上面。</p>
<p>程序不再是将值 X 存储到键 Y 里面，而是将值 X 存储到键 Y:<shardid> 里面。</shardid></p>
<p>对列表进行分片：想要在不使用 Lua 脚本的情况下对列表进行分片是非常困难的事。</p>
<h3 id="打包存储二进制位和字节"><a href="#打包存储二进制位和字节" class="headerlink" title="打包存储二进制位和字节"></a>打包存储二进制位和字节</h3><p>暂时略</p>
<h2 id="Lua-脚本"><a href="#Lua-脚本" class="headerlink" title="Lua 脚本"></a>Lua 脚本</h2><ul>
<li>通过 Redis 客户端可以载入 Lua 脚本</li>
<li>传递给 Lua 脚本的键和参数：尽管被载入程序包裹了起来，调用 Lua 脚本至少需要传递 3 个参数：第一个是必不可少的 Redis 连接，第二个是由任意多个键组成的列表，第三个是由任意多个需要传递给脚本的参数组成的列表</li>
<li>Lua 脚本跟单个 Redis 命令已经 <code>MULTI/EXEC</code> 事务一样，都是原子操作</li>
<li>已经对结构进行了修改的 Lua 脚本将无法被中断</li>
<li>Lua 重写锁的机制</li>
<li>移除 WATCH/MULTI/EXEC 事务</li>
<li>对列表进行分片</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Redis 是一个速度非常快的非关系型数据库，可以将存储在内存的键值对数据，可以使用复制特性来扩展性能，还可以使用客户端分片来扩展写性能。这本书从消灭瓶颈、简化代码、收集数据、分发数据、构建实用程序出发，并最终帮助读者更轻松地完成构建软件的任务。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="实践" scheme="http://wdxtub.com/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="Redis" scheme="http://wdxtub.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>欧洲『研究项目管理』相关公司小调查</title>
    <link href="http://wdxtub.com/2016/09/18/euro-project-company-guide/"/>
    <id>http://wdxtub.com/2016/09/18/euro-project-company-guide/</id>
    <published>2016-09-18T14:48:28.000Z</published>
    <updated>2016-09-18T14:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要，对欧洲几个『研究项目管理』公司做了基本的调查，也大致了解基本的套路。作为刚刚接触这个领域的菜鸟，还是有很多基本的东西需要记录一下的。</p>
<a id="more"></a>
<hr>
<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>这类公司走的基本都是提供咨询跑腿写文档这类服务的路线，比较大一点的提供的服务齐全一些，从开始写 proposal 到具体的协商最后到项目的研发都可以在一旁打辅助。用他们的话说就是各种高大上的词汇：管理、人脉、训练、交流、沟通、协调、监督等等。</p>
<p>根据不同的合作程度，收费的方式也不大一样，有的是直接以『合作伙伴』的方式加入，拿走大约 7% 的经费；有的则是固定收费（收费标准得跟他们具体了解，不会明码标价写在网站上，似乎欧洲公司的风格就是如此）</p>
<p>这里主要介绍三家公司，它们的背景和资历都不大一样，涉及的业务方向也有差别，不过总体看来都是围绕着 European Commission 的相关项目进行的。接下来会简要介绍一下这三家公司。</p>
<h2 id="EURICE"><a href="#EURICE" class="headerlink" title="EURICE"></a>EURICE</h2><p>Eurice 公司成立与 2000 年，提供的围绕着研发项目的计划、启动、实施等服务，是德国最大的项目管理公司之一，总部在 Saarbrücken（位于德国，与法国的边境附近），2014 年在柏林开了分部。</p>
<p><img src="/images/14742101935820.jpg" alt=""></p>
<p>核心员工约 40 人，参与过的项目主要是疾病/医疗/癌症/生物/环保/农业/材料相关的。与我们公司的业务基本没有很多重合的部分，故暂时不予考虑。</p>
<h2 id="GABO-mi"><a href="#GABO-mi" class="headerlink" title="GABO:mi"></a>GABO:mi</h2><p>GABO:mi 成立于 2005 年，参与过 FP7, Horizon 2020 和 IMI 这几个大的研究项目，最近被 ATRRIC 公司收购（成立于 1987 年）。是 European Commission 认证的排名第一的公司（获得的 Agreements 最多）</p>
<p><img src="/images/14742101813143.jpg" alt=""></p>
<p>这家公司的合作方式比较特别，是以合作伙伴的方式来参与的，费用最多会占到整个项目经费的 7%。</p>
<p>另外一个优势是这家公司属于中小型公司(SME, small and medium-sized company)。在 European Commission 的计划中是有扶持的。</p>
<p>GABO:mi 在项目开始之前还提供以下服务:</p>
<ul>
<li>Grant Agreement(实际与 European Commission 进行接触)</li>
<li>Technical Annex(描述项目所需要完成的工作)</li>
<li>收集各类法律文件</li>
<li>Consortium Agreement(规范各个合作伙伴)</li>
<li>建立可持续的金融计划</li>
<li>遵守 EU 的规则和截止日期</li>
</ul>
<p>在提交 Proposal 阶段提供的服务有：</p>
<ul>
<li>基于多年经验的专家级知道建议</li>
<li>带细致描述的 proposal 模板</li>
<li>收集从各个合作伙伴公司获得的资料</li>
<li>预算准备</li>
<li>提供 EU Commission 的在线 proposal 系统的所有信息</li>
<li>与 EU commission  和 national contact points (NCP)</li>
</ul>
<p>如果 European Commission(EC) 给予了 proposal 积极评价的话，会进入协商阶段。GABO:mi 同样会提供全程的服务。包括：</p>
<ol>
<li>评估报告摘要，也就是 EC 的反馈和建议</li>
<li>GABO:mi 本身也会参与到 EC 给出评估报告的过程中</li>
<li>Annex I 准备，这是项目 proposal 的一个扩展，会根据 EC 的指南进行编写</li>
<li>协助进行各种文件的签署与提交</li>
</ol>
<h2 id="ZAZ-Ventures"><a href="#ZAZ-Ventures" class="headerlink" title="ZAZ Ventures"></a>ZAZ Ventures</h2><p>比较新的一个小公司，但是提供的服务是比较齐全的。需要先交一部分定金，后面的是根据申请情况来决定。</p>
<p>提供的服务有：</p>
<ul>
<li>不同项目的大致介绍，以及跟同领域的相关伙伴牵头（免费服务）</li>
<li>帮忙写 proposal（申请成功后按照一定比例收费）</li>
<li>由经验丰富的 EC 专家进行分析，提供完整的评估报告（必须申请成功，375 欧元/次）</li>
</ul>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><blockquote>
<p>研究经费是不是很晚才能到账？</p>
</blockquote>
<p>不是的，一般来说，在项目开始的时候会给 35% 的经费，不过从申请到项目正式开始的流程可能最多需要 8 个月才能完成。</p>
<blockquote>
<p>需要提前准备好大量的文档吗？</p>
</blockquote>
<p>​不是的，在获得 EC 的经费时候，需要填写一些报告，不过大部分的工作会由负责协调的公司来完成。</p>
<blockquote>
<p>EC 的经费算是贷款还是补贴吗？</p>
</blockquote>
<p>几乎所有的项目都是以补贴的形式进行的，意味着不需要提供对应的产权或偿还这笔钱。公司享有 100% 的所有权，唯一的责任是向 EC 提供项目的结果。</p>
<blockquote>
<p>完成一份好的 proposal 需要多久？</p>
</blockquote>
<p>不同的项目不一样，H2020 的 proposal 一般需要 400-600 小时，大部分工作会由研究项目管理公司完成，我们只需要不到 50 小时，提供具体的研究内容和审阅他们撰写的 proposal 草稿。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不同的公司工作方式也不大一样，这类需要大量沟通和文书的工作最好还是有专人进行对接和负责，不能光看他们说什么，更重要的是他们怎么做。</p>
<p>个人感觉还是类似 GABO:mi 这种老牌公司稳定一些，但是对于小公司来说，也可能为了打响名声提供比老牌公司更走心的服务，还是要具体问题具体分析了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="http://eurice.eu/" target="_blank" rel="external">EURICE</a></li>
<li><a href="http://gabo-mi.com/index.php" target="_blank" rel="external">GABO:mi</a></li>
<li><a href="http://www.zazventures.com/" target="_blank" rel="external">ZAZ Ventures</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要，对欧洲几个『研究项目管理』公司做了基本的调查，也大致了解基本的套路。作为刚刚接触这个领域的菜鸟，还是有很多基本的东西需要记录一下的。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="欧洲" scheme="http://wdxtub.com/tags/%E6%AC%A7%E6%B4%B2/"/>
    
      <category term="公司" scheme="http://wdxtub.com/tags/%E5%85%AC%E5%8F%B8/"/>
    
      <category term="管理" scheme="http://wdxtub.com/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>第十四周 - 故梦</title>
    <link href="http://wdxtub.com/2016/09/16/old-dream/"/>
    <id>http://wdxtub.com/2016/09/16/old-dream/</id>
    <published>2016-09-16T09:49:07.000Z</published>
    <updated>2016-09-16T12:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>旧忆像一扇窗，推开再难合上。就这样去流浪，到美丽的地方。谁的歌声轻轻唱，谁的泪水静静淌，斜阳渐矮只影长，昏黄烛火轻摇晃。</p>
<a id="more"></a>
<hr>
<p>因为中秋假期，这周过得似乎特别快。工作之后，哪怕只是多休息一天，都有如此强的幸福感。虽然做的事情自己还蛮喜欢，不过确实比在学校里辛苦多了。话虽如此，当初选择回来就是要苦吾心智劳吾筋骨的，我心甘情愿接受挑战，和挑战过程中的所有磨难。接下来因为同事任性出去耍两周，所以要扛起俩项目了，希望不要出什么差错。</p>
<p>上周末恰逢生日，爸妈从广州来深圳陪我过，让这样一座人来人往脚步匆匆的城市于我有了些许家的感觉。晚上和几个要好的同事一起吃火锅，又在隔壁的日式甜品店里瞎胡照相，有这么一群一起疯疯癫癫的好朋友，真的很开心。</p>
<p>周是和我一起长大的兄弟，我们的生日也只差两天，还记得有一年的中秋是十二号，于是十一十二十三一连三天都成了节日。因为有太多太多回忆，真要我写下来，太难，不过倒是可以做几期播客节目（这事儿我都谋划了快一年半了，还是没正式启动，拖延症啊）。</p>
<p>跑步经过一段时间系统练习，已经有了不小的进步。关于跑步已经写过太多，不过跑得越多，体验也越新奇。越来越了解自己的节奏和极限在哪里，也越来越能够在快坚持不住的时候再坚持一下。晚睡和不节制的饮食就是会给身体带来巨大的负担，跑起来的每一步都会让自己意识到，对自己不负责是最悔恨的事情，因为只能眼睁睁看着自己被过去的自己落下，却什么也做不了。</p>
<p>不对，其实是能做点什么的，早睡早起，饮食清淡，坚持运动阅读写作思考，跑在正轨上很多时候就是每天类似的风景，但正式这种日复一日的坚持才让人蜕变。</p>
<p>趁着中秋节给老爸换了新手机，今天也把家里用了十多年的宽带换成了光纤（居然是大院里第一个接入的），终于也开始以自己的努力为家里做点贡献了。</p>
<p>这周其实还有一件事儿值得一提，就是我终于转正啦。最开心的居然是工牌终于可以有自己的照片了，一定要找一张狂拽酷炫屌炸天，力劈华山不要脸的图。慢慢掌握了工作的节奏，也就稍微游刃有余了起来，一边学习一边实践一边思考，能够有一个这么大的舞台让我瞎折腾，还是很开心的。</p>
<p>接着按照惯例通报一下各项事务的进度，</p>
<ul>
<li>大部分技术文章都加入了更新历史这个部分，因为随着自己学习的深入，还在不断补充和修正，自己能知道上次做到什么程度，大家看起来也比较有条理</li>
<li>写书的进度，目前确定了目录和章节，一共八章，还有三章就能完成 Alpha 版本，估计下周可以完成。然后就是正式的初稿、二稿，我的计划是从初稿开始交给出版社那边帮忙审审，因为也没真的写过书，估计这个阶段还需要比较多调整，希望自己能以最好的状态坚持下来</li>
<li>重构在生产环境中运行的代码，类似于空间站在太空升级，整个动态的过程不但需要考虑静态的存量，还需要处理好动态的增量，有难度，也非常有趣</li>
<li>架构的设计一定要谨慎，我一直认为，在前期架构思考上多花一个星期，可能后期开发和维护中可以节约三个月，这笔买卖很值</li>
</ul>
<p>最后祝贺天宫二号发射成功，航天人十年磨一剑，虽然我只能搞搞无人机，但是也会努力搞出些名堂的。</p>
<p>回忆像默片播放，刻下一寸一寸旧时光。团聚是一种微妙的心情，如果一定要描述，就是一觉醒来，很多东西，仿佛永远不会变。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;旧忆像一扇窗，推开再难合上。就这样去流浪，到美丽的地方。谁的歌声轻轻唱，谁的泪水静静淌，斜阳渐矮只影长，昏黄烛火轻摇晃。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
      <category term="中秋" scheme="http://wdxtub.com/tags/%E4%B8%AD%E7%A7%8B/"/>
    
  </entry>
  
  <entry>
    <title>写给爸爸妈妈的 iPhone 指南</title>
    <link href="http://wdxtub.com/2016/09/16/iphone-guide-for-parents/"/>
    <id>http://wdxtub.com/2016/09/16/iphone-guide-for-parents/</id>
    <published>2016-09-15T23:26:35.000Z</published>
    <updated>2016-09-16T06:54:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>给爸妈换新手机，好事儿。带他们走进移动新时代，开始享受互联网带来的各种便利，大好事儿。这也正是我写这篇文章的原因，用轻松易懂的方式替代繁琐的操作指南，生动形象做到知其所以然。</p>
<a id="more"></a>
<hr>
<p>更新历史</p>
<ul>
<li>2016.09.16: 初稿，基础应用使用</li>
</ul>
<p>本文的重点不是操作指南，重点是讲解基本的概念（当然会配上一些操作指南），这样即使遇到新情况，爸爸妈妈也可以利用这些基本概念来做出判断，或者自己摸索进行学习。简单来说，就是授人以渔。</p>
<p>当然，考虑到受众的特殊性，这里不会介绍特别新潮、小众、繁杂的应用，而专注于生活基本服务，主要着眼于简单易用和安全这两个方面。会随着爸爸妈妈水平的提高逐步更新。</p>
<h2 id="智能手机到底是个什么东西？"><a href="#智能手机到底是个什么东西？" class="headerlink" title="智能手机到底是个什么东西？"></a>智能手机到底是个什么东西？</h2><p>随着时代的发展，打电话和发短信基本成为了手机最不重要的功能。但是对于老一辈来说，可能智能手机仅仅意味着屏幕更大的功能机，只用来打电话发短信，最多再来个微信什么的。换句话说，移动时代年轻人习以为常的生活方式，爸爸妈妈们是不懂的。</p>
<p>造成这种现象的原因很多，首先是学习成本，时代发展很快，对于没怎么接触过智能手机的人来说，一上来就面对如此多的新概念，如此多的帐号，的确是很心累的事情；其次是媒体妖魔化般的报道，把智能手机搞得像洪水猛兽一样，的确，通过手机完成各类事情不如打电话到柜台那样有直接的反馈，也不如一手交钱一手交货那样简单粗暴，不过一点点安全上的牺牲换来的却是巨大的效率提升，况且经过不断发展，如果自己不起贪念再小心一点，是可以躲开大部分诈骗的。</p>
<p>之所以选择给爸爸妈妈买 iPhone，一是因为 iOS（iPhone 中的操作系统）的简单易用，二是没有安卓这么群魔乱舞。很高兴爸爸妈妈能主动学习来拥抱时代变化，我当然要大力支持，大力支持不只是嘴上说说，而是拿出实际行动，本文就是一点微小的工作。</p>
<h2 id="我要联网我要联网我要联网"><a href="#我要联网我要联网我要联网" class="headerlink" title="我要联网我要联网我要联网"></a>我要联网我要联网我要联网</h2><p>首先我们要知道，在大陆主要有三大运营商（也就是提供打电话发短信上网等服务的公司），它们是：</p>
<ul>
<li>中国移动</li>
<li>中国联通</li>
<li>中国电信</li>
</ul>
<p>所以，第一步要弄清楚不同的服务用的是哪个运营商。比方说我家的宽带用的是电信，那么联通和移动的宽带优惠就可以直接不看了。这里的宽带，指的是电脑和家里 WiFi 上网的服务，一般是按年签约续约的，可能的话就直接上光纤吧。</p>
<p>然后来说说手机上网，基本上这是 4G 的问题。如果平时只是上上微信看看新闻（视频最好还是连接 WiFi 才看）的话，基本上 50 元以下的套餐就可以满足了，比方说我刚刚看到的『4G飞享套餐（青春版）』，基本上就够用了。具体可以去营业厅问问业务员，但要小心被忽悠，40 块左右是合理的，在这个前提下尽量多一点流量就好。</p>
<p>这里的流量是什么意思呢？其实就是一种计费方式，指的是按照使用的数量来收费。比方说发微信需要发送和接收数据，这个数据的量就是流量。不同的操作所花费的流量是不同的，微信的文字消息所需要的流量很少，语音和图片就稍微大一些，而视频是最大的（所以在 4G 下看视频要慎重！）</p>
<p>流量的单位主要有三种：K, M 和 G。1 M = 1024 K。1 G = 1024 M。用具体的例子来说</p>
<ul>
<li>一条文字微信消息可能不到 1 K</li>
<li>一张图片/一条语音可能是几十 K</li>
<li>一个视频可能是几 M</li>
</ul>
<p><img src="/images/14739911099191.jpg" alt=""></p>
<p>这里的『闲时』流量，意思是深夜和清晨时候，使用 4G 是另外算的。可以认为每个月有几个不同的流量存折，平日白天使用，是从『国内通用流量』这个存折里取钱；而深夜或清晨，则是从『闲时』这个存折里取钱。</p>
<p>以防万一，最好还是在设置 -&gt; 蜂窝移动网络中限制一下可以使用 4G 的应用，如下图：</p>
<p><img src="/images/14739918145070.jpg" alt=""></p>
<h2 id="点击之外还有什么操作？"><a href="#点击之外还有什么操作？" class="headerlink" title="点击之外还有什么操作？"></a>点击之外还有什么操作？</h2><p>新的 iPhone 基本都支持一种新的操作，名为 3D Touch，实际上就是稍微大力一点按压屏幕。比方说，在主界面中（就是按 Home 键之后的页面），用力按压不同的应用图标，就会有不同的快捷菜单出来，类似于鼠标的右键。</p>
<p><img src="/images/14739930763978.jpg" alt=""></p>
<p>总是输密码其实特别心累，所以现在很多应用都支持指纹或声音进行识别。比方说微信的『声音锁』和支付宝的 Touch ID 登录</p>
<p><img src="/images/14739934698321.jpg" alt=""></p>
<p>另外，我们还可以按压屏幕左边来进行不同应用的切换</p>
<p><img src="/images/14739943909914.jpg" alt=""></p>
<p>用力按压可能是比较新的体验，多尝试几次就有感觉了。</p>
<h2 id="各类-App-是个什么魔法？"><a href="#各类-App-是个什么魔法？" class="headerlink" title="各类 App 是个什么魔法？"></a>各类 App 是个什么魔法？</h2><p>智能手机之所以强大，很大程度是因为可以自由下载安装各种各样的应用，也就是我们常说的 App，这些应用我们都需要在 App Store 中进行下载。</p>
<p><img src="/images/14739949883134.jpg" alt=""></p>
<p>这里需要输入我们的 Apple 帐号和密码（第一次需要输入密码，后面可以使用指纹）。这里我们来一个小测验，试试看把下面的应用都下载下来：</p>
<p><img src="/images/14740019138114.jpg" alt=""></p>
<p>然后我们就可以进入下一节了。</p>
<h2 id="这么多帐号是个什么情况？"><a href="#这么多帐号是个什么情况？" class="headerlink" title="这么多帐号是个什么情况？"></a>这么多帐号是个什么情况？</h2><p>不同的应用，就像不同的银行，我们想在对应的银行里办业务，首先要做的就是开户。所以，我们会发现：</p>
<ul>
<li>要用微信，需要注册微信帐号（因为和 QQ 一样也是腾讯的，所以用 QQ 号也行）</li>
<li>要用支付宝，需要注册支付宝帐号（因为和淘宝一样也是阿里巴巴的，所以用淘宝帐号也行）</li>
<li>要用京东，需要注册京东帐号</li>
<li>要用铁路12306，需要注册铁路12306帐号</li>
<li>要用航旅纵横（坐飞机的），需要注册航旅纵横帐号</li>
<li>要用携程，需要注册携程帐号</li>
</ul>
<p>这么多帐号，怎么办呢？我的做法是找个小本本，把不同应用的不同帐号都记下来。不过现在很多应用支持用微信/支付宝账户登录，这就方便很多</p>
<p><img src="/images/14739961953103.jpg" alt=""></p>
<p>点击左下角的微信图标，就有如下提示</p>
<p><img src="/images/14739963692353.jpg" alt=""></p>
<p>其他的应用无论是注册还是登录，基本大同小异，尝试一下就可以了。</p>
<h2 id="怕被骗？要怎么保护自己？"><a href="#怕被骗？要怎么保护自己？" class="headerlink" title="怕被骗？要怎么保护自己？"></a>怕被骗？要怎么保护自己？</h2><p>安全问题一定是爸爸妈妈最关心的，如何尽可能保护自己呢？下面是我总结的一些经验：</p>
<ul>
<li>看起来再真的消息，也可能是假的，除非百分百确定（比方说自己点击了获取验证码，然后收到了验证码）之外，尤其要注意：  <ul>
<li>不点击任何链接</li>
<li>不从非 App Store 的途径下载应用</li>
<li>不要见到二维码就扫一扫（除非是特定的可信场景）</li>
</ul>
</li>
<li>涉及金钱相关的操作，一定要核实后再确认，不要图省事儿（比方说朋友要你帮忙充话费，要想办法确认下）</li>
<li>天上不会掉馅饼，抽奖中奖什么的，百分之两百是假的，直接删掉就好</li>
<li>不随意添加陌生人</li>
<li>姓名、生日、证件号码、住址、职业、手机号等都是隐私，他人无法证明索取信息的合法合理性之前，请一律拒绝提供</li>
<li>发送到手机上的验证码切勿随意告诉别人</li>
<li>看不懂的选项一律选否\不同意\拒绝，千万不能看都不看就选 Yes</li>
<li>使用百度进行搜索的时候一定要注意，出来的第一个可能不是官方的链接，而是骗子花钱打的广告，专门来坑钱的。要问百度为什么这么不要脸，我也很纳闷，这样吸人血的公司居然还活着，我也很气愤。</li>
</ul>
<p>总而言之，防骗最好的防守就是不起贪念，最好的进攻就是多方查证，凡事多长个心眼总是好些。</p>
<h2 id="如何绑定银行卡？"><a href="#如何绑定银行卡？" class="headerlink" title="如何绑定银行卡？"></a>如何绑定银行卡？</h2><p>一般来说，建议在微信和支付宝中绑定一张余额较少的借记卡（用来转账，因为信用卡是无法转账的）和一张信用卡（用来消费）。然后就可以在支付的时候选择微信支付或者支付宝支付了。</p>
<p>微信支付中添加银行卡的方法是：</p>
<p><img src="/images/14740011748516.jpg" alt=""></p>
<p>在支付宝中添加银行卡的方法是：</p>
<p><img src="/images/14740015814794.jpg" alt=""></p>
<p>然后根据页面中的提示，输入指定的信息即可。添加完成之后，就可以把手机当钱包用了。</p>
<h2 id="如何把手机用成钱包？"><a href="#如何把手机用成钱包？" class="headerlink" title="如何把手机用成钱包？"></a>如何把手机用成钱包？</h2><p>在具体介绍流程之前，先简要说一下两种方式，一种是我们去扫商家提供的二维码，另一种是商家来扫我们的二维码。</p>
<p><strong>我们扫商家</strong></p>
<p>【我们扫商家】商家收银台有一个写着微信/支付宝的小牌子，上面印着一个二维码，我们扫描之后，就会有一个输入金额的页面，输入商家告知的金额然后支付，就算买单完成了。</p>
<p>如果是我们去扫商家提供的二维码，可以在主界面用力按压微信/支付宝的图标，在弹出来的菜单中选择『扫一扫』</p>
<p><img src="/images/14740027401647.jpg" alt=""></p>
<p>或者在微信/支付宝的程序中选择『扫一扫』功能：</p>
<p><img src="/images/14740031759423.jpg" alt=""></p>
<p><strong>商家扫我们</strong></p>
<p>【商家扫我们】商家收银员会拿着扫描枪来扫我们的二维码，我们只需要给出我们的二维码即可。</p>
<p>如果是商家来扫我们的二维码，我们同样有两种操作方式。第一种仍然是在主界面用力按压微信/支付宝的图标，然后选择『收付款』或『付款』</p>
<p><img src="/images/14740033214802.jpg" alt=""></p>
<p>如果是在应用中，可以通过如下操作：</p>
<p><img src="/images/14740035615559.jpg" alt=""></p>
<p>多试几次应该就没问题啦，先弄清楚到底是谁扫谁，剩下的就很简单了。</p>
<h2 id="如何用手机打车？"><a href="#如何用手机打车？" class="headerlink" title="如何用手机打车？"></a>如何用手机打车？</h2><p>用手机打车其实非常简单，打开『滴滴出行』，然后选择快车，确定一下上车地点和去哪里，如果觉得价格没问题，直接点击『呼叫快车』即可。</p>
<p><img src="/images/14740085230181.jpg" alt=""></p>
<p>然后师傅就会打电话跟我们联系，找个合适的地方上车即可，下车之后需要支付的话，直接选择微信/支付宝支持即可。</p>
<h2 id="衣食住行吃喝玩乐"><a href="#衣食住行吃喝玩乐" class="headerlink" title="衣食住行吃喝玩乐"></a>衣食住行吃喝玩乐</h2><p>这部分内容稍微有些难度，会根据爸爸妈妈的学习速度不断更新，目前打算写的主题有：</p>
<ul>
<li>饮食</li>
<li>购物</li>
<li>买票</li>
<li>酒店</li>
<li>旅游</li>
<li>电影</li>
</ul>
<p>如果有任何意见建议，比方说不同的主题，或者给爸爸妈妈看但是他们还是没办法看明白的话，欢迎评论告诉我，我争取写得更清楚些。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给爸妈换新手机，好事儿。带他们走进移动新时代，开始享受互联网带来的各种便利，大好事儿。这也正是我写这篇文章的原因，用轻松易懂的方式替代繁琐的操作指南，生动形象做到知其所以然。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wdxtub.com/categories/Life/"/>
    
    
      <category term="互联网" scheme="http://wdxtub.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
      <category term="iPhone" scheme="http://wdxtub.com/tags/iPhone/"/>
    
      <category term="指南" scheme="http://wdxtub.com/tags/%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title>中秋、月饼与职业精神</title>
    <link href="http://wdxtub.com/2016/09/15/mooncake-festival-2016/"/>
    <id>http://wdxtub.com/2016/09/15/mooncake-festival-2016/</id>
    <published>2016-09-15T03:11:18.000Z</published>
    <updated>2016-09-15T10:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>螺丝钉有了归属感与主人翁精神的话，很多时候就像电影中有了情感的机器人一样，结果都是被 neng 死。</p>
<a id="more"></a>
<hr>
<h2 id="关于月饼"><a href="#关于月饼" class="headerlink" title="关于月饼"></a>关于月饼</h2><p>中秋佳节，没想到一百多盒月饼引起了如此大的波澜。从知乎到微博再到朋友圈，从老江湖到小菜鸟再到学生党，不同群体的声音确实代表着不同群体的利益。</p>
<p>老江湖历经风风雨雨，看人看事特别透彻，尤其是工程师出身的，爱才之心溢于言表，有容人之心才能聚人，或者说，还是活人。</p>
<p>小菜鸟有的激愤，路见不平一声吼，声音大却说不准重点；有的屁股放错了位置，真以为替老板守护『价值观』就成了老板；还有的明哲保身，反正事不关己，安安心心过过日子。</p>
<p>学生党和实习党就不多说了，要么是书（尤其是历史书）读得太少，要么是太天真烂漫。估计只有自己摔几个跟头才能明白，遇到这种我基本都懒得解释，毕竟解释了也没用嘛。</p>
<p>思来想去，还是觉得要发出自己的声音，权利都是自己争取来的，从天上掉下来的是施舍，不是福利。我的观点其实就一句：</p>
<p><strong>所谓公平、所谓道德、所谓价值观，不过是有目的的人拿来的冠冕堂皇的工具罢了。</strong></p>
<p>真要较真的，去《史记》，再不济《三国演义》里就有太多太多你要的答案。只能说，一小部分程序员不要走白左圣母小清新的路线，该斗争就要斗争，程序正义和用爱发电这一套已经不好使了，还是国际歌写得好——『起来全世界受苦的人！满腔的热血已经沸腾，要为真理而斗争！』</p>
<p>最后再转一发和菜头的微博：</p>
<blockquote>
<p>在互联网世界里，程序员就是巫师，大众就是麻瓜。巫师的事情和大众根本说不清楚，因为做大众太容易，懂得道德判断就可以了。所以，程序员宁愿去网站Github写程序交基友，也懒得和大众啰B嗦。而程序员组建起来的技术公司，也天然地压制各种麻瓜，推崇巫师文化。没有什么扁平化管理，不过是厌恶麻瓜罢了</p>
</blockquote>
<p>是不是很眼熟？合金装备里的 Outer Heaven 也就是这么个意思。</p>
<h2 id="关于职业精神"><a href="#关于职业精神" class="headerlink" title="关于职业精神"></a>关于职业精神</h2><p>可能因为之前读了点历史书，工作之后，只缘此山中后，对于公司和社会的认识反而更深刻了。虽然有些不愿意承认，但跟相对单纯的校园相比，确实是一摊浑水。不过我的目标绝不是摸鱼，而是把事情做好。所以看到知乎上一句话特别有同感：</p>
<blockquote>
<p>我无法接受的是那一撮迎合高层癖好，拿着鸡毛当令箭，整天溜须拍马，今天看这个不爽，明天瞧那个有问题，不停搞阶级斗争的红卫兵们。</p>
</blockquote>
<p>他们压根儿不是蠢，就是™坏。所有的属于不属于你的屎盆子都会往你头上扣，这时候他们绝不会想起所谓的公平。或者说，符合他们利益的，才是公平。</p>
<p>不黑不吹，就我接触过程序员，技术水平和领域因人而异，但是对待工作是非常严谨认真的，尤其是重任在肩的时候，宁可睡在公司也要保证服务正常。而在工作之外，更多是随意的，拖鞋短裤小背心，游戏饮料肉松饼。用这种小事化大的方式来处理，真的是以阶级斗争为纲了。照这个套路，我都不敢写代码了，写个 bug 是不是就是企图颠覆公司了？</p>
<p>不过这也让我对职业精神有了更加深刻的认识，归属感和主人翁精神看起来那么诱人，但真因为锐意进取捅了篓子，天天洗脑灌输企业价值观的老板们两个小时就可以把你一脚踢开。</p>
<p>在大公司里，对于新人来说，一没有股份，二没有期权，拿着一点儿死工资还会被各种理由东扣扣西扣扣，很多时候却依然操着卖白粉的心，不是为了什么升官发财，只不过是心中还怀着憧憬。大老板们用响亮的耳光昭告天下：我们要的是没有灵魂没有情感的机器人，活生生的人也请按照机器人的标准表现。</p>
<p>当然，这不是要把个人和企业完全对立起来，只是觉得干什么事儿还是要带着脑子，主观能动不是主观乱动，不在其位不谋其政。职业精神这事儿，堂堂正正，问心无愧就好。归属感和主人翁精神终究是属于自己的，要有自己的方向，合则同路，异则扬镳。江湖嘛，好聚好散，相逢何必曾相识呢？</p>
<p>话是这么说，但估计平日里工程师们还是会怀揣着对这个世界最原初的热爱，努力捣鼓努力前进。只是希望大家能多一些理解，很多时候正是因为这样的『单纯』和『小孩子气』，才让我们一直坚持着。如果可能，请不要用那些充满恶意的有罪推定给我们加上莫须有的罪名。</p>
<h2 id="关于中秋"><a href="#关于中秋" class="headerlink" title="关于中秋"></a>关于中秋</h2><p>最后，祝大家中秋快乐，和家人团聚，比几盒月饼重要多了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.zhihu.com/question/50600301" target="_blank" rel="external">如何看待阿里巴巴安全部门的月饼事件？</a></li>
<li><a href="https://www.zhihu.com/question/50608658" target="_blank" rel="external">由月饼事件，你对阿里的价值观有什么看法？</a></li>
<li><a href="https://www.zhihu.com/question/50659896" target="_blank" rel="external">如何看待阿里“月饼门”中最后一人（第五人）也被开除的事情？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;螺丝钉有了归属感与主人翁精神的话，很多时候就像电影中有了情感的机器人一样，结果都是被 neng 死。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="中秋" scheme="http://wdxtub.com/tags/%E4%B8%AD%E7%A7%8B/"/>
    
      <category term="月饼" scheme="http://wdxtub.com/tags/%E6%9C%88%E9%A5%BC/"/>
    
      <category term="2016" scheme="http://wdxtub.com/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>Mac CLI 指南</title>
    <link href="http://wdxtub.com/2016/09/12/mac-cli-guide/"/>
    <id>http://wdxtub.com/2016/09/12/mac-cli-guide/</id>
    <published>2016-09-12T13:22:47.000Z</published>
    <updated>2016-09-13T11:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于，Mac 上有了一款能用命令行自由操作各种软件获取各种系统信息的工具 —— Mac CLI，废话不多说，赶紧来看看它的强大威力（但是并不推荐）。</p>
<a id="more"></a>
<hr>
<p>更新记录</p>
<ul>
<li>2016.09.12: 初稿</li>
</ul>
<h2 id="安装与删除"><a href="#安装与删除" class="headerlink" title="安装与删除"></a>安装与删除</h2><p>安装方式非常简单，一行即可 <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/guarinogabriel/mac-cli/master/mac-cli/tools/install)&quot;</code>。安装完成之后需要各种配置一下，可以根据个人需要进行选择，我主要挑选了常用的工具类插件，诸如 MySQL 之类的都没有装（因为不需要）</p>
<p>删除的话也是一句 <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/guarinogabriel/mac-cli/master/mac-cli/tools/uninstall)&quot;</code></p>
<p>不过之前安装的各种小插件如果有强迫症可能也需要删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">pip uninstall glances</div><div class="line">npm uninstall --global fast-cli</div><div class="line">brew uninstall pv</div></pre></td></tr></table></figure>
<p>其他就看心情随意啦</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>这类工具的使用都是非常简单的（但是功能多了反而有些繁琐），输入 <code>mac list</code> 就可以查看各种命令，非常长，给大家感受一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># dawang @ wdxtub in ~/Documents/Blog [16-09-12 21:29:11]</span></div><div class="line">$ mac list</div><div class="line"></div><div class="line"> mac CLI – OS X <span class="built_in">command</span> line tools <span class="keyword">for</span> developers</div><div class="line">====================================================</div><div class="line"></div><div class="line">General Utilities:</div><div class="line">mac update: Install OS X software updates, update installed Ruby gems, Homebrew, npm and their installed packages</div><div class="line">mac lock: Lock</div><div class="line">mac restart: Restart OS X</div><div class="line">mac sleep: Sleep mode</div><div class="line">mac shutdown: Shutdown</div><div class="line">mac time: Show clock at top right position <span class="keyword">in</span> Terminal/iTerm</div><div class="line">mac uptime: Get the time since last restart</div><div class="line">mac volume: Get the volume from the terminal</div><div class="line">mac volume X: Set the volume from the terminal - X = Level (0-100)</div><div class="line">mac volume:mute: Mute volume</div><div class="line">mac volume:unmute: Unmute volume</div><div class="line">mac volume:ismute: Check <span class="keyword">if</span> the volume is muted or not</div><div class="line">mac screensaver: Start screensaver</div><div class="line">mac folders:list: List folders <span class="keyword">in</span> current directory with their current size</div><div class="line">mac folder:size: Calculate current folder size</div><div class="line">mac folders:remove-empty: Remove empty subdirectories</div><div class="line">mac apps:close-all: Close all opened apps</div><div class="line">mac apps:app-store: Get list of installed apps from App Store</div><div class="line">mac eject-all: Eject all mounted volumes and disks</div><div class="line">mac battery: Get battery information</div><div class="line">mac info: Get OS X version information</div><div class="line">mac find:text X: Find exact phrase recursively inside directory - X = Text string</div><div class="line">mac find:biggest-files : Find biggest files inside directory</div><div class="line">mac find:biggest-directories : Find biggest directories inside directory</div><div class="line">mac zip:extract X: Extract Zip file to current folder - X = Zip file to extract</div><div class="line">mac gzip:compress X: Compress current file using Gzip - X = File to compress</div><div class="line">mac gzip:extract X: Extract Gzip file to current folder - X = Gzip file to extract</div><div class="line">mac tar:compress X: Compress X file/directory using tar with progress indicator - X = File or directory</div><div class="line">mac tar:extract X: Extract tar file to current folder - X = Tar file to extract</div><div class="line"></div><div class="line"></div><div class="line">Search Utilities:</div><div class="line">mac find:recent X: Find files modified <span class="keyword">in</span> the last N minutes - X = number of minutes</div><div class="line">mac search:replace X: Search and replace string <span class="keyword">in</span> file - X = File to perform the search and replace operation</div><div class="line"></div><div class="line"></div><div class="line">Network Utilities:</div><div class="line">mac speedtest: Internet connection speed <span class="built_in">test</span></div><div class="line">mac speedtest:infinite: Run internet speed <span class="built_in">test</span> each 5 minutes</div><div class="line">mac ports: List of used ports</div><div class="line">mac ip:<span class="built_in">local</span>: Get <span class="built_in">local</span> IP address</div><div class="line">mac ip:public: Get public IP address</div><div class="line">mac dhcp:renew: Renew DHCP Lease</div><div class="line">mac dns:clear: Clear DNS Cache</div><div class="line"></div><div class="line"><span class="comment"># 省略</span></div><div class="line">LAMP Utilities:</div><div class="line"></div><div class="line">SSH Utilities:</div><div class="line">mac ssh:download-file X: Download file from remote server through SSH - X = Path of the remote file to download</div><div class="line">mac ssh:download-folder X: Download entire folder from remote server through SSH - X = Path of the remote folder to download</div><div class="line">mac ssh:download-database X: Download database from remote server through SSH - X = Name of the database to download</div><div class="line">mac ssh:sync:<span class="built_in">local</span> X: Sync <span class="built_in">local</span> folder with remote folder using rsync through SSH (download remote folder to <span class="built_in">local</span> folder)</div><div class="line">mac ssh:sync:remote X: Path of the remote folder to sync from <span class="built_in">local</span> folder (upload <span class="built_in">local</span> folder to remote folder)</div><div class="line">mac ssh:upload X: Upload file to remote server through SSH - X = Path of the file to upload to the remote server</div><div class="line">mac ssh:public-key X: Get public SSH key <span class="keyword">for</span> <span class="built_in">local</span> machine</div><div class="line"></div><div class="line"></div><div class="line">Web Development Utilities:</div><div class="line">mac dev:monitor X: Monitor file changes (<span class="keyword">for</span> example: <span class="built_in">log</span> file) - X = File to monitor</div><div class="line">mac dev:optimize-images: Optimize all images <span class="keyword">in</span> current directory and subdirectories</div><div class="line">mac dev:css:convert-to-scss: Convert CSS file to SCSS</div><div class="line"></div><div class="line"></div><div class="line">Performance and maintenance Utilities:</div><div class="line">mac system: Show system information to review mac performance</div><div class="line">mac temp: Show temperature, fan and battery statistics</div><div class="line">mac memory: See memory usage sorted by memory consumption</div><div class="line">mac trash:empty: Empty trash</div><div class="line">mac trash:size: Calculate trash size</div><div class="line">mac desktop:cleanup: Remove all files and directories from the Desktop directory</div><div class="line">mac downloads:cleanup: Remove all files and directories from the Downloads directory</div><div class="line"></div><div class="line"></div><div class="line">iTerm / Terminal Utilities:</div><div class="line">mac iterm:tab-title: Set title to current iTerm tab</div><div class="line"></div><div class="line"></div><div class="line">Git Utilities:</div><div class="line">mac git:config: Display <span class="built_in">local</span> Git configuration</div><div class="line">mac git:open: Open current repository on Github</div><div class="line">mac git:create:branch: Create branch based on current branch</div><div class="line">mac git:branches:date: Get last update date <span class="keyword">for</span> all branches <span class="keyword">in</span> current project</div><div class="line">mac git:undo-commit: Undo latest commit</div><div class="line">mac git:<span class="built_in">log</span>: See latest commits IDs and titles <span class="keyword">for</span> current branch</div><div class="line">mac git:branch: See all branches</div><div class="line">mac git:branch:rename: Rename Git branch</div><div class="line">mac git:branch:remove-local: Remove <span class="built_in">local</span> Git branch</div><div class="line">mac git:branch:remove-remote: Remove <span class="built_in">local</span> and remote Git branch</div><div class="line">mac git:removeecho mac git:branch: See all branches : Remove Git from current project</div><div class="line">mac git:config: Check Git settings</div><div class="line">mac git:add-removed: Add removed files to staged files</div><div class="line">mac git:size: Get size <span class="keyword">for</span> current Git repository</div><div class="line"></div><div class="line"></div><div class="line">Web Utilities:</div><div class="line">mac web:download-images: Download all images from website to current directory</div><div class="line"></div><div class="line"></div><div class="line">Homebrew Utilities:</div><div class="line">mac brew:update: Upgrade Homebrew, installed Homebrew packages, and cleanup</div><div class="line"></div><div class="line"></div><div class="line">Xcode Utilities:</div><div class="line">mac xcode:cleanup: Cleanup XCode files to free up hard disk space</div><div class="line"></div><div class="line"></div><div class="line">Image Utilities:</div><div class="line">mac image:generate:mobile-app-icons X Y: Generate mobile app icons - X = Path of the original image file, Y= Path of the output file path</div><div class="line"></div><div class="line"><span class="comment"># 省略</span></div><div class="line">Magento Utilities:</div></pre></td></tr></table></figure>
<p>有这么多命令，而且现在还支持插件，完全可以根据自己的需要来自定义了，不懂的话直接 <code>mac help</code> 即可，非常方便。不过考虑到我的内存有限，还是挑一些我个人觉得比较常用的分享给大家，其他比较鸡肋的就不介绍了（比方说显示个时间什么的，就有点蛋疼了）</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>mac update</code> 更新各类软件，包括 ruby gems, homebrew, npm 和对应的包，不过基本需要翻墙</li>
<li><code>mac lock</code> 锁屏，有动画效果</li>
<li><code>mac restart</code> 重启</li>
<li><code>mac sleep</code> 睡眠</li>
<li><code>mac shutdown</code> 关机</li>
<li><code>mac hidden:show</code> 显示隐藏文件</li>
<li><code>mac hidden:hide</code> 关闭显示隐藏文件</li>
<li><code>mac zip:extract filename</code> zip 解压</li>
<li><code>mac gzip:compress [file|folder]</code> gzip 压缩文件/文件夹</li>
<li><code>mac gzip:extract filename</code> gzip 解压</li>
<li><code>mac tar:compress [file|folder]</code> tar 压缩文件/文件夹</li>
<li><code>mac tar:extract filename</code> tar 解压</li>
<li><code>mac speedtest</code> 测试网速</li>
<li><code>mac ports</code> 显示被占用的端口（其实就是 <code>sudo lsof -iTCP -sTCP:LISTEN -P</code>）</li>
<li><code>mac ip:local</code> 显示内网 ip（其实就是 <code>ipconfig getifaddr en0</code>）</li>
<li><code>mac ip:public</code> 显示外网 ip（其实就是 <code>wget http://ipinfo.io/ip -qO -</code>）</li>
</ul>
<p>总体来说，基本可以认为是把各个常用的命令封装了一次，用统一的接口暴露出来，但是因为我的需求没这么多，其实直接用 zsh 的 alias 就足够了（所以最终我还是删掉了它）</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过短暂的使用，感觉这个工具和我的风格不太符合，比方说明明我用 <code>date</code> 命令就可以获取到当前的时间，为什么还要用 <code>mac time</code> 来呢？明明可以直接 <code>ls -lh</code> 来查看文件大小，为什么要用 <code>mac folders:list</code> 呢？明明可以直接 <code>du -h -d 1</code> 来查看当前文件夹里所有内容的大小，为什么要用 <code>mac folder:size</code> 呢？总有种脱裤子放屁的感觉。</p>
<p>还是更喜欢或许是『莫须有』的对自己电脑的『掌控力』，那么如果觉得这些命令太长太难记，完全可以自己实现一套嘛。我还是喜欢简单一点的语法，命令里有冒号简直是『大逆不道』。</p>
<p>当然，如果是新手，但是又想通过一系列风格统一的命令来（自动化）管理电脑的话，这个还是还可以考虑的。不过相信懂得越多，就越不需要这类看起来很有用的『工具』了吧。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/guarinogabriel/mac-cli/" target="_blank" rel="external">guarinogabriel/Mac-CLI</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于，Mac 上有了一款能用命令行自由操作各种软件获取各种系统信息的工具 —— Mac CLI，废话不多说，赶紧来看看它的强大威力（但是并不推荐）。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="Mac" scheme="http://wdxtub.com/tags/Mac/"/>
    
      <category term="工具" scheme="http://wdxtub.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>祝我生日快乐 - 2016</title>
    <link href="http://wdxtub.com/2016/09/11/new-born-2016/"/>
    <id>http://wdxtub.com/2016/09/11/new-born-2016/</id>
    <published>2016-09-10T23:20:45.000Z</published>
    <updated>2016-09-11T01:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>我走过山的时候山不说话，我路过海的时候海不说话。</p>
<a id="more"></a>
<hr>
<p>生日，是在给自己一个机会向过去告别的同时，以一种颇有仪式感的方式开启一段新的旅程。错过了 25 次这样的机会之后，我终于在 2016 年生日当天的清晨，以文字为马，启程了。从校园到社会的转变，也在今天正式完成。于我，每天都是新生，只是今天也许是不一样的新。</p>
<p>特别感谢爸爸妈妈给我走出国门的机会，让我得以跳脱出去，看看自己在这个国家的位置，看看国家在世界的位置。我意识到了对个人对国家的责任，感觉到了轰轰烈烈的变化，酝酿出了去超越的欲望。</p>
<p>脚下这片大地，切切实实让我感受到了规模的力量。面对尚未固化的市场，我们甚至有机会去定制规则，去让技术超越科技本身，成为文化的一部分。需求是巨大的，资源是有限的，新的车库精神和浪潮在酝酿，从最初的模仿，到目前的改进，相信在不久的将来，我们会成为引领时代的弄潮儿。</p>
<p>一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的行程。回头望，才发现历史的脚步从未停止。『探索发现』频道的纪录片『运行中国(How China Works)』中有两个片段给我留下了特别深刻的印象。</p>
<p>一是上海的三座摩天大厦。首先是金茂大厦，分层的金字塔式收束象征着传统；其次是上海环球金融中心，开瓶器式造型暗含着打开国门向外学习；最后是上海中心大厦，我们用内外结合的分层层叠的垂直都市花园完成了设计的超越，在传统与现代，钢铁与自然间找到了某种平衡。</p>
<p>二是平塘在建的世界最大球面射电望远镜，科研团队花了十年时间，从三百个地方选中了平塘。建成之后，我们有机会真正把目光投入到没有人见过的地方，甚至是宇宙的边界。全球各地优秀的科学家会因为这只『眼睛』，更多以中国为中心来开展合作和研究，我们在逐渐找回属于自己的地位。</p>
<p>国家如此，个人亦是如此。有各种各样的不足，但一口吃不成个胖子，需要循序渐进改正；有各种各样的成绩，但像投篮一样，差一点就是差百分之百，没有松懈的理由。</p>
<p>希望自己在新的一岁中：从零开始，带着侠客的精神，用更加成熟和冷静的方式回归初心，用最真诚的方式扛起责任赢得信任，用少年般勇敢且浪漫的方式面对危机接受使命。遇到困境和挫折，主动从自己身上找原因，不推托，不懈怠。更加专注，培养自己对信息的敏锐度和钻研精神，发展自己的见解和主张，坚持自己的兴趣，做出有价值的产品。</p>
<p>希望自己在新的一岁中：更加关注人与人之间的连接，努力进入更大的圈子，用个人的努力把文化和艺术的概念带给大家，开始属于我们的文艺复兴时代。坚持开源和分享精神。接触不同的人群，了解不同领域的信息，去探索那些不知道自己不知道的区域，不要把所有的事情都功利化。</p>
<p>希望自己在新的一岁中：完成自己的第一本书，在计算机基础教育领域进行真正的尝试，用责任心和事业心把工作做好。并以此为切入点锻炼自己去适应社会理解社会，低调踏实，在实战中强化自己解决问题的能力。学会倾听他人的意见不说没有依据的话，节约大家的时间，真正以平等的心态做事。避免处在一个我们表现得越愚蠢，它就提供越多回报的变态激励系统之中。</p>
<p>希望自己在新的一岁中：保持乐观和好奇的心态，世间不公之事甚多，面对不公之事，去想这件事应不应该，有没有改进的空间。避免陷入嫉妒、怨憎、仇恨和自怜的思想状态中。仇恨和自怜都是灾难性的思想状态。过度自怜可以让人近乎偏执，偏执是最难逆转的东西之一。生活中的每一次不幸，无论多么倒霉，都是一个锻炼的机会。不应该在自怜中沉沦，而是应该利用每次打击来提高自我。</p>
<p>希望自己在新的一岁中：找到情投意合的另一半，共同为将来努力。无论如何要照顾好自己，规律作息，节制饮食，坚持运动，花更多时间在重要的人身上。</p>
<p>愿望许完了，祝自己生日快乐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我走过山的时候山不说话，我路过海的时候海不说话。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://wdxtub.com/categories/Life/"/>
    
    
      <category term="生日" scheme="http://wdxtub.com/tags/%E7%94%9F%E6%97%A5/"/>
    
      <category term="新生" scheme="http://wdxtub.com/tags/%E6%96%B0%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>第十三周 - 上海三月</title>
    <link href="http://wdxtub.com/2016/09/10/march-in-shanghai/"/>
    <id>http://wdxtub.com/2016/09/10/march-in-shanghai/</id>
    <published>2016-09-09T16:15:35.000Z</published>
    <updated>2016-09-09T17:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>甜甜莓茶醉，悠悠春雨喂，问寻难走心中一片白；风飞进，灯光残，忘却茶香独生叹，唯有时光难消亡。</p>
<a id="more"></a>
<hr>
<p>这周工作特别忙，三个项目并行，虽然只有其中一个我是负责人，但是另外俩需要开会沟通协调催促，不得不占据我许多时间，实话说，还不如写代码来得轻松愉快。不过借此机会认识了不少不同部门的同事，找机会还是可以多去请教下各方面的知识，也是挺不错的。</p>
<p>事情一多，原来习惯的依赖记忆和感觉来做事儿的方法已经不堪重负。虽然也还没有溢出，但是我依然不喜欢这种无头苍蝇哪个急做哪个的做事方式，所以也开始用任务管理软件了。就这两天的体验来说，非常不错，至少各个项目的需求能够一一理清并且完成了（实在完成不了的就往后排期嘛）。</p>
<p>因为写代码的时间非常宝贵，所以我会在设计上花更多的时间，争取每一行代码都发挥真正的价值，而不是拍脑袋设计最终导致成倍时间的浪费。不过在公司里写代码，有的时候直接给出没什么 bug 线上可以一直稳定运行的程序反而会让不明真相的人觉得你的工作没什么技术含量，因为一切都显得理所当然。奇怪的是，那些线上整天出问题，大家忙忙叨叨不过是为了把本应该一次做好的工作做好，在不懂的人看来竟是『上心』和『努力』的象征，这就有点搞笑了。</p>
<p>所以说一个好的技术人员不但应该技术做得好，更应该让别人知道之所以线上服务能够快速上线并且不出问题不是因为问题简单，而是因为经验积累和全面思考得到的解决方案靠谱，更不是天天低效加班做那些『看起来很努力』的事情能够比得上的。如果不扭转这种外行看内行的心态，恐怕只会劣币驱逐良币，最终大家事不关己高高挂起，毕竟人往高处走嘛。</p>
<p>最近两周，在我负责的项目上，平时对接的美国团队基本撒手不管了。这™就很尴尬了，从需求到构思设计，从开发到部署测试，一人分饰多角。不过这样也好，沟通成本基本为零了，我也很注意文档和注释的编写，一个人扛就一个人扛呗，唯一影响的可能就是项目进度，毕竟在质量上我还是对自己有要求的。</p>
<p>周中原来的 CMU 同学从美国回来办事儿，一起在公司附近吃了一顿饭，有朋自远方来，不亦乐乎。毕业之后老同学再想见面真的很需要缘分，只是希望能聚的时候，不要因为懒或者天气而轻易放弃。这段时间在公司里也交到了不少新朋友，情投意合且都有强迫症洁癖的同事合作起来非常轻松愉快，能够感受到的技术积累和深入思考，三人行必有我师，要以老司机为榜样，努力提升自己。</p>
<p>说到这个，这周起也开始了自己在代码上比较系统的技术积累（之前以写博客居多），也参考各种技能树大概制定了自己技术发展的路径。这种又有新挑战开启的感觉，既刺激又紧张还能收获很多，想想还有点小激动呢。希望能在一年之内取得让自己满意的成绩。</p>
<p>制定目标 -&gt; 努力训练 -&gt; 坚持不懈 -&gt; 最终突破，这其实是非常靠谱的成长方式，这周我的跑步目标终于初步达成，配速终于在四分三十秒之内了，比大学和研究生的时候每公里都快了一分多钟。看到自己成绩的时候，真的有些不可思议，原本以为要到今年年底才能达到的速度，居然提前三个多月完成了，我算了一下，只要每三步比原来的自己快一秒，每公里所花费的时间就可以少一分钟。不要想着目标有多大有多难，专注每一次呼吸和每一次步伐，一直向前就好了。</p>
<p>鞋脏了又如何，袜子湿了又如何，刮风下雨又如何？大国重器，真正的成绩，真正的改变，就是要经得起各种考验。</p>
<p>下周就要转正了，很高兴能在这个关头完成新的改变，我也做好了所有的准备，等待真正成长起来的那一天。</p>
<p>是雨潺潺，不问窗外寒；孤衾影，长夜莫过知己难，往事已故此景谁还在；世事漫随流水，算来一梦浮生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;甜甜莓茶醉，悠悠春雨喂，问寻难走心中一片白；风飞进，灯光残，忘却茶香独生叹，唯有时光难消亡。&lt;/p&gt;
    
    </summary>
    
      <category term="Gossip" scheme="http://wdxtub.com/categories/Gossip/"/>
    
    
      <category term="朋友" scheme="http://wdxtub.com/tags/%E6%9C%8B%E5%8F%8B/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="周记" scheme="http://wdxtub.com/tags/%E5%91%A8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>个人技能发展指南</title>
    <link href="http://wdxtub.com/2016/09/09/wdx-skill-set/"/>
    <id>http://wdxtub.com/2016/09/09/wdx-skill-set/</id>
    <published>2016-09-08T22:28:58.000Z</published>
    <updated>2016-09-09T15:08:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>工作也有一段时间了，基本上也参与到了公司除硬件外的各条业务与研发线，在具体的学习和开发过程中也逐渐有了对未来的认知。这里以技能树的方式来给自己定简单的规划。</p>
<a id="more"></a>
<hr>
<p>本文的主要技能点来自 StuQ 的云计算工程师/研发工程师/大数据工程师必备技能这三种，按照我个人的喜欢和判断进行了糅合。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><ul>
<li>命令行工具: tmux(screen), vim, zsh(oh-my-zsh), git</li>
<li>操作系统: Ubuntu, macOS</li>
<li>语言: Go, Java(maven, gradle), Python(pip, ipython), Javascript(node.js), Ruby(gem)</li>
<li>文档: markdown</li>
<li>编辑器: Visual Studio Code</li>
<li>流程: Scrum, Crystal, FDD</li>
<li>持续集成: Jenkins</li>
<li>协作: Teambition, Slack, Trello</li>
</ul>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li>数据结构: JSON, cPickle, protobuf</li>
<li>网络: TCP/IP, VLANs, DNS, CDN, HTTP/HTTPS 协议</li>
<li>调度<ul>
<li>crontab 最原生的定时调度</li>
<li>基于 redis 实现的分布式调度</li>
<li>基于 rpyc 实现的分布式调度</li>
<li>celery/gearman 等调度</li>
</ul>
</li>
<li>并发<ul>
<li>协程 gevent</li>
<li>线程池</li>
<li>多进程 os.fork, idea multiprocessing</li>
</ul>
</li>
<li>调试<ul>
<li>pdb, logging, Sentry, lsof, strace, trace</li>
<li>top, htop, free, iostat, vmstat, ifconfig, iftop</li>
</ul>
</li>
<li>算法<ul>
<li>一致性: Paxos, Raft, Gossip</li>
<li>数据结构: 栈、队列、链表, 散列表, 二叉树、红黑树、B 树, 图</li>
<li>常用算法: 插入排序, 桶排序, 堆排序, 快速排序, 最大子数组, 最长公共子序列, 最小生成树, 最短路径, 矩阵的存储和运算</li>
</ul>
</li>
</ul>
<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><ul>
<li>云计算: SaaS/PaaS/Iaas, Openstack, Docker</li>
<li>大数据通用处理平台: Spark, Hadoop, ELK</li>
<li>资源调度: Yarn, Mesos</li>
<li>SQL: MySQL, Sqlite, AWS RDS, PostgreSQL </li>
<li>NoSQL: MongoDB, Cassandra, DynamoDB, MongoDB, HBase</li>
<li>缓存: Memcached, Redis, AWS ElastiCache</li>
<li>检索: Solr, ElasticSearch, AWS ElasticSearch </li>
<li>数据分析: Pig, Hive, Spark SQL, Spark DataFrame, Impala, Phoenix,  ELK</li>
<li>消息队列: Kafka, RocketMQ, ZeroMQ, ActiveMQ, RabbitMQ</li>
<li>流式计算: Storm/JStorm, Spark Streaming, AWS Kinesis</li>
<li>日志收集: ELK, Scribe, Flume, Fluentd, AWS CloudTrail</li>
<li>机器学习: Mahout, Spark Mlib, TensorFlow(Google), Amazon Machine Learning, DMTK(MS), scikit learn</li>
</ul>
<h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul>
<li>计算<ul>
<li>自动扩展: AWS Autoscaling, OpenStack/Hoo!</li>
<li>负载均衡: AWS ELB, HAProxy, Nginx</li>
<li>虚拟化: Hypervisor, Xen, KVM, Hyper-V</li>
<li>容器: Docker, CoreOS, UnixLXC</li>
</ul>
</li>
<li>分布式消息<ul>
<li>消息队列: ZeroMQ, ActiveMQ, RabbitMQ, AWS SQS</li>
<li>事件/消息驱动: AWS SWS, AWS Lambda, AKKA</li>
<li>RPC: Thrift, Protobuf</li>
</ul>
</li>
<li>存储<ul>
<li>网络存储: AWS EBS, NFS v4, Ceph, Apache CloudStack</li>
<li>对象存储: AWS S3, OpenStack Swift</li>
<li>块存储: SAN, AWS EBS, RAID 概念</li>
<li>灾难恢复</li>
<li>文件系统: ext4, XFS</li>
</ul>
</li>
<li>安全: Firewall, DDoS, iptables, WAF, IDS/IPS, VPN</li>
<li>身份认证: SAML, OpenID, Microsoft AD, AWS IAM</li>
<li>监控: ZABBIX, OBSERVIUM, INICGA, AWS CloudWatch<ul>
<li>系统, 日志, 流量, 接口, 数据库</li>
</ul>
</li>
<li>理论: Microservices, RESTful, CAP</li>
<li>设计: 扩展性, 可用性, 可靠性, 一致性, 负载均衡, 过载保护</li>
<li>协议: 二进制协议, 文本协议</li>
<li>接入层: DNS 轮训, 动静态分离, 静态化, 反向代理, LVS, F5, CDN<ul>
<li>nginx, apache, lighttpd, tomcat</li>
</ul>
</li>
<li>逻辑层: 连接池, 串行化, 批量写入, 配置中心, 去中心化</li>
<li>数据层: 缓存优化, DAO, ORM, 双主架构, 主从同步, 读写分离</li>
<li>同步通讯: RPC, RMI</li>
<li>异步通讯: MQ, Cron</li>
<li>性能优化<ul>
<li>代码层: 关联代码优化, cache 对齐, 分之预测, Copy on Write, 内联优化</li>
<li>工具: OProfile, Gprof, JDK 工具</li>
<li>系统优化: 缓存, 延迟计算, 数据预读, 异步, 轮询与通知, 内存池, 模块化</li>
</ul>
</li>
<li>测试: 单元测试, 接口测试, 性能测试, 集成测试</li>
</ul>
<h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><ul>
<li>核心: Docker, LXC, RunC, Rkt, Systemd-nspawn, Hyper, VMWare Photon, Jetpack, Kurma, Bosh</li>
<li>监控: Sysdig, Guardrail, cAdvisor</li>
<li>管理: DockerUI, Kitematic, Decking.io, Shipyard, StackEngine, Panamx, Fabric8, Triton</li>
<li>基础设施集成: Nova-docker, Magnum, Clocker, Machine, MaestroNG, CloudFoundry Containers Service Broker, Mesos, Fit2Cloud, Boot2Docker</li>
<li>编排调度: Crane, Compose, Swarm, Yarn, Kubernets, Fleet, Marathon, OpenShift, GearD, Rancher</li>
<li>平台: Alauda, DaoCloud, TenxCloud, CSphere, AWS Container Service, Google Container Engine, StackDock, Orchard, Quay.io, Baremetal.io, Tutum, Giant Swarm</li>
<li>服务发现: Consul, Etcd, Zookeeper, SkyDNS, Skydock</li>
<li>日志收集: Splunk, Elasticsearch, Logstach, Kibana, Heka, Fluent, Flume</li>
<li>相关发行版: CoreOS, Project Atomic, RancherOS, ClearLinux</li>
<li>容器 PaaS: Dokku, Deis, Voxoz, Flynn, Octohost</li>
<li>容器网络: Pipework, Flannel, Calico, Weave, Socketplane.io, Pertino, Nuage</li>
<li>容器安全: Notary, SELinux on docker</li>
<li>数据持久化: Flocker, Ceph</li>
<li>开发流程工具: Drone.io, Shippable, Runnable, NodeChecker, Jenkins Docker plugin, Wercker, Totem, Packet, Docker Repository, Packer</li>
</ul>
<h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul>
<li>DevOps: SSH 证书, Fabric, SaltStack, puppet, pssh/dsh, 运维进阶</li>
<li>部署: 蓝绿部署, 灰度发布, 金丝雀发布, Canary 部署, PHOENIX 部署, AWS CloudFormation</li>
<li>基础服务: LAMP/LNMP, FTP, DNS, SAMBA, EMAIL, NTP, DHCP</li>
<li>配置: Chef, Puppet, Ansible, AWS OpsWorks, Nagios, Zabbix, Cacti, SaltStack, pssh/dsh, Fabric</li>
<li>安全: iptables, ipset</li>
<li>网络: TCP/IP, tcpdump</li>
</ul>
<p><img src="/images/14734336749159.jpg" alt=""></p>
<p>引用自 <a href="http://www.brendangregg.com/linuxperf.html" target="_blank" rel="external">Brendan Gregg <linux performance="" analysis="" and="" tools=""></linux></a></p>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li>语言: JavaScript/Node.js, TypeScript</li>
<li>编辑器: Vim, Visual Studio Code</li>
<li>调试工具: Chrome Dev Tools</li>
<li>框架: Vue.js, React, jQuery, Botostrap</li>
<li>规范: HTTP/1.1 RFCs 7230-7235, HTTP/2, ECMAScript 5/6/7, DOM/BOM/XHTML/XML/JSON/JSONP, CommonJS Modules, MicroData/RDFa</li>
<li>文档: JSDoc, Dox/Doxmate/Grunt-Doxmate</li>
<li>构建工具: make/ant, GYP, Grunt, Gulp, Yeoman, FIS, Mod, Webpack</li>
<li>安全: CSRF/XSS, CSP, Same-origin policy, ADsafe/Caja/Sandbox</li>
<li>移动: HTML5/CSS3, 响应式网页设计, Zeptojs/iScroll, React Native/Week</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://github.com/TeamStuQ/skill-map" target="_blank" rel="external">StuQ 程序员技能图谱</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作也有一段时间了，基本上也参与到了公司除硬件外的各条业务与研发线，在具体的学习和开发过程中也逐渐有了对未来的认知。这里以技能树的方式来给自己定简单的规划。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="云计算" scheme="http://wdxtub.com/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="技能树" scheme="http://wdxtub.com/tags/%E6%8A%80%E8%83%BD%E6%A0%91/"/>
    
      <category term="研发" scheme="http://wdxtub.com/tags/%E7%A0%94%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 指南</title>
    <link href="http://wdxtub.com/2016/09/08/nginx-guide/"/>
    <id>http://wdxtub.com/2016/09/08/nginx-guide/</id>
    <published>2016-09-08T12:54:54.000Z</published>
    <updated>2016-09-13T11:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要把负责的项目部署到云端，采用了现在业界流行的 Nginx 反向代理方案，这样后端的 Go 程序只需要专注于业务逻辑和功能。本文记录具体的部署方案。</p>
<a id="more"></a>
<hr>
<p>更新记录</p>
<ul>
<li>2016.09.08: 初稿</li>
</ul>
<h2 id="手动安装"><a href="#手动安装" class="headerlink" title="手动安装"></a>手动安装</h2><p>虽然云端环境是 Ubuntu 14.04，不过为了后面维护的方便，决定不采用 <code>apt-get</code> 而是手动进行安装。整个过程我已经配置成为了一个脚本，接下来通过讲解脚本来介绍具体安装的过程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># 运行之前需要切换到 root 用户</span></div><div class="line">serviceDir=/data/home/username</div><div class="line"></div><div class="line"><span class="comment"># 安装配置依赖，这里直接用 apt-get</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing make g++"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">apt-get install make</div><div class="line">apt-get install g++</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(1/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 openssl，其中 openssl-1.0.2 是长期支持版本，所以我采用这个版本</span></div><div class="line"><span class="comment"># 更多信息请访问 https://www.openssl.org/source/</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing openssl"</span> </div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2h.tar.gz</div><div class="line">tar -xzvf openssl-1.0.2h.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/openssl-1.0.2h</div><div class="line">./config</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(2/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 Pcre，为了保证兼容我们这里使用较老的版本</span></div><div class="line"><span class="comment"># 源用的是 stanford 的（因为 pcre.org 我这里打不开）</span></div><div class="line"><span class="comment"># 源：http://ftp.cs.stanford.edu/pub/exim/pcre/</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing pcre"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget http://ftp.cs.stanford.edu/pub/exim/pcre/pcre-8.37.tar.gz</div><div class="line">tar -xzvf pcre-8.37.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/pcre-8.37</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(3/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 zlib，用的就是最新的 1.2.8</span></div><div class="line"><span class="comment"># 源 http://zlib.net/zlib-1.2.8.tar.gz</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing zlib"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class="line">tar -xzvf zlib-1.2.8.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/zlib-1.2.8</div><div class="line">./configure</div><div class="line">make</div><div class="line">make install</div><div class="line">ldconfig</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(4/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装 Nginx</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Installing Nginx"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">wget https://nginx.org/download/nginx-1.10.1.tar.gz</div><div class="line">tar -xzvf nginx-1.10.1.tar.gz</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/nginx-1.10.1</div><div class="line">./configure --prefix=<span class="variable">$serviceDir</span>/nginx-server --with-openssl=<span class="variable">$serviceDir</span>/openssl-1.0.2h --with-http_ssl_module --with-http_stub_status_module --with-stream</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span>/nginx-server/conf</div><div class="line">rm -rf nginx.conf</div><div class="line"><span class="comment"># 这里用的是已经配置好的配置文件</span></div><div class="line">wget http://xssz.oss-cn-shenzhen.aliyuncs.com/server_software/nginx.conf</div><div class="line">ln <span class="_">-s</span> <span class="variable">$serviceDir</span>/nginx-server/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</div><div class="line">mkdir <span class="variable">$serviceDir</span>/nginx-server/run</div><div class="line">mkdir <span class="variable">$serviceDir</span>/nginx-config</div><div class="line">ln <span class="_">-s</span> <span class="variable">$serviceDir</span>/nginx-server/sbin/nginx /usr/<span class="built_in">local</span>/bin/nginx</div><div class="line">nginx -c <span class="variable">$serviceDir</span>/nginx-server/conf/nginx.conf</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(5/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 安装守护</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Config daemon"</span></div><div class="line"><span class="built_in">echo</span> <span class="variable">$serviceDir</span><span class="string">'/nginx-server/sbin/nginx -c '</span><span class="variable">$serviceDir</span><span class="string">'/nginx-server/conf/nginx.conf'</span> &gt; /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">'exit 0'</span> &gt;&gt; /etc/rc.local</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(6/7)"</span></div><div class="line"></div><div class="line"><span class="comment"># 清理工作，把所有的安装包保存到 software 文件夹中</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Clean up all the mess"</span></div><div class="line"><span class="built_in">cd</span> <span class="variable">$serviceDir</span></div><div class="line">mkdir <span class="variable">$serviceDir</span>/software</div><div class="line">mv *.gz <span class="variable">$serviceDir</span>/software</div><div class="line"><span class="built_in">echo</span> <span class="string">"[INFO] Done(7/7)"</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">"All Done. You can now continue your work."</span></div></pre></td></tr></table></figure>
<p>注释应该已经写得比较清楚了，这里就不再赘述</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置的部分，基本上根据默认的指引就可以完成基本的配置。这里介绍一下我从老司机那里学来的方法，把公共部分和自定义部分分离，看起来更加清晰。</p>
<p>首先，因为是手动安装的 nginx 的，默认的 nginx 配置在 <code>~/nginx-server/conf/nginx.conf</code> 中，我们来看看里面的条目：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">user www-data;</div><div class="line">worker_processes 1;</div><div class="line">worker_rlimit_nofile 262140;</div><div class="line">worker_cpu_affinity 1;</div><div class="line">error_log logs/error.log;</div><div class="line">pid run/nginx.pid;</div><div class="line"></div><div class="line">events</div><div class="line">&#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections 65535;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http</div><div class="line">&#123;</div><div class="line">    include mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line">    </div><div class="line">    sendfile on;</div><div class="line">    #aio on;</div><div class="line">    directio 512;</div><div class="line">    output_buffers 1 128k;</div><div class="line">    log_not_found off;</div><div class="line">    keepalive_timeout 65;</div><div class="line">    server_tokens off;</div><div class="line">    </div><div class="line">    gzip on;</div><div class="line">    gzip_comp_level 6;</div><div class="line">    gzip_min_length 1k;</div><div class="line">    gzip_buffers 4 8k;</div><div class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript application/json;</div><div class="line">    </div><div class="line">    log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$request_time&quot; &quot;$upstream_response_time&quot;&apos;;</div><div class="line">    access_log logs/$&#123;server_name&#125;.access.log main;</div><div class="line">    fastcgi_intercept_errors on;</div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">    </div><div class="line">    server_names_hash_max_size 4096;</div><div class="line">    </div><div class="line">    server</div><div class="line">    &#123;</div><div class="line">        listen 80 default;</div><div class="line">        server_name _;</div><div class="line">        access_log off;</div><div class="line">        </div><div class="line">        location /</div><div class="line">        &#123;</div><div class="line">            return 403;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    include /data/home/user/nginx-config/*.http;</div><div class="line">&#125;</div><div class="line"></div><div class="line">stream&#123;</div><div class="line">    include /data/home/user/nginx-config/*.tcp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>前面的都不重要，重要的是最后两句 <code>include</code> 语句，这里我们就把需要自己配置的部分抽取了出来，放到了文件夹 <code>nginx-config</code> 中。</p>
<p>接着，只要我们在 <code>nginx-config</code> 文件夹中，针对不同的域名和应用进行配置即可，比方说我的 Go 应用跑在本机的 12345 端口上，那么可以这么配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">upstream http_pool&#123;</div><div class="line">    server 127.0.0.1:12345 weight=1 max_fails=3 fail_timeout=30s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">server&#123;</div><div class="line">    server_name test.xxx.com;</div><div class="line">    listen 80;</div><div class="line">    ssl off;</div><div class="line">    </div><div class="line">    gzip on;</div><div class="line">    gzip_min_length 1k;</div><div class="line">    gzip_buffers 16 64k;</div><div class="line">    gzip_comp_level 9;</div><div class="line">    gzip_types text/plain text/css application/json application/x-javascript application/xml application/xml+rss text/javascript application/atom+xml;</div><div class="line">    gzip_vary on;</div><div class="line">    </div><div class="line">    location /</div><div class="line">    &#123;</div><div class="line">        proxy_next_upstream http_404 http_502 http_504 http_500 error timeout invalid_header;</div><div class="line">        proxy_pass http://http_pool;</div><div class="line">        proxy_set_header X-Forwarded-For $remote_addr;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        client_max_body_size 5000k;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就完成了从 test.xxx.com 到 127.0.0.1:12345 的代理了。注意，上面的配置文件有很多地方需要优化，这里只是一个简单的示例。关于具体怎么优化还有很多需要做的，会在之后慢慢更新。</p>
<p>关于 Nginx 的进阶配置，参考链接中的三篇系列文章写得非常好，这里我就简单带过，需要的同学可以前往继续研究。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>Nginx 的使用我比较常用的其实在 <code>nginx -h</code> 中已经有介绍，一般来说我就用一个命令 <code>nginx -s [stop|quit|reopen|reload]</code>，其实也就是 <code>sudo nginx -s reload</code></p>
<p>另外有一个需要注意的地方就是，在 nginx 中配置的 80(http) 和 8080(tcp) 端口不能被占用，不然会一直冲突。另外需要注意配置路径的时候不要弄错了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Nginx 是我一直以来不太熟悉的，借着这次机会能从安装到部署实战一下，还有老司机指导，感觉还是很不错的。相比于 Apache 这种重量级选手，Nginx 的灵活轻便让我非常钟意，就像 Go 一样。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://www.openssl.org/" target="_blank" rel="external">OpenSSL</a></li>
<li><a href="http://ftp.cs.stanford.edu/pub/exim/pcre/" target="_blank" rel="external">PCRE 源</a></li>
<li><a href="http://www.zlib.net/" target="_blank" rel="external">Zlib</a></li>
<li><a href="https://nginx.org/en/download.html" target="_blank" rel="external">Nginx</a></li>
<li><a href="https://www.zybuluo.com/phper/note/89391" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（1）</a></li>
<li><a href="https://www.zybuluo.com/phper/note/90310" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（2）</a></li>
<li><a href="https://www.zybuluo.com/phper/note/133244" target="_blank" rel="external">nginx的配置、虚拟主机、负载均衡和反向代理（3）</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要把负责的项目部署到云端，采用了现在业界流行的 Nginx 反向代理方案，这样后端的 Go 程序只需要专注于业务逻辑和功能。本文记录具体的部署方案。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="服务器" scheme="http://wdxtub.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="反向代理" scheme="http://wdxtub.com/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="Nginx" scheme="http://wdxtub.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>GeoHash 指南</title>
    <link href="http://wdxtub.com/2016/09/07/geohash-guide/"/>
    <id>http://wdxtub.com/2016/09/07/geohash-guide/</id>
    <published>2016-09-07T12:17:34.000Z</published>
    <updated>2016-09-13T11:32:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>做任何跟地理位置相关的服务，位置如何表示及存储是绝对绕不开的问题之一。位置的表示倒是可以用经纬度，但是索引和检索的时候，经纬度这种二维表示法就比较麻烦了，这时我们就可以利用 GeoHash 进行『降维攻击』来解决这个问题了。</p>
<a id="more"></a>
<hr>
<p>更新记录</p>
<ul>
<li>2016.09.07: 初稿</li>
</ul>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>前几年 LBS 的特性像一股龙卷风一样席卷了整个 App 圈，任何应用都迫不及待地加入了基于地理位置的相关特性。这之中一个非常火的功能就是——查看附近的人/地点/事情，比方说查看附近的餐馆、景点、朋友等等。那么问题就来了，怎么判断是不是附近呢？怎么样定义这个『附近』呢？</p>
<p>就用『附近的人』这个功能来举例，假如我要找自己身边的人，最简单粗暴的办法就是把我跟所有人的距离算一次，然后选一个阈值，在这个阈值范围内的，认为是『附近』。但是问题来了，如果我们的数据库中有一亿人，那不是每次都要计算一亿次？我们得想个办法减少计算量。</p>
<p>因为知道自己的经纬度，所以可以知道自己在哪里，比方说深圳市南山区，那么我只需要计算同在南山区的人即可，考虑到我可能在边界上，那么多加周边的几个区进行计算即可。这样一来就可以过滤掉大部分的无用计算了。</p>
<p>这种方式有一个问题，就是需要很多额外的信息，比方说我得知道南山区，不同国家不同地区各种区域划分，而且有时候区域还会变化（比方说萝岗和南沙并入广州），这样就引入了许多不必要的复杂度。不过即使如此，这种利用特定区域划分来减少计算范围的方法，非常有借鉴意义，类似于搜素剪枝，也就是索引。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>因为要使用索引的思想，那么就需要确定拿来建立索引的字段，可是经纬度这种二维的数据很难通过一维索引来高效检索，于是我们可以利用 GeoHash 来进行转换。</p>
<p>不过在此之前，我们先来看看另一个概念 —— <a href="https://zh.wikipedia.org/wiki/Trie" target="_blank" rel="external">字典树 Trie</a>。</p>
<blockquote>
<p>在计算机科学中，trie，又称前缀树或字典树，是一种有序树，用于保存关联数组，其中的键通常是字符串。与二叉查找树不同，键不是直接保存在节点中，而是由节点在树中的位置决定。一个节点的所有子孙都有相同的前缀，也就是这个节点对应的字符串，而根节点对应空字符串。一般情况下，不是所有的节点都有对应的值，只有叶子节点和部分内部节点所对应的键才有相关的值。</p>
</blockquote>
<p>这里我们需要在意的就是一点，相同父节点数目越多的子节点，从词的角度上相似度越高。接下来的 GeoHash 算法就部分满足这种特性。</p>
<p>在介绍具体的算法之前，我们先从较高层级来理解 GeoHash:</p>
<ul>
<li>GeoHash 可以把经纬度转换成一个字符串，把二维变成一维</li>
<li>每个 GeoHash 出来的字符串表示的是一个矩形区域，虽然不够精确，但是一定程度上反而能够保护隐私。Hash 值越长，表示的区域越小</li>
<li>越往左的编码表示的范围越大，可以利用这个特性来缩小或扩大检索范围</li>
</ul>
<p>比方说，北京城区的 GeoHash 大概是这样的（本文部分图片来源<a href="http://www.cnblogs.com/LBSer" target="_blank" rel="external">这里</a>，感谢作者制图）：</p>
<p><img src="/images/14732507518837.jpg" alt=""></p>
<p>可以看到，每个格子都有一个编号，具体编号的顺序也有具体的算法，比较常用的是 Peano 曲线、Hilbert 曲线和 Z-order 曲线。</p>
<p><img src="/images/14732507430572.jpg" alt=""></p>
<p>至于选择哪种算法，在地理位置相关的应用中，主要考虑的是实现的难度和区域的突变特性。这里以 Peano 填充曲线来做例子，具体的编码方式是从左下角开始的，然后逐步进行递归细化。</p>
<p><img src="/images/14732507303613.jpg" alt=""></p>
<p>Peano 曲线的主要问题是突变性，比方说从 0111 到 1000，虽然数值只变了 1，但是具体的区域就是一上一下两个极端（观察上面图片 Hilbert 曲线的变化幅度就小很多）。</p>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>了解了基本概念，现在我们可以来看看到底怎么把经纬度转换成 GeoHash 字符串了。主要分三个步骤：</p>
<ol>
<li>分别计算经纬度，转换成二进制字符串</li>
<li>合并字符串并分组</li>
<li>根据编码表转换为 Base32 字符串</li>
</ol>
<p>这里就以广州的坐标为例（北纬 23.1291，东经 113.2644），看看如何转换为 GeoHash 字符串。这里多说一句，纬度的范围是 [-90, 90]，经度的范围是 [-180, 180]，其中负数代表南纬和西经。</p>
<p>先来处理纬度 23.1291，下面的表格中左值和右值分别代表区间的范围，中值用作二分法，这里如果落在左值和中值之间，则对应位为 0，反之为 1：</p>
<table>
<thead>
<tr>
<th style="text-align:center">左值</th>
<th style="text-align:center">中值</th>
<th style="text-align:center">右值</th>
<th style="text-align:center">位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-90</td>
<td style="text-align:center">0</td>
<td style="text-align:center">90</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">45</td>
<td style="text-align:center">90</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">22.5</td>
<td style="text-align:center">45</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">33.75</td>
<td style="text-align:center">45</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">28.125</td>
<td style="text-align:center">33.75</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">25.3125</td>
<td style="text-align:center">28.125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">23.90625</td>
<td style="text-align:center">25.3125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">23.90625</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">22.5</td>
<td style="text-align:center">22.8515625</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">22.8515625</td>
<td style="text-align:center">23.02734375</td>
<td style="text-align:center">23.203125</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
<p>然后再来算经度 113.2644，同样的道理：</p>
<table>
<thead>
<tr>
<th style="text-align:center">左值</th>
<th style="text-align:center">中值</th>
<th style="text-align:center">右值</th>
<th style="text-align:center">位</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-180</td>
<td style="text-align:center">0</td>
<td style="text-align:center">180</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">90</td>
<td style="text-align:center">180</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">135</td>
<td style="text-align:center">180</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">90</td>
<td style="text-align:center">112.5</td>
<td style="text-align:center">135</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">123.75</td>
<td style="text-align:center">135</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">118.125</td>
<td style="text-align:center">123.75</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">115.3125</td>
<td style="text-align:center">118.125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">115.3125</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">112.5</td>
<td style="text-align:center">113.203125</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">113.203125</td>
<td style="text-align:center">113.5546875</td>
<td style="text-align:center">113.90625</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
<p>组合一下，纬度的编码是 <code>10100 00011</code>，经度的编码是 <code>11010 00010</code>。我们需要把这两个字符串组合起来，<strong>奇数位放经度，偶数位放纬度</strong>（这里要注意，网上很多文章这里没有写对），组合起来就是 <code>11100 11000 00000 01101</code>，也就是 <code>28 24 0 13</code>，对照 Base32 编码</p>
<table>
<thead>
<tr>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
<th style="text-align:center">Decimal</th>
<th style="text-align:center">Base 32</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">2</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">4</td>
<td style="text-align:center">5</td>
<td style="text-align:center">5</td>
<td style="text-align:center">6</td>
<td style="text-align:center">6</td>
<td style="text-align:center">7</td>
<td style="text-align:center">7</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">8</td>
<td style="text-align:center">9</td>
<td style="text-align:center">9</td>
<td style="text-align:center">10</td>
<td style="text-align:center">b</td>
<td style="text-align:center">11</td>
<td style="text-align:center">c</td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">d</td>
<td style="text-align:center">13</td>
<td style="text-align:center">e</td>
<td style="text-align:center">14</td>
<td style="text-align:center">f</td>
<td style="text-align:center">15</td>
<td style="text-align:center">g</td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">h</td>
<td style="text-align:center">17</td>
<td style="text-align:center">j</td>
<td style="text-align:center">18</td>
<td style="text-align:center">k</td>
<td style="text-align:center">19</td>
<td style="text-align:center">m</td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">n</td>
<td style="text-align:center">21</td>
<td style="text-align:center">p</td>
<td style="text-align:center">22</td>
<td style="text-align:center">q</td>
<td style="text-align:center">23</td>
<td style="text-align:center">r</td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">s</td>
<td style="text-align:center">25</td>
<td style="text-align:center">t</td>
<td style="text-align:center">26</td>
<td style="text-align:center">u</td>
<td style="text-align:center">27</td>
<td style="text-align:center">v</td>
</tr>
<tr>
<td style="text-align:center">28</td>
<td style="text-align:center">w</td>
<td style="text-align:center">29</td>
<td style="text-align:center">x</td>
<td style="text-align:center">30</td>
<td style="text-align:center">y</td>
<td style="text-align:center">31</td>
<td style="text-align:center">z</td>
</tr>
</tbody>
</table>
<p>可以得到广州的坐标（北纬 23.1291，东经 113.2644）经过 GeoHash 之后的前四位是 <code>ws0e</code>，我们在 GeoHash 的<a href="http://geohash.org/ws0e96s8g" target="_blank" rel="external">官方网站</a> 检验一下：</p>
<p><img src="/images/14732507181227.jpg" alt=""></p>
<p>可以看到前四位确实是 <code>ws0e</code>，我们手算的结果是正确的！不过因为计算精度的问题，这里只算了前四位，实际上是可以根据我们的需要来进行更多位数的计算的，网页中的编码长度是 9 位，精度基本达到 2 米的数量级（8 位的话则是 19 米，7 位是 76 米，6 位是 610 米）。如果是要做『附近』功能的话，至少要到 6 位的精度。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>了解了具体的 GeoHash 算法之后，我们可以来看看具体在实际应用中可能遇到的各种问题：</p>
<ul>
<li>GeoHash 编码对应的是矩形区域，在边界处需要处理临近区域，但是具体区域的编码并不完全跟 hash 之后的字符串一致（参考前面 0111 和 1000的例子）。为此，我们需要使用周围八个区域的 GeoHash 编码，通过有限扩大搜索范围的方法来解决这个问题</li>
<li>如果是用传统关系型数据库，可以直接利用 GeoHash 的前缀进行检索，比方说 <code>select * from locations where geohash like &#39;ws03%&#39;</code></li>
<li>如果需要兼顾速度与精确度，那么同时保存经纬度和 GeoHash 即可，利用 GeoHash 来缩小范围，再利用经纬度进行精确计算</li>
<li>计算周围 8 个矩形区域，利用原始的 GeoHash 字符串显然是不行的（考虑分别处于赤道两边且很相近的两个点）对于经度一个维度来说，无论切分几次，它的左邻和右邻都只会和它相差1。画一下就知道它是一棵有序的01满二叉树。根据当前矩形的经度串，很容易就获得了它的两个东西邻接经度串。同理，可以根据其纬度串获取南北邻接纬度串。连同当前矩形的经度串和纬度串，就能组合得到周边的8个矩形的二进制串了。Base32 编码后的到 geohash 值，即是所需要的8个索引了（此段<a href="http://evthoriz.com/2015/07/02/Geohash%20%E7%AE%97%E6%B3%95%E7%9A%84%E8%BE%B9%E7%95%8C%E9%97%AE%E9%A2%98/" target="_blank" rel="external">来源</a>）</li>
<li>Base32 是一种简单的加密算法，详情请参考后文链接</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文我们见到了解了 GeoHash 的相关概念和应用，具体的使用过程中还需要根据具体需求来进行调整（比方说不同的曲线填充算法），但是要保证具体实现的一致性。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Geohash" target="_blank" rel="external">Geohash - From Wikipedia, the free encyclopedia</a></li>
<li><a href="http://geohash.org/ws0e96s8g" target="_blank" rel="external">geohash.org</a></li>
<li><a href="http://charlee.li/geohash-intro.html" target="_blank" rel="external">geohash：用字符串实现附近地点搜索</a></li>
<li><a href="http://www.cnblogs.com/LBSer/p/3310455.html" target="_blank" rel="external">GeoHash核心原理解析</a></li>
<li><a href="https://github.com/mmcloughlin/geohash" target="_blank" rel="external">mmcloughlin/geohash(包含其他几个实现，可以对比下速度)</a></li>
<li><a href="https://github.com/wdxtub/geohash" target="_blank" rel="external">wdxtub/geohash(我自己在项目中使用的)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Base32" target="_blank" rel="external">Base32 - From Wikipedia, the free encyclopedia</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做任何跟地理位置相关的服务，位置如何表示及存储是绝对绕不开的问题之一。位置的表示倒是可以用经纬度，但是索引和检索的时候，经纬度这种二维表示法就比较麻烦了，这时我们就可以利用 GeoHash 进行『降维攻击』来解决这个问题了。&lt;/p&gt;
    
    </summary>
    
      <category term="Technique" scheme="http://wdxtub.com/categories/Technique/"/>
    
    
      <category term="索引" scheme="http://wdxtub.com/tags/%E7%B4%A2%E5%BC%95/"/>
    
      <category term="位置" scheme="http://wdxtub.com/tags/%E4%BD%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Destiny 游戏分析</title>
    <link href="http://wdxtub.com/2016/09/07/destiny-game/"/>
    <id>http://wdxtub.com/2016/09/07/destiny-game/</id>
    <published>2016-09-06T23:04:08.000Z</published>
    <updated>2016-09-06T23:11:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Destiny 是我在留学时候最常玩的主机游戏之一，虽然随着游戏自然热度下降很多时候成了鬼服，但是有着 Bungie 在后面撑着，游戏的设计还是颇精妙的，下面是我当时玩的时候的一些笔记。</p>
<a id="more"></a>
<hr>
<h2 id="社区建设"><a href="#社区建设" class="headerlink" title="社区建设"></a>社区建设</h2><ul>
<li>Facebook, Twitch 的无缝链接<ul>
<li>可以在游戏启动前查看截图/视频(观众较多，被赞较多)</li>
</ul>
</li>
<li>有哪些朋友在玩</li>
<li>可以查看路人的信息，加好友等</li>
<li>方便的组队系统</li>
</ul>
<h2 id="武器系统"><a href="#武器系统" class="headerlink" title="武器系统"></a>武器系统</h2><ul>
<li>主武器<ul>
<li>Auto Rifle</li>
<li>Canon</li>
<li>Scout Rifle</li>
<li>Pulse Rifle</li>
</ul>
</li>
<li>特殊武器<ul>
<li>Sniper Rifle</li>
<li>Shotgun</li>
<li>Fusion Rifle</li>
</ul>
</li>
<li>重武器<ul>
<li>Machine Gun</li>
<li>Rocket Launcher</li>
</ul>
</li>
</ul>
<h2 id="故事背景"><a href="#故事背景" class="headerlink" title="故事背景"></a>故事背景</h2><p>地球因为战争而毁灭，只剩最后一个城市，幸存的人类成为守护者来保护最后的希望。</p>
<h2 id="游戏表现"><a href="#游戏表现" class="headerlink" title="游戏表现"></a>游戏表现</h2><ul>
<li>非常清晰的任务指示<ul>
<li>进度，奖励，追踪，设置一目了然</li>
</ul>
</li>
<li>任务基本都可以重复挑战，但只有第一次有经验加成<ul>
<li>剧情任务：用于推进剧情，有等级限制</li>
<li>无尽任务：等级限制较低，但敌人等级会根据参加当前任务的玩家等级进行调整。<ul>
<li>地图上有随机出现的任务领取点，可以一直领任务</li>
<li>杀死特定敌人收集资源</li>
<li>清除某个区域所有敌人</li>
<li>探索某些地点</li>
</ul>
</li>
<li>随机任务：在剧情和无尽任务中可能会碰到的突发任务，可以自由选择是否参加</li>
</ul>
</li>
<li>Tower，Earht 最后一个城市<ul>
<li>也就是主城，物品鉴定/任务领取/副本支线/各种 NPC</li>
</ul>
</li>
<li>Old Russia, Earth<ul>
<li>一开始的战场，相当于一幅地图</li>
<li>有十多个子任务</li>
</ul>
</li>
<li>Ocean of Storms, Moon<ul>
<li>第二个开放地图</li>
<li>有十多个子任务</li>
</ul>
</li>
<li>The Crucible<ul>
<li>竞技场，类似于普通的枪战游戏</li>
</ul>
</li>
<li>Venus<ul>
<li>十级开启</li>
</ul>
</li>
<li>画面属于次世代中规中矩，没有丢光环的脸</li>
<li>人物动作扎实，剧情有 Ghost 指引</li>
<li>每个人都有一个 Ghost，可以保存最后的记忆</li>
<li>有很多中文元素，例如标语和路牌</li>
<li>游戏音效很有未来感</li>
<li>有一些任务需要 PlayStation Plus 才可以玩</li>
</ul>
<h2 id="装备设定"><a href="#装备设定" class="headerlink" title="装备设定"></a>装备设定</h2><ul>
<li>在提供多样性的前提下尽可能减少了复杂度，没有太多繁杂的属性</li>
</ul>
<h2 id="经济系统"><a href="#经济系统" class="headerlink" title="经济系统"></a>经济系统</h2><ul>
<li>游戏通用货币：GLIMMER</li>
<li>用钱买的货币：SILVER<ul>
<li>500 = $4.99</li>
<li>1000(+100) = $9.99</li>
<li>2000(+300) = $19.99</li>
</ul>
</li>
</ul>
<h2 id="人物设定"><a href="#人物设定" class="headerlink" title="人物设定"></a>人物设定</h2><ul>
<li>三种职业，每种职业有三种子职业（战士，远程，法师）</li>
<li>满级 40 级</li>
<li>装备分为不同等级：普通（白），特别（绿），罕见（蓝）</li>
<li>非普通装备需要鉴定后才可以使用（也就是不可以在战场上捡到就用）</li>
<li>武器<ul>
<li>主武器：Rifle，Patrol</li>
<li>特殊武器：狙击枪，霰弹枪</li>
<li>重武器：重机枪，火箭筒</li>
<li>武器在到达一定熟练度可以升级</li>
</ul>
</li>
<li>防具<ul>
<li>头盔</li>
<li>护臂</li>
<li>胸甲</li>
<li>足甲</li>
<li>披风</li>
<li>装饰品（40级开放）</li>
</ul>
</li>
<li>Ghost Shell<ul>
<li>任务指示，剧情推进</li>
</ul>
</li>
</ul>
<h2 id="移动客户端"><a href="#移动客户端" class="headerlink" title="移动客户端"></a>移动客户端</h2><ul>
<li>新闻频道</li>
<li>查看朋友状态</li>
<li>游戏中通知</li>
<li>与朋友的聊天</li>
<li>个人信息<ul>
<li>职业</li>
<li>上一次任务</li>
<li>游戏数据<ul>
<li>非常详尽的数据统计</li>
</ul>
</li>
<li>装备</li>
<li>物品</li>
<li>仓库</li>
</ul>
</li>
<li>任务栏<ul>
<li>任务</li>
<li>成就</li>
<li>目标</li>
<li>Bonus</li>
<li>声望</li>
</ul>
</li>
<li>NPC 相关</li>
<li>搜索：用户、玩家、小组、论坛、新闻、帮助</li>
<li>周边商店</li>
</ul>
<p>几乎游戏内的所有东西都可以在移动客户端找到</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Destiny 是我在留学时候最常玩的主机游戏之一，虽然随着游戏自然热度下降很多时候成了鬼服，但是有着 Bungie 在后面撑着，游戏的设计还是颇精妙的，下面是我当时玩的时候的一些笔记。&lt;/p&gt;
    
    </summary>
    
      <category term="Game" scheme="http://wdxtub.com/categories/Game/"/>
    
    
      <category term="Destiny" scheme="http://wdxtub.com/tags/Destiny/"/>
    
      <category term="射击" scheme="http://wdxtub.com/tags/%E5%B0%84%E5%87%BB/"/>
    
  </entry>
  
  <entry>
    <title>经济机器是怎样运行的 - 文字稿</title>
    <link href="http://wdxtub.com/2016/09/07/how-economic-works/"/>
    <id>http://wdxtub.com/2016/09/07/how-economic-works/</id>
    <published>2016-09-06T22:57:11.000Z</published>
    <updated>2016-09-06T23:01:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是视频<a href="https://www.youtube.com/watch?v=rFV7wdEX-Mo" target="_blank" rel="external">『经济机器是怎样运行的』</a>的自制文字稿，当初花了差不多三个小时才完成。这个视频用简单清晰的方式把经济这个大事儿说清楚了，我感觉还是非常不错的。正好在整理笔记，就分享给大家。</p>
<a id="more"></a>
<hr>
<p>经济虽然看起来复杂，其实是以简单和机械的方式运行的。经济有几个简单的零部件和无数次重复的简单交易组成。这些交易首先是由人的天性驱动的，因而形成三股主要的经济动力：</p>
<ol>
<li>生产率的提高</li>
<li>短期债务周期</li>
<li>长期债务周期</li>
</ol>
<p>我们来看看这三个动力是如何相互作用的。</p>
<h2 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h2><p>交易可以看做是无数交易的总和，而交易是一件非常简单的事情，交易时刻都在发生，每次买东西都是进行一笔交易。在每次交易中，买方使用货币或信用，向卖方交换商品、服务或金融资产。货币加上信用等于支出总额。</p>
<p>支出总额是经济的驱动力。</p>
<p>如果用支出总额除以产销总量，就得出价格。交易是经济最基本零件，所有的经济周期都是交易造成的。所以理解了交易，就理解了整个经济。</p>
<p>一个市场，由买卖所有商品的所有买方和卖方构成。经济就是由所有市场内的全部交易构成。把全部市场的总支出和销量加在一起，就得到了了解经济运行状况的所有信息。</p>
<p>个人、企业、银行和政府都在以上述方式从事交易，用货币和信用，交换商品、服务和金融资产。政府是最大的买方和卖方，而政府有两个组成部分，即收税和花钱的中央政府和中央银行。央行控制着经济中的货币和信贷数量，因此不同于其他买方和卖方。央行通过利率和发行更多货币来实现这种控制。因此，央行在信贷流通中发挥着重要作用。</p>
<h2 id="信贷"><a href="#信贷" class="headerlink" title="信贷"></a>信贷</h2><p>信贷是经济中最重要的组成部分，但也许是人们最不了解的部分。它之所以重要，是因为它是经济中最大也最变幻莫测的部分。贷款人和借款人，与市场交易中的买方和卖方没有两样。通常，贷款人希望自己的钱生出更多的钱，而借款人是想购买当前无法承担的东西。借贷可以同时满足贷款人和借款人的需要。</p>
<p>借款人保证偿还借款，称为本金，并支付额外的款额，称为利息。利率高时借贷就会减少，因为利息昂贵，反过来，利率低时借贷就会增加，因为利息便宜。如果借款人保证偿还债务，而贷款人相信这一承诺，信贷就产生了。任何两个人都可以通过协定，凭空创造出信贷。</p>
<p>信贷看似简单，实则复杂。信贷一旦产生，立即成为债务。债务是贷款人的资产，是借款人的负债。等到借款人之后偿还了贷款，并支付了利息，这些资产和负债将会消失，交易得以完成。</p>
<p>借款人一旦获得了信贷，便可以增加自己的支出，而支出是经济的驱动力，因为一个人的支出是另一个人的收入。如果某人的收入增加，其信用度就会提高，贷款人就更愿意把钱交给他。</p>
<p>信用良好的借款人具备两个条件：</p>
<ol>
<li>偿还能力</li>
<li>不能还债时的抵押物</li>
</ol>
<p>收入与债务的比率高，借款人就具有良好的偿还能力。如果不能偿还，借款人还可以用有价值可以出售的资产作为抵押物。这样贷款人可以放心地把钱借给他们。</p>
<p>所以收入增加，借贷也增加，从而能够增加支出，由于一个人的支出是另一个人的收入，这将导致借贷进一步增加，并不断循环。这一自我驱动的模式导致经济增长，也正是因为如此，才产生了经济周期。</p>
<h2 id="周期"><a href="#周期" class="headerlink" title="周期"></a>周期</h2><p>在一项交易中，为了获得某样东西，你必须付出另一样东西。长期来看，你得到多少取决于你生产了多少。我们的知识虽时间而逐渐增多，知识的积累会提高我们的生活水平，我们将此称为生产率的提高。</p>
<p>一个善于创新和勤奋的人，会比那些自满且懒惰的人更快提高生产率和生活水平，但在短期内不一定体现出来。</p>
<p>生产率在长期内最关键。信贷在短期内最重要。这是因为生产率的提高不会剧烈波动，因此不是经济起伏的重要动力。但是债务是这样定义的，借贷时消费超过产出，还债是消费低于产出。</p>
<p>债务量的波动有两大周期，其中一个周期持续大约 5-8 年，另一个大约持续 75-100 年。虽然每个人都在波动中，因为距离太近，往往意识不到。</p>
<p>如上所示，经济波动不是取决于创新，而是跟信贷更有关系。我们先想象一个没有信贷的经济运行。在这样的环境里，增加支出的唯一方式是增加收入，因此需要提高生产率和工作量，提高生产率是经济增长的唯一途径。由于我的支出是另一个人的收入，当我或另一个人提高生产率的时候，经济就会增长，而且是一个稳步增长。</p>
<p>但是由于我们借债，于是产生了周期，原因并不是任何法规，而是人的天性和信贷的运作方式。借债不过是提前消费，为了购买现在买不起的东西，你的支出必然超过收入，因此你需要借钱，实际上是像未来的自己借钱，这样马上就形成了一个周期。通常，一旦你借钱，就制造了一个周期。对个人是这样，对整个经济运行也是这样。这就是为什么需要理解信贷，因为信贷创造了一系列机械的和可以预料的将在未来发生的事件。这就是信贷不同于货币的地方。</p>
<p>完成交易需要使用货币，交易立即完成。利用信用开始交易，买卖双方创造了信贷，只有当偿还债务之后，交易才算完成。</p>
<p>现实生活中，大部分所谓的钱，其实都是信贷。美国国内的信贷总额大约为 50 万亿美元，而货币总额只有大约 3 万亿美元。在有信贷的经济运行中，不仅可以通过提高生产率提高支出，还可以通过借贷来提高支出。因此信贷可以使收入增长在短期内超过生产率的增长，但在长期内并非如此。</p>
<p>信贷并不是坏事，只是会导致周期性变化。</p>
<p>信贷如果造成超过偿还能力的过度消费，就是不良信贷。但是，如果信贷高效率地分配资源产生收入并偿还债务，就是良性信贷。在有信贷的经济运行中，我们可以观察各种交易，了解信贷如何带来经济增长，是一个链式增长的过程，但借债形成周期。</p>
<h2 id="短期经济周期"><a href="#短期经济周期" class="headerlink" title="短期经济周期"></a>短期经济周期</h2><p>随着经济活动的增加，出现了扩张，这是短期债务周期的第一阶段，支出继续增加，价格开始上涨。原因是，导致支出增加的是信贷，而信贷可以立刻凭空产生。如果支出和收入的增长速度超过所出售的商品的生产速度，价格就会上涨，我们把价格的上涨称为通货膨胀。</p>
<p>央行不希望通货膨胀过高，因为这会导致许多问题。央行在看到价格上涨时就会提高利率，随着利率的上升，有能力借钱的人就会减少，同时，现有的债务成本也会上升，每个月信用卡的还款额会增加。由于人们减少借债，并且还款额度增长，所以剩下来用于支出的资金将会减少，因此支出速度放慢，而由于一个人的支出是另一个人的收入，环环相扣，人们的收入将下降。由于支出减少，价格就会下跌，我们称之为通货紧缩，经济活动减少，经济便陷入衰退。如果衰退过于严重，而通货膨胀不再成为问题，央行将降低利率，使经济活动重新加速。随着利率降低，偿债成本下降，借债和支出增加，出现另一次经济扩张。</p>
<p>在短期债务周期中，限制支出的唯一因素，是贷款人和借款人的贷款意愿。如果信贷易于获得，经济就会扩张，如果信贷不易获得，经济就会衰退。请注意，这个周期主要由央行控制。</p>
<p>短期债务周期通常持续 5-8 年，在几十年里不断重复。但是请注意在每个周期的低谷和高峰后，经济增长和债务都超过前一个周期。为什么会这样，这是人促成的。人具有借更多钱和花更多钱的倾向而不喜欢偿还债务，这是人的天性，因此在长期内，债务增加的速度超过收入，从而形成长期债务周期。</p>
<h2 id="长期债务周期"><a href="#长期债务周期" class="headerlink" title="长期债务周期"></a>长期债务周期</h2><p>尽管人们的债务增加，但贷款人会提供更宽松的借贷条件，这是为什么？这是因为大家都以为形势一片大好，因为仅注意最近出现的情况。最近出现的情况是什么呢？收入一直在增加，资产价值不断上升，股票市场欣欣向荣，现在是繁荣时期，用借来的钱购买各类资产，很划算。当人们过度借贷消费时，泡沫便产生了。</p>
<p>因此，尽管债务一直增加，但是收入也已相近的速度增加，从而抵消了债务。我们把债务与收入比例称为债务负担，只要收入继续上升，债务负担就可以承受。于此同时资产价格迅猛上升，人们大量借钱来购买资产，因为投资促使资产价格日益升高，人们感觉自己很富有，因此即使积累了大量债务，收入和资产价值的上升帮助借款人在长期内保持良好的信用。但是这种情况显然无法永久持续下去。</p>
<p>几十年来，债务负担不断增加使偿贷成本越来越高，到了一定的时候，偿贷成本的增加速度超过收入，迫使人们削减支出，由于一个人的支出是另一个人的收入，收入开始减少，而偿贷成本继续增加，导致支出继续减少，周期开始逆转。</p>
<p>这时到达了长期债务的顶峰，债务负担变得过重。美国和欧洲在 2008 年就发生了这一情况。日本在 1989 年和美国在 1929 年因同样原因发生了这一情况。现在经济进入了去杠杆化时代。</p>
<h2 id="去杠杆化"><a href="#去杠杆化" class="headerlink" title="去杠杆化"></a>去杠杆化</h2><p>在去杠杆化过程中，人们削减支出，收入下降，信贷消失，资产价格下跌，银行发生挤兑，股票市场暴跌，社会紧张加剧，整个过程开始下滑并形成恶性循环，随着收入下降和偿债成本增加，借款人倍感拮据，随着信用消失，信贷枯竭，借款人再也无法借到足够的钱来偿还债务，借款人竭力填补这个窟窿，不得不出售资产，在支出下降的同时，出售热潮使市场充满待售资产。这时股票市场暴跌，不动产市场一蹶不振，银行陷入困境，随着资产价格下跌，借款人的抵押物价值也在降低，进一步降低了借款人的信用，人们觉得自己很穷，信贷迅速消失，支出减少，收入减少，财富减少，信贷减少，借债减少，这是一个恶性循环。看起来和衰退相似，但是无法通过降低利率来改变局面。</p>
<p>在衰退中，可以通过降低利率来刺激借贷。但是在去杠杆化过程中，由于利率已经很低，低至零，从而丧失刺激功能，因此降低利率不起作用。</p>
<p>美国国内的利率在 1930 年代的去杠杆化期间下降到零，在 2008 年也是如此。</p>
<p>衰退与去杠杆化的区别在于，在去杠杆化过程中，借款人的债务负担变得过重，无法通过降低利率来减轻。贷款人意识到债务过于庞大，根本无法足额偿还。借款人失去了偿带能力，其抵押物失去价值，他们觉得受到了债务的极大伤害，不想再介入更多债务。贷款人停止放贷，借款人停止借贷。整个经济体与个人一样都失去了信用度。</p>
<p>那么应该怎样应对去杠杆化？问题在于债务负担太重，必须减轻，为此可以采用四种办法：</p>
<ol>
<li>削减支出（紧缩）</li>
<li>减少债务（债务违约和重组）</li>
<li>财务再分配</li>
<li>发行货币</li>
</ol>
<p>历史上每一个去杠杆化阶段都是如此：</p>
<ul>
<li>美国（1930年代）</li>
<li>英国（1950年代）</li>
<li>日本（1990年代）</li>
<li>西班牙和意大利（2010年代）</li>
</ul>
<p>削减支出会导致收入下降，收入下降速度超过还债的速度，因此债务负担实际上更为沉重。削减支出的办法引起通货紧缩。企业不得不削减成本，这意味着工作机会减少，失业率上升。这导致下一个步骤，即必须减少债务。</p>
<p>借款人不还钱，存款人会担心银行没钱，于是纷纷取出存款，银行受到挤兑，个人、企业、银行出现债务违约，这种严重的经济收缩，就是萧条。萧条的一个主要特征是人们发现原来属于自己的财富中很大一部分其实并不存在。</p>
<p>很多贷款人不希望自己的资产消失，同意债务重组。债务重组意味着贷款人得到的还款减少，或偿还期延长，或利率低于当初商定的水平，无论如何，合约被破坏，结果是债务减少，贷款人希望多少收回一些贷款，这强过血本无归。债务重组让债务消失，但是由于它导致收入和资产价值以更快的速度消失，债务负担继续日趋沉重。削减债务和削减支出一样令人痛苦，并且导致通货紧缩，所有这些都对中央政府产生影响，因为收入降低和就业减少，意味着政府的税收减少，于此同时，由于失业率上升，中央政府需要增加支出，很多失业者储蓄不足，需要政府的财务资助。此外政府制定刺激计划和增加支以弥补经济活动的减少。</p>
<p>在去杠杆化过程中，政府的预算赤字飙升，原因是政府的支出超过税收。政府必须加税或者举债以填补赤字。但是要从哪里拿钱？</p>
<p>从富人手中，通过征税把财富从富人那里转到穷人手中。这样会产生阶级矛盾，如果萧条继续下去，就会爆发社会动荡，不仅国家内部的紧张加剧，而且国家之间也会这样，债务国和债权国之间尤其如此，这种局势会导致政治变革，尤其是极端的变革。</p>
<p>1930 年代，这种情况导致希特勒掌权，欧洲爆发战争，和美国的大萧条。</p>
<p>因为支出的很大一部分是信贷，但是萧条时期信贷消失，所以人们钱不够花，那么怎么办，央行发行更多货币，但这个会引起通货膨胀和刺激经济。</p>
<p>央行通过用这些货币购买金融资产，帮助推升了资产价格，从而提高了人们的信用，但是这仅仅有助于那些拥有金融资产的人。</p>
<p>因此，为了刺激经济，央行和政府必须合作。央行通过购买政府债券，其实是把钱借给政府，使其可以通过刺激计划和失业救济金，来增加购买商品和服务的支出，这增加了人们的收入，也增加了政府的债务，但是这个办法将降低经济中的总债务负担。</p>
<p>这是一个风险很大的时刻，决策者需要平衡考虑降低债务负担的四种办法，必须平衡兼顾通货紧缩和通货膨胀以便保持稳定，如果取成适当的平衡，就可以带来<strong>和谐的去杠杆化</strong>。</p>
<p>所以说去杠杆化可以是痛苦的，也可以是和谐的。怎样才能实现和谐的去杠杆化？需要结合使用这四种办法。</p>
<p>那么发行的货币是否会增加通货膨胀呢，如果增发的货币抵消了信贷的降幅就不会引发通货膨胀，因为影响价格的因素是支出，而支出包括货币和信贷。</p>
<p>央行为了扭转局面，不仅需要推动收入的增长，而且需要让收入的增长率，超过所积累债务的利率。也就是收入一定要比债务增长得快。但发行过多货币会导致恶性通货膨胀。</p>
<p>实际上去杠杆化是一个把高债务水平变化到低债务水平的过程。为了使经济再次恢复正常，这个通货再膨胀的阶段大约要持续 7-10 年，因此有失去的 10 年这个说法。</p>
<h2 id="三条经验法则"><a href="#三条经验法则" class="headerlink" title="三条经验法则"></a>三条经验法则</h2><ol>
<li>不要让债务的增长速度超过收入</li>
<li>不要让收入的增长速度超过生产率</li>
<li>尽一切可能提高生产率</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是视频&lt;a href=&quot;https://www.youtube.com/watch?v=rFV7wdEX-Mo&quot;&gt;『经济机器是怎样运行的』&lt;/a&gt;的自制文字稿，当初花了差不多三个小时才完成。这个视频用简单清晰的方式把经济这个大事儿说清楚了，我感觉还是非常不错的。正好在整理笔记，就分享给大家。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="http://wdxtub.com/categories/Reading/"/>
    
    
      <category term="经济" scheme="http://wdxtub.com/tags/%E7%BB%8F%E6%B5%8E/"/>
    
      <category term="机制" scheme="http://wdxtub.com/tags/%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>汇报后的小思考 - 博弈</title>
    <link href="http://wdxtub.com/2016/09/05/report-little-thought-2/"/>
    <id>http://wdxtub.com/2016/09/05/report-little-thought-2/</id>
    <published>2016-09-05T14:27:13.000Z</published>
    <updated>2016-09-05T16:26:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前觉得『横看成岭侧成峰』，看到不同的东西，不过是因为角度不同罢了。今天才意识到，想要『一览众山小』，非『凌绝顶』不可。所谓大局观，是掌握更多信息，从更高的层次观察和思考问题。</p>
<a id="more"></a>
<hr>
<p>今天参加了两场『不太一样』的会议，一是跟市场部讨论商业智能相关的数据需求，二是和知识产权部一起向公关的老大汇报。</p>
<p>作为数据平台唯二的开发，面对市场部的各类需求，我的内心一方面是拒绝的，另一方面也深知个中的重要性。技术其实和猫一样，无论黑猫白猫，能抓到老鼠就是好猫。现阶段，我们更需要能创造出价值的技术，而不是摆在博物馆悉心呵护的技术。即使如此，问题依然也很多，比方说时间和人力都远远不够，我和另一个开发人员身上各自背着几个不同项目的设计/开发/维护任务，人力几乎是零冗余的。但是这些其实都不是理由，如果天时地利人和都准备有了，还怎么体现我们的价值呢？</p>
<p>在各项资源都吃紧的条件下，我们的策略一是和市场部相关同事梳理具体的需求逻辑，力求在现有系统的基础上做简单调整即可满足需求，同时也给出临时的权宜之计用作过渡；二是结合数据使用者的相关习惯有针对进行较通用的开发，业务的归业务，架构的归架构。</p>
<p>不可忽视的是不同背景不同专业不同角色思考问题角度的不同，开发人员一定要尽可能设身处地去为用户思考，而不是去过度追求设计及实现的优美，当然这并不意味着可以瞎写代码，而是根据实际需要而不是假想的需求来进行开发。</p>
<p>因为数据平台涉及公司各个业务线，需要对接的系统和数据源非常多，如何能够高效进行沟通协调，如何保证讨论时大家的理念概念模型一致，都是值得探索和研究的问题。我现在的策略很简单，就是以『新参者』的姿态，尽可能快得去学习如何把事情做好。</p>
<p>真正看到用户是如何使用自己做的系统的时候，才更能意识到哪里做好了，哪里没做好。但是这之中出现 bug 确实非常尴尬，虽然是因为经验不足了解不深所犯的错，不过错误的数据会导致错误的判断，我的内心是不安的。这次的尴尬经历也更让我意识到把工作做完和把工作做好之间的巨大差距，还是要以更高的标准来要求自己。</p>
<p>中午睡觉起来没多久就接到电话，五点要开会，会上跟公关老大汇报，虽然汇报内容我已经熟稔于心，但还是花了一个多小时重新准备了一次。和考试前复习的大多不会考一样，准备的内容大概只有百分之十有用，剩下的讨论都在我从来没有想过的层次上进行，有点方，但是也很高兴，因为看到自己的差距就有了目标，有了目标，好好努力就是了。</p>
<p>第一次和知识产权部门与公关部门打交道，让我意识到开发只是做好事情的一环，甚至是最基础的一环，眼界放开，每一环都很重要。在诸如占坑定标准的事儿上，技术能力不是最重要的，敏锐的嗅觉和超前的筹划才是。</p>
<p>班门弄斧不是我的爱好，汇报完我了解的内容，基本就在努力观察和学习前辈们思考和表达的方法，也算有幸一撇更高层次的博弈到底是怎么回事儿。程序员间的博弈其实蛮简单，无非是接口如何设计、工作如何划分、脏活累活哪个团队来接。但是到商业博弈的范畴，那可是真刀真枪，招式不多，但是每一次出击都得切入要害，看似风平浪静其实暗涌澎湃。</p>
<p>从老大的字里行间，能够感受到他对信息广度及获取渠道的在意，只有掌握各方的动向，知己知彼，才能结合不同地区社会运转的规律和组织架构的要点，从更高的层级来判断一件事情的价值。另一个很重要的判断依据，则是历史，前事不忘后事之师绝不只是要吸取教训这么简单，而是努力去利用各方面的经验。这么说来，还真应该再去好好看看历史和兵法，都是财富。</p>
<p>『上将伐谋，其次伐交，再次伐兵，其下攻城』，真正参与到项目中来，才意识到各种公司和组织在标准制定这件事情上的白热化竞争。这之中知识产权相关的工作，就是保护自己的壁垒，没有稳固的根基，哪能广积粮缓称王闷声发大财呢？</p>
<p>有的时候出了事故才是真正体现系统价值的时候，在没有出错的时候，总是会有人不相信到底能多错，不相信系统的能力。所以还是应了那句老话，塞翁失马焉知非福。</p>
<p>至于我为什么参与到这件事儿里来了，其实起因也非常简单，说白了就是一封邮件。可能因为一直以来的写作习惯，会注意上下文的逻辑及读者的感受。因此知识产权部门的同事对我的印象还蛮好的，事情才以我完全没有想到的方式在发展着。回过头来想想，即使我当时知道会因此参与到这个项目中来，能做到的程度也就和当初没啥差别。我不是为了别的什么，只是想把事情做好，只是想让大家知道，从我手中交出去的东西，是靠谱的。</p>
<p>大家身上都有很多值得我学习的地方，以后更要踏踏实实以『新参者』的心态向各行各业的老司机学习，再努力争取机会去实践。</p>
<p>最初了解『新参者』这个词，是在东野圭吾的侦探小说中，新参者就是『新来的人』的意思，主角名叫加贺，他的一句话让我印象特别深刻：</p>
<blockquote>
<p>我工作时经常想，残忍的凶杀案发生后，我们不仅要将凶手抓获，还有必要彻查案件发生的原因，否则同样的事情可能还会发生。真相中有很多值得我们学习的东西。</p>
</blockquote>
<p>为了写博客又晚睡了，但是用双手辅助完成整个思考的过程，才是一天最佳的结束方式吧。前些天才知道原来匹兹堡也举办过 G20，再加上正在杭州举办的这次，总让我感觉冥冥之中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前觉得『横看成岭侧成峰』，看到不同的东西，不过是因为角度不同罢了。今天才意识到，想要『一览众山小』，非『凌绝顶』不可。所谓大局观，是掌握更多信息，从更高的层次观察和思考问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Thinking" scheme="http://wdxtub.com/categories/Thinking/"/>
    
    
      <category term="思考" scheme="http://wdxtub.com/tags/%E6%80%9D%E8%80%83/"/>
    
      <category term="工作" scheme="http://wdxtub.com/tags/%E5%B7%A5%E4%BD%9C/"/>
    
      <category term="汇报" scheme="http://wdxtub.com/tags/%E6%B1%87%E6%8A%A5/"/>
    
  </entry>
  
</feed>
